ClassDiagram.Class>> Feedback =>=>=> RelationalSchema.Table>> feedback;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Comment =>=>=> RelationalSchema.Table>> comment;
ClassDiagram.Attribut>> Feedback.serialversionuid:long =>=>=> RelationalSchema.Column>> feedback.serialversionuid;
ClassDiagram.Attribut>> Feedback.topic:String =>=>=> RelationalSchema.Column>> feedback.topic;
ClassDiagram.Attribut>> Feedback.description:String =>=>=> RelationalSchema.Column>> feedback.description;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.firstname:String =>=>=> RelationalSchema.Column>> user.firstname;
ClassDiagram.Attribut>> User.lastname:String =>=>=> RelationalSchema.Column>> user.lastname;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> Comment.serialversionuid:long =>=>=> RelationalSchema.Column>> comment.serialversionuid;
ClassDiagram.Attribut>> Comment.description:String =>=>=> RelationalSchema.Column>> comment.description;
One-To-Many relationship from ClassDiagram.Class>>Feedback  to ClassDiagram.Class>>List<Comment>;
Many-To-One relationship from ClassDiagram.Class>>Comment  to ClassDiagram.Class>>feedback represented by ClassDiagram.Atrribute>>GeneratedName;
