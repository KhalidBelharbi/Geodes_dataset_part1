ClassDiagram.Class>> Usuario =>=>=> RelationalSchema.Table>> usuario;
ClassDiagram.Class>> Rol =>=>=> RelationalSchema.Table>> rol;
ClassDiagram.Attribut>> Usuario.serialversionuid:long =>=>=> RelationalSchema.Column>> usuario.serialversionuid;
ClassDiagram.Attribut>> Usuario.id:Long =>=>=> RelationalSchema.Column>> usuario.id PRIMARY KEY;
ClassDiagram.Attribut>> Usuario.username:String =>=>=> RelationalSchema.Column>> usuario.username;
ClassDiagram.Attribut>> Usuario.lastname:String =>=>=> RelationalSchema.Column>> usuario.lastname;
ClassDiagram.Attribut>> Usuario.dni:String =>=>=> RelationalSchema.Column>> usuario.dni;
ClassDiagram.Attribut>> Usuario.email:String =>=>=> RelationalSchema.Column>> usuario.email;
ClassDiagram.Attribut>> Usuario.password:String =>=>=> RelationalSchema.Column>> usuario.password;
ClassDiagram.Attribut>> Usuario.estado:boolean =>=>=> RelationalSchema.Column>> usuario.estado;
ClassDiagram.Attribut>> Rol.serialversionuid:long =>=>=> RelationalSchema.Column>> rol.serialversionuid;
ClassDiagram.Attribut>> Rol.id:Long =>=>=> RelationalSchema.Column>> rol.id PRIMARY KEY;
ClassDiagram.Attribut>> Rol.name:String =>=>=> RelationalSchema.Column>> rol.name;
Many-To-Many relationship between ClassDiagram.Class>>Usuario  and ClassDiagram.Class>>list<rol>: usuarios_roles(usuario_id:Usuario [PK] #FK to Usuario,rol_id:list<rol> [PK] #FK to list<rol>);
