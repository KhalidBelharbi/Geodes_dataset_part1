
golfcourse(id:Long [PK], name:String, rating:double);

golfcourse_set<golfplayer>(golfcourseID:golfcourse [PK] #FK to golfcourse,set<golfplayer>ID:set<golfplayer> [PK] #FK to set<golfplayer>);

elasticsearch2schemamigrationit(update_failed_message_id:String, mapping_creation_failed_message_id:String, elasticsearch_request_failed_message_id:String, thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient);

elasticsearchsimplequerystringdslit(sfholder:SearchFactoryHolder, helper:SearchITHelper);

masterthesis(id:Long [PK], title:String, text:String);

elasticsearch52normalizerdefinitionvalidationit(validation_failed_message_id:String, thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient);

scientificarticle(id:Long [PK], title:String, summary:String, text:String, wordcount:int);

elasticsearchindexstatuscheckit(thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient, strategy:IndexSchemaManagementStrategy);

elasticsearchanalyzerit(elasticsearchclient:TestElasticsearchClient);

elasticsearch2and50normalizerdefinitionmigrationit(thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient);

elasticsearchanalyzerdefinitioncreationit(thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient, strategy:IndexSchemaManagementStrategy);

elasticsearchschemacreatestrategyit(elasticsearchclient:TestElasticsearchClient);

hole(id:long [PK], length:int, par:byte);

elasticsearch5schemamigrationit(update_failed_message_id:String, mapping_creation_failed_message_id:String, elasticsearch_request_failed_message_id:String, thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient);

elasticsearchindexnameconflictit(thrown:ExpectedException);

abstractanalyzerdefinitionvalidationit(validation_failed_message_id:String, thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient);

elasticsearch2schemavalidationit(validation_failed_message_id:String, thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient);

elasticsearchindexnullastypecheckingit(thrown:ExpectedException);

elasticsearchschemametadataerrorsit(thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient, strategy:IndexSchemaManagementStrategy);

elasticsearch2and50normalizerdefinitioncreationit(thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient, strategy:IndexSchemaManagementStrategy);

driver(id:int [PK], name:String, teacher:String, score:int, delivery:Date);

elasticsearch2schemacreationit(thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient, strategy:IndexSchemaManagementStrategy);

elasticsearch52normalizerdefinitioncreationit(thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient, strategy:IndexSchemaManagementStrategy);

poi(id:Integer [PK], name:String, type:String, latitude:double, longitude:double);

golfplayer(id:Long [PK], firstname:String, lastname:String, active:Boolean, ofbirth:Date, subscriptionenddate:Calendar, handicap:double, puttingstrength:double, drivewidth:Integer, GeneratedName:Ranking, strengths:Set<String>);

golfplayer_playedcourses(GolfPlayer_ID:GolfPlayer [PK] #FK to GolfPlayer,GolfCourse_ID:GolfCourse [PK] #FK to GolfCourse);golfplayer_woncourses(GolfPlayer_ID:GolfPlayer [PK] #FK to GolfPlayer,GolfCourse_ID:GolfCourse [PK] #FK to GolfCourse);

abstractelasticsearch2and50normalizerdefinitionvalidationit(validation_failed_message_id:String, thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient);

toelasticsearchit();

elasticsearch5schemavalidationit(validation_failed_message_id:String, thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient);

elasticsearch52normalizerdefinitionmigrationit(thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient);

purgeit(logged:ExpectedLog4jLog, elasticsearchclient:TestElasticsearchClient, GeneratedName:FullTextSession);

bachelorthesis(id:Long [PK], title:String, text:String);

elasticsearchdslit();

statecandidate(id:int [PK], name:String, GeneratedName:Address #FK to(address), GeneratedName:State #FK to(state));

state(id:Integer [PK], name:String, candidate:StateCandidate #FK to(statecandidate));

tower(id:Long [PK], name:String, GeneratedName:Address #FK to(address));

address(id:Long [PK], street:String, ownedby:Person, GeneratedName:Country #FK to(country));

country(id:Integer [PK], name:String);

comicbook(id:Long [PK], title:String, text:String);

researchpaper(id:Long [PK], title:String, summary:String, text:String, wordcount:int);

elasticsearch5schemacreationit(thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient, strategy:IndexSchemaManagementStrategy);

elasticsearchunsupportedfeaturesit(logged:ExpectedLog4jLog, thrown:ExpectedException);

hockeyplayer(id:Long [PK], name:String, active:boolean);

elasticsearchanalyzerdefinitionmigrationit(thrown:ExpectedException, elasticsearchclient:TestElasticsearchClient);


** PROGRAM TYPE: JPA+Hibernate(Hybrid)