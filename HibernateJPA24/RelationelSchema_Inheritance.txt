interceptortest(GeneratedName:Logger);

defaultentitylistenertest();

listenertest();

jmxtest(log:Logger);

alwaysflushtest(log:Logger);

flushordertest(log:Logger);

autoflushtest(log:Logger);

manualflushtest(log:Logger);

commitflushtest(log:Logger);

criteriatest();

firstlevelcachetest(log:Logger);

nonstrictreadwritecachetest(log:Logger);

secondlevelcachetest(log:Logger);

author(id:Integer [PK]);

book(id:Integer [PK], title:String, GeneratedName:Author #FK to(Author));

compositeidassociationtest();

derivedidentifierprimarykeyjoincolumntest();

manytomanybidirectionalwithlinkentitytest(log:Logger);

onetomanyunidirectionaltest();

onetooneprimarykeyjoincolumntest();

onetoonebidirectionallazytest(log:Logger);

derivedidentifiertest();

notfoundtest();

onetoonebidirectionaltest(log:Logger);

onetooneunidirectionaltest();

manytomanyunidirectionaltest(log:Logger);

bidirectionaltwoonetomanymapsidtest();

unidirectionalmanytomanyremovetest(log:Logger);

onetoonemapsidtest();

manytoonetest();

onetomanybidirectionaltest();

manytomanybidirectionaltest();

spatialtest(GeneratedName:GeometryFactory);

captain(id:Identity);

oraclecustomsqlwithstoredproceduretest(log:Logger);

customsqltest(log:Logger);

customsqlsecondarytabletest(log:Logger);

collectionloadertest(log:Logger);

spaceship(name:String [PK], model:String, speed:double, firstname:Captain #FK to(Captain), GeneratedName:Dimensions);

nodynamicupdatetest();

dynamicupdatetest();

person(id:Long [PK], name:String);

bytecodeenhancementtest();

cascadeondeletetest();

phone(id:Long [PK], number:String, owner:Person #FK to(Person));

persistencecontexttest(log:Logger);

bootstraptest(emf:EntityManagerFactory, //tag::bootstrap-jpa-compliant-persistenceunit-configurable-example:EntityManagerFactory, //tag::bootstrap-jpa-compliant-persistencecontext-exampleem:EntityManager, //tag::bootstrap-jpa-compliant-persistencecontext-configurable-example:EntityManager);

explicitlockingtest(log:Logger);

optimisticlockinginstanttest();

versionsourcetest();

optimisticlocktest(log:Logger);

optimisticlockingtest(log:Logger);

optimisticlocktypealltest(log:Logger);

optimisticlocktypedirtytest(log:Logger);

optimisticlockingtimestamptest();

selectdistincttest(log:Logger);

moneyconvertertest();

periodstringtest(GeneratedName:Period);

simpleembeddableequivalenttest();

nestedembeddabletest();

simpleembeddabletest();

embeddableimplicitoverridetest();

embeddableoverridetest();

sequencegeneratorconfiguredtest();

multiplenaturalidtest();

sequencegeneratorunnamedtest();

idclassgeneratedvaluetest();

rowidtest();

embeddedidmanytoonetest();

tablegeneratorunnamedtest();

sequencegeneratornamedtest();

uuidcustomgeneratedvaluetest();

embeddedidtest();

naiveequalshashcodeentitytest();

mutablenaturalidtest();

generatedidentifiertest();

assignedidentifiertest();

simpleentitytest();

uuidgeneratedvaluetest();

idclassmanytoonetest();

simplenaturalidtest();

simpleentitytabletest();

pooledoptimizertest();

idmanytoonetest();

tablegeneratorconfiguredtest();

idclasstest();

compositenaturalidtest();

naturalidequalshashcodeentitytest();

cacheablenaturalidtest();

nclobchararraytest();

quotingtest();

instantliteraltest();

blobtest();

bitsetusertypetest();

nclobstringtest();

formulatest();

wheretest();

explicitbasictypetest();

typecategorytest();

nationalizedtest();

filterjointabletest(log:Logger);

wherejointabletest();

calendarwithtemporaltimestamptest();

clobchararraytest();

phonetypeenumeratedordinaltest();

jpaquotingtest();

nclobtest();

enumerationconvertertest();

datewithtemporaldatetest();

bitsettypedeftest();

targettest();

parenttest();

columntransformertest();

explicittypetest();

enumerationcustomtypetest();

explicitcolumnnamingtest();

datewithtemporaltimestamptest();

filtersqlfragementaliastest(log:Logger);

joinformulatest(log:Logger);

localdatetimewithtemporaltimetest();

implicitbasictypetest();

clobstringtest();

clobtest();

datewithtemporaltimetest();

autoquotingtest();

subselecttest();

phonetypeenumeratedstringtest();

blobbytearraytest();

filtertest(log:Logger);

stringproperty(id:Long [PK], name:String, value:String);

integerproperty(id:Long [PK], name:String, value:Integer);

propertyrepository(id:Long [PK], properties:List<Property<?>>);

propertyholder(id:Long [PK], GeneratedName:Property);

bitsettypetest();

joincolumnorformulatest(log:Logger);

elementcollectionaccesstest();

fieldaccesstest();

embeddableaccesstest();

propertyaccessoverridetest();

propertyaccesstest();

book(id:Long [PK], title:String, author:String);

creationtimestamptest();

inmemoryvaluegenerationtest();

generatedtest();

databasevaluegenerationtest();

updatetimestamptest();

generatortypetest();

fetchmodeselecttest(log:Logger);

lazycollectiontest(log:Logger);

fetchmodejointest(log:Logger);

profilefetchingtest(log:Logger);

batchfetchingtest(log:Logger);

fetchmodesubselecttest(log:Logger);

graphfetchingtest(log:Logger);

directvsqueryfetchingtest(log:Logger);

fetchingtest(log:Logger);

discriminatornotnullsingletabletest();

jointabletest();

explicitpolymorphismtest();

singletablediscriminatorformulatest();

tableperclasstest();

discriminatoroptionsnotnullsingletabletest();

mappedsuperclasstest();

singletabletest();

jointableprimarykeyjoincolumntest();

transactionstest();

abstractmultitenancytest(front_end_tenant:String, back_end_tenant:String, connectionprovidermap:Map<String,ConnectionProvider>, GeneratedName:SessionFactory);

entityimmutabilitytest(log:Logger);

collectionimmutabilitytest(log:Logger);

cuisine();

proxyinterfacetest();

checktest();

schemagenerationtest();

columndefaulttest();

uniqueconstrainttest();

indextest();

queuetest(log:Logger);

bidirectionalorderbylisttest();

basictypeordercolumnelementcollectiontest(log:Logger);

orderedbysqltest();

embeddabletypeelementcollectiontest();

unidirectionalsortedsettest(log:Logger);

bidirectionalbagtest();

mapkeytypetest();

unidirectionalbagtest();

mapkeyclasstest();

elementcollectionmaptest();

unidirectionalordercolumnlisttest();

basictypecollectiontest(log:Logger);

bidirectionalsortedsettest(log:Logger);

basictypeelementcollectiontest(log:Logger);

arraytest();

ordercolumnlistindexbasetest();

bidirectionalbagorphanremovaltest();

unidirectionalmaptest();

bidirectionalsettest();

bidirectionalordercolumnlisttest();

unidirectionalcomparatorsortedsettest(log:Logger);

bidirectionalmaptest();

unidirectionalsettest();

bidirectionalcomparatorsortedsettest(log:Logger);

unidirectionalorderedbylisttest();

queryauditwithmodifiedflagtest();

customrevisionentitytest();

defaultaudittest();

queryauditadresscountrytest();

entitytypechangeauditdefaulttrackingtest();

validitystrategyaudittest();

queryaudittest();

entitytypechangeaudittest();

entitytypechangeaudittrackingrevisionlistenertest();

modifiedflagsaudittest();

payment(id:Long [PK], amount:BigDecimal, completed:boolean, GeneratedName:Person #FK to(Person));

creditcardpayment();

call(id:Long [PK], GeneratedName:Phone #FK to(Phone), timestamp:Date, duration:int);

partner(id:Long [PK], name:String, version:int);

wiretransferpayment();

phone(id:Long [PK], GeneratedName:Person #FK to(Person), number:String, type:PhoneType, repairtimestamps:List<Date>);

person(id:Long [PK], name:String, nickname:String, address:String, createdon:Date, addresses:Map<AddressType,String>, version:int);

image(id:Long [PK], content:byte);

event(id:Long [PK], title:String, GeneratedName:Date);

datapoint(id:long [PK], name:String);

datapoint(id:long [PK], name:String);

datapoint(id:long [PK], name:String);

event(id:Long [PK], title:String, GeneratedName:Date);

event(id:Long [PK], title:String, GeneratedName:Date);



** PROGRAM TYPE: JPA+Hibernate(Hybrid)