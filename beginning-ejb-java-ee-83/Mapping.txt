ClassDiagram.Class>> CustomerOrder =>=>=> RelationalSchema.Table>> customerorder;
ClassDiagram.Class>> WineItem =>=>=> RelationalSchema.Table>> wineitem;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> InventoryItem =>=>=> RelationalSchema.Table>> inventoryitem;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Individual =>=>=> RelationalSchema.Table>> individual;
ClassDiagram.Class>> Distributor =>=>=> RelationalSchema.Table>> distributor;
ClassDiagram.Class>> BusinessContact =>=>=> RelationalSchema.Table>> businesscontact;
ClassDiagram.Class>> Supplier =>=>=> RelationalSchema.Table>> supplier;
ClassDiagram.Class>> Wine =>=>=> RelationalSchema.Table>> wine;
ClassDiagram.Class>> CartItem =>=>=> RelationalSchema.Table>> cartitem;
ClassDiagram.Class>> OrderItem =>=>=> RelationalSchema.Table>> orderitem;
ClassDiagram.Attribut>> CustomerOrder.creation:Date =>=>=> RelationalSchema.Column>> customerorder.creation;
ClassDiagram.Attribut>> CustomerOrder.id:Integer =>=>=> RelationalSchema.Column>> customerorder.id PRIMARY KEY;
ClassDiagram.Attribut>> CustomerOrder.status:String =>=>=> RelationalSchema.Column>> customerorder.status;
ClassDiagram.Attribut>> CustomerOrder.version:Integer =>=>=> RelationalSchema.Column>> customerorder.version;
ClassDiagram.Attribut>> WineItem.id:Integer =>=>=> RelationalSchema.Column>> wineitem.id PRIMARY KEY;
ClassDiagram.Attribut>> WineItem.quantity:int =>=>=> RelationalSchema.Column>> wineitem.quantity;
ClassDiagram.Attribut>> WineItem.version:Integer =>=>=> RelationalSchema.Column>> wineitem.version;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.id:Integer =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.state:String =>=>=> RelationalSchema.Column>> address.state;
ClassDiagram.Attribut>> Address.street1:String =>=>=> RelationalSchema.Column>> address.street1;
ClassDiagram.Attribut>> Address.street2:String =>=>=> RelationalSchema.Column>> address.street2;
ClassDiagram.Attribut>> Address.version:Integer =>=>=> RelationalSchema.Column>> address.version;
ClassDiagram.Attribut>> Address.zipcode:String =>=>=> RelationalSchema.Column>> address.zipcode;
ClassDiagram.Attribut>> InventoryItem.stock:Date =>=>=> RelationalSchema.Column>> inventoryitem.stock;
ClassDiagram.Attribut>> InventoryItem.wholesaleprice:Float =>=>=> RelationalSchema.Column>> inventoryitem.wholesaleprice;
ClassDiagram.Attribut>> Customer.email:String =>=>=> RelationalSchema.Column>> customer.email;
ClassDiagram.Attribut>> Individual.ccexpdate:String =>=>=> RelationalSchema.Column>> individual.ccexpdate;
ClassDiagram.Attribut>> Individual.ccnum:String =>=>=> RelationalSchema.Column>> individual.ccnum;
ClassDiagram.Attribut>> Distributor.companyname:String =>=>=> RelationalSchema.Column>> distributor.companyname;
ClassDiagram.Attribut>> Distributor.discount:Integer =>=>=> RelationalSchema.Column>> distributor.discount;
ClassDiagram.Attribut>> Distributor.memberstatus:String =>=>=> RelationalSchema.Column>> distributor.memberstatus;
ClassDiagram.Attribut>> BusinessContact.firstname:String =>=>=> RelationalSchema.Column>> businesscontact.firstname;
ClassDiagram.Attribut>> BusinessContact.id:Integer =>=>=> RelationalSchema.Column>> businesscontact.id PRIMARY KEY;
ClassDiagram.Attribut>> BusinessContact.lastname:String =>=>=> RelationalSchema.Column>> businesscontact.lastname;
ClassDiagram.Attribut>> BusinessContact.phone:String =>=>=> RelationalSchema.Column>> businesscontact.phone;
ClassDiagram.Attribut>> BusinessContact.version:Integer =>=>=> RelationalSchema.Column>> businesscontact.version;
ClassDiagram.Attribut>> Wine.country:String =>=>=> RelationalSchema.Column>> wine.country;
ClassDiagram.Attribut>> Wine.description:String =>=>=> RelationalSchema.Column>> wine.description;
ClassDiagram.Attribut>> Wine.id:Integer =>=>=> RelationalSchema.Column>> wine.id PRIMARY KEY;
ClassDiagram.Attribut>> Wine.name:String =>=>=> RelationalSchema.Column>> wine.name;
ClassDiagram.Attribut>> Wine.rating:int =>=>=> RelationalSchema.Column>> wine.rating;
ClassDiagram.Attribut>> Wine.region:String =>=>=> RelationalSchema.Column>> wine.region;
ClassDiagram.Attribut>> Wine.retailprice:Float =>=>=> RelationalSchema.Column>> wine.retailprice;
ClassDiagram.Attribut>> Wine.varietal:String =>=>=> RelationalSchema.Column>> wine.varietal;
ClassDiagram.Attribut>> Wine.version:Integer =>=>=> RelationalSchema.Column>> wine.version;
ClassDiagram.Attribut>> Wine.year:int =>=>=> RelationalSchema.Column>> wine.year;
ClassDiagram.Attribut>> CartItem.created:Date =>=>=> RelationalSchema.Column>> cartitem.created;
ClassDiagram.Attribut>> OrderItem.order:Date =>=>=> RelationalSchema.Column>> orderitem.order;
ClassDiagram.Attribut>> OrderItem.price:Float =>=>=> RelationalSchema.Column>> orderitem.price;
ClassDiagram.Attribut>> OrderItem.ship:Date =>=>=> RelationalSchema.Column>> orderitem.ship;
ClassDiagram.Attribut>> OrderItem.status:String =>=>=> RelationalSchema.Column>> orderitem.status;
Many-To-One relationship from ClassDiagram.Class>>CustomerOrder  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>CustomerOrder  to ClassDiagram.Class>>List<OrderItem>;
Many-To-One relationship from ClassDiagram.Class>>WineItem  to ClassDiagram.Class>>wine represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<CartItem>;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<CustomerOrder>;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<Address>;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<Address>;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Address represented by ClassDiagram.Atrribute>>defaultshipping;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Address represented by ClassDiagram.Atrribute>>defaultbilling;
Many-To-One relationship from ClassDiagram.Class>>Supplier  to ClassDiagram.Class>>Address represented by ClassDiagram.Atrribute>>payment;
Many-To-Many relationship between ClassDiagram.Class>>Wine  and ClassDiagram.Class>>list<supplier>: wine_supplier(wine_id:Wine [PK] #FK to Wine,supplier_id:list<supplier> [PK] #FK to list<supplier>);
Many-To-One relationship from ClassDiagram.Class>>CartItem  to ClassDiagram.Class>>Customer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>OrderItem  to ClassDiagram.Class>>CustomerOrder represented by ClassDiagram.Atrribute>>GeneratedName;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>WineItem  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>BusinessContact  ;
