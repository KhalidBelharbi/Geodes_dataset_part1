ClassDiagram.Class>> Attribute =>=>=> RelationalSchema.Table>> attribute;
ClassDiagram.Class>> Specialisation =>=>=> RelationalSchema.Table>> specialisation;
ClassDiagram.Class>> Task =>=>=> RelationalSchema.Table>> task;
ClassDiagram.Class>> UserRequest =>=>=> RelationalSchema.Table>> userrequest;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> AttributeType =>=>=> RelationalSchema.Table>> attributetype;
ClassDiagram.Class>> Symptom =>=>=> RelationalSchema.Table>> symptom;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> TaskInstance =>=>=> RelationalSchema.Table>> taskinstance;
ClassDiagram.Class>> TaskInstanceData =>=>=> RelationalSchema.Table>> taskinstancedata;
ClassDiagram.Attribut>> Attribute.id:long =>=>=> RelationalSchema.Column>> attribute.id PRIMARY KEY;
ClassDiagram.Attribut>> Attribute.name:String =>=>=> RelationalSchema.Column>> attribute.name;
ClassDiagram.Attribut>> Specialisation.id:long =>=>=> RelationalSchema.Column>> specialisation.id PRIMARY KEY;
ClassDiagram.Attribut>> Specialisation.name:String =>=>=> RelationalSchema.Column>> specialisation.name;
ClassDiagram.Attribut>> Specialisation.description:String =>=>=> RelationalSchema.Column>> specialisation.description;
ClassDiagram.Attribut>> Task.id:Long =>=>=> RelationalSchema.Column>> task.id PRIMARY KEY;
ClassDiagram.Attribut>> Task.name:String =>=>=> RelationalSchema.Column>> task.name;
ClassDiagram.Attribut>> Task.schedule:String =>=>=> RelationalSchema.Column>> task.schedule;
ClassDiagram.Attribut>> Task.description:String =>=>=> RelationalSchema.Column>> task.description;
ClassDiagram.Attribut>> UserRequest.requestid:Long =>=>=> RelationalSchema.Column>> userrequest.requestid PRIMARY KEY;
ClassDiagram.Attribut>> UserRequest.start:Date =>=>=> RelationalSchema.Column>> userrequest.start;
ClassDiagram.Attribut>> UserRequest.end:Date =>=>=> RelationalSchema.Column>> userrequest.end;
ClassDiagram.Attribut>> UserRequest.GeneratedName:TreatmentState =>=>=> RelationalSchema.Column>> userrequest.GeneratedName;
ClassDiagram.Attribut>> UserRequest.doctorrecommendations:String =>=>=> RelationalSchema.Column>> userrequest.doctorrecommendations;
ClassDiagram.Attribut>> Role.roleid:long =>=>=> RelationalSchema.Column>> role.roleid PRIMARY KEY;
ClassDiagram.Attribut>> Role.name:String =>=>=> RelationalSchema.Column>> role.name;
ClassDiagram.Attribut>> Role.description:String =>=>=> RelationalSchema.Column>> role.description;
ClassDiagram.Attribut>> AttributeType.id:long =>=>=> RelationalSchema.Column>> attributetype.id PRIMARY KEY;
ClassDiagram.Attribut>> AttributeType.name:String =>=>=> RelationalSchema.Column>> attributetype.name;
ClassDiagram.Attribut>> AttributeType.checkmask:String =>=>=> RelationalSchema.Column>> attributetype.checkmask;
ClassDiagram.Attribut>> Symptom.symptomid:Long =>=>=> RelationalSchema.Column>> symptom.symptomid PRIMARY KEY;
ClassDiagram.Attribut>> Symptom.name:String =>=>=> RelationalSchema.Column>> symptom.name;
ClassDiagram.Attribut>> Symptom.description:String =>=>=> RelationalSchema.Column>> symptom.description;
ClassDiagram.Attribut>> User.id:long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.firstname:String =>=>=> RelationalSchema.Column>> user.firstname;
ClassDiagram.Attribut>> User.middlename:String =>=>=> RelationalSchema.Column>> user.middlename;
ClassDiagram.Attribut>> User.lastname:String =>=>=> RelationalSchema.Column>> user.lastname;
ClassDiagram.Attribut>> User.ofbirth:Date =>=>=> RelationalSchema.Column>> user.ofbirth;
ClassDiagram.Attribut>> User.insurancenumber:String =>=>=> RelationalSchema.Column>> user.insurancenumber;
ClassDiagram.Attribut>> User.phonenumber:String =>=>=> RelationalSchema.Column>> user.phonenumber;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> TaskInstance.id:Long =>=>=> RelationalSchema.Column>> taskinstance.id PRIMARY KEY;
ClassDiagram.Attribut>> TaskInstance.createdtime:Date =>=>=> RelationalSchema.Column>> taskinstance.createdtime;
ClassDiagram.Attribut>> TaskInstance.finishedtime:Date =>=>=> RelationalSchema.Column>> taskinstance.finishedtime;
ClassDiagram.Attribut>> TaskInstance.isactive:boolean =>=>=> RelationalSchema.Column>> taskinstance.isactive;
ClassDiagram.Attribut>> TaskInstanceData.id:Long =>=>=> RelationalSchema.Column>> taskinstancedata.id PRIMARY KEY;
ClassDiagram.Attribut>> TaskInstanceData.value:String =>=>=> RelationalSchema.Column>> taskinstancedata.value;
ClassDiagram.Attribut>> TaskInstanceData.imagevalue:String =>=>=> RelationalSchema.Column>> taskinstancedata.imagevalue;
ClassDiagram.Attribut>> TaskInstanceData.value:Date =>=>=> RelationalSchema.Column>> taskinstancedata.value;
ClassDiagram.Attribut>> TaskInstanceData.numericvalue:Integer =>=>=> RelationalSchema.Column>> taskinstancedata.numericvalue;
Many-To-One relationship from ClassDiagram.Class>>Attribute  to ClassDiagram.Class>>attributetype represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Task  and ClassDiagram.Class>>list<attribute>: task_attributes(task_id:Task [PK] #FK to Task,attribute_id:list<attribute> [PK] #FK to list<attribute>);
Many-To-One relationship from ClassDiagram.Class>>UserRequest  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>UserRequest  and ClassDiagram.Class>>list<symptom>: request_symptoms(request_id:UserRequest [PK] #FK to UserRequest,symptom_id:list<symptom> [PK] #FK to list<symptom>);
list<specialisation>: user_list<specialisation>(userID:user [PK] #FK to user,list<specialisation>ID:list<specialisation> [PK] #FK to list<specialisation>);
list<role>: user_list<specialisation>(userID:user [PK] #FK to user,list<specialisation>ID:list<specialisation> [PK] #FK to list<specialisation>);user_list<role>(userID:user [PK] #FK to user,list<role>ID:list<role> [PK] #FK to list<role>);
Many-To-One relationship from ClassDiagram.Class>>TaskInstance  to ClassDiagram.Class>>task represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>TaskInstance  to ClassDiagram.Class>>userrequest represented by ClassDiagram.Atrribute>>request;
One-To-Many relationship from ClassDiagram.Class>>TaskInstance  to ClassDiagram.Class>>List<TaskInstanceData>;
Many-To-One relationship from ClassDiagram.Class>>TaskInstanceData  to ClassDiagram.Class>>taskinstance represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>TaskInstanceData  to ClassDiagram.Class>>attribute represented by ClassDiagram.Atrribute>>GeneratedName;
