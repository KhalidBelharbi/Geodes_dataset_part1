ClassDiagram.Class>> AccessorEntity =>=>=> RelationalSchema.Table>> accessorentity;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Attribut>> AccessorEntity.GeneratedName:String =>=>=> RelationalSchema.Column>> accessorentity.GeneratedName;
ClassDiagram.Attribut>> AccessorEntity.c:char =>=>=> RelationalSchema.Column>> accessorentity.c;
ClassDiagram.Attribut>> AccessorEntity.bool:boolean =>=>=> RelationalSchema.Column>> accessorentity.bool;
ClassDiagram.Attribut>> AccessorEntity.b:byte =>=>=> RelationalSchema.Column>> accessorentity.b;
ClassDiagram.Attribut>> AccessorEntity.s:short =>=>=> RelationalSchema.Column>> accessorentity.s;
ClassDiagram.Attribut>> AccessorEntity.i:int =>=>=> RelationalSchema.Column>> accessorentity.i;
ClassDiagram.Attribut>> AccessorEntity.l:long =>=>=> RelationalSchema.Column>> accessorentity.l;
ClassDiagram.Attribut>> AccessorEntity.f:float =>=>=> RelationalSchema.Column>> accessorentity.f;
ClassDiagram.Attribut>> AccessorEntity.d:double =>=>=> RelationalSchema.Column>> accessorentity.d;
ClassDiagram.Attribut>> AccessorEntity.trans:Object =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> AccessorEntity.trans2:Object =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> AccessorEntity.//fixme:thoseappeartobemappedbyhibernatetransientgetbcalls:int =>=>=> RelationalSchema.Column>> accessorentity.//fixme:thoseappeartobemappedbyhibernatetransientgetbcalls;
ClassDiagram.Attribut>> AccessorEntity.transientseticalls:int =>=>=> RelationalSchema.Column>> accessorentity.transientseticalls;
ClassDiagram.Attribut>> AccessorEntity.transientgettranscalls:int =>=>=> RelationalSchema.Column>> accessorentity.transientgettranscalls;
ClassDiagram.Attribut>> AccessorEntity.transientsettranscalls:int =>=>=> RelationalSchema.Column>> accessorentity.transientsettranscalls;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.GeneratedName:Status =>=>=> RelationalSchema.Column>> person.GeneratedName;
ClassDiagram.Attribut>> Dog.id:Integer =>=>=> RelationalSchema.Column>> dog.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.name:String =>=>=> RelationalSchema.Column>> dog.name;
ClassDiagram.Attribut>> Dog.race:String =>=>=> RelationalSchema.Column>> dog.race;
Many-To-One relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>List<Dog>;
Many-To-One relationship from ClassDiagram.Class>>Dog  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>owner;
