ClassDiagram.Class>> Categories =>=>=> RelationalSchema.Table>> categories;
ClassDiagram.Class>> City =>=>=> RelationalSchema.Table>> city;
ClassDiagram.Class>> Gender =>=>=> RelationalSchema.Table>> gender;
ClassDiagram.Class>> Organiser =>=>=> RelationalSchema.Table>> organiser;
ClassDiagram.Class>> Event =>=>=> RelationalSchema.Table>> event;
ClassDiagram.Class>> Roles =>=>=> RelationalSchema.Table>> roles;
ClassDiagram.Class>> TypeIndoorOutdoor =>=>=> RelationalSchema.Table>> typeindooroutdoor;
ClassDiagram.Class>> Difficulty =>=>=> RelationalSchema.Table>> difficulty;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> Location =>=>=> RelationalSchema.Table>> location;
ClassDiagram.Class>> County =>=>=> RelationalSchema.Table>> county;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Credentials =>=>=> RelationalSchema.Table>> credentials;
ClassDiagram.Class>> Equipment =>=>=> RelationalSchema.Table>> equipment;
ClassDiagram.Class>> CustomerBooksEvent =>=>=> RelationalSchema.Table>> customerbooksevent;
ClassDiagram.Attribut>> Categories.serialversionuid:long =>=>=> RelationalSchema.Column>> categories.serialversionuid;
ClassDiagram.Attribut>> Categories.id:Integer =>=>=> RelationalSchema.Column>> categories.id PRIMARY KEY;
ClassDiagram.Attribut>> Categories.categoryname:String =>=>=> RelationalSchema.Column>> categories.categoryname;
ClassDiagram.Attribut>> Categories.imgurl:String =>=>=> RelationalSchema.Column>> categories.imgurl;
ClassDiagram.Attribut>> City.serialversionuid:long =>=>=> RelationalSchema.Column>> city.serialversionuid;
ClassDiagram.Attribut>> City.id:Integer =>=>=> RelationalSchema.Column>> city.id PRIMARY KEY;
ClassDiagram.Attribut>> City.name:String =>=>=> RelationalSchema.Column>> city.name;
ClassDiagram.Attribut>> Gender.serialversionuid:long =>=>=> RelationalSchema.Column>> gender.serialversionuid;
ClassDiagram.Attribut>> Gender.id:Integer =>=>=> RelationalSchema.Column>> gender.id PRIMARY KEY;
ClassDiagram.Attribut>> Gender.name:String =>=>=> RelationalSchema.Column>> gender.name;
ClassDiagram.Attribut>> Organiser.serialversionuid:long =>=>=> RelationalSchema.Column>> organiser.serialversionuid;
ClassDiagram.Attribut>> Organiser.id:Integer =>=>=> RelationalSchema.Column>> organiser.id PRIMARY KEY;
ClassDiagram.Attribut>> Organiser.firstname:String =>=>=> RelationalSchema.Column>> organiser.firstname;
ClassDiagram.Attribut>> Organiser.lastname:String =>=>=> RelationalSchema.Column>> organiser.lastname;
ClassDiagram.Attribut>> Organiser.ofbirth:Date =>=>=> RelationalSchema.Column>> organiser.ofbirth;
ClassDiagram.Attribut>> Organiser.//@pattern(regexp:String =>=>=> RelationalSchema.Column>> organiser.//@pattern(regexp;
ClassDiagram.Attribut>> Organiser.address:String =>=>=> RelationalSchema.Column>> organiser.address;
ClassDiagram.Attribut>> Organiser.postalcode:String =>=>=> RelationalSchema.Column>> organiser.postalcode;
ClassDiagram.Attribut>> Event.serialversionuid:long =>=>=> RelationalSchema.Column>> event.serialversionuid;
ClassDiagram.Attribut>> Event.id:Integer =>=>=> RelationalSchema.Column>> event.id PRIMARY KEY;
ClassDiagram.Attribut>> Event.ending:Date =>=>=> RelationalSchema.Column>> event.ending;
ClassDiagram.Attribut>> Event.starting:Date =>=>=> RelationalSchema.Column>> event.starting;
ClassDiagram.Attribut>> Event.price:double =>=>=> RelationalSchema.Column>> event.price;
ClassDiagram.Attribut>> Event.description:String =>=>=> RelationalSchema.Column>> event.description;
ClassDiagram.Attribut>> Event.positions:int =>=>=> RelationalSchema.Column>> event.positions;
ClassDiagram.Attribut>> Event.remainingpositions:int =>=>=> RelationalSchema.Column>> event.remainingpositions;
ClassDiagram.Attribut>> Event.name:String =>=>=> RelationalSchema.Column>> event.name;
ClassDiagram.Attribut>> Roles.serialversionuid:long =>=>=> RelationalSchema.Column>> roles.serialversionuid;
ClassDiagram.Attribut>> Roles.id:Integer =>=>=> RelationalSchema.Column>> roles.id PRIMARY KEY;
ClassDiagram.Attribut>> Roles.role:String =>=>=> RelationalSchema.Column>> roles.role;
ClassDiagram.Attribut>> TypeIndoorOutdoor.serialversionuid:long =>=>=> RelationalSchema.Column>> typeindooroutdoor.serialversionuid;
ClassDiagram.Attribut>> TypeIndoorOutdoor.id:Integer =>=>=> RelationalSchema.Column>> typeindooroutdoor.id PRIMARY KEY;
ClassDiagram.Attribut>> TypeIndoorOutdoor.typeindooroutdoor:String =>=>=> RelationalSchema.Column>> typeindooroutdoor.typeindooroutdoor;
ClassDiagram.Attribut>> Difficulty.serialversionuid:long =>=>=> RelationalSchema.Column>> difficulty.serialversionuid;
ClassDiagram.Attribut>> Difficulty.id:Integer =>=>=> RelationalSchema.Column>> difficulty.id PRIMARY KEY;
ClassDiagram.Attribut>> Difficulty.level:String =>=>=> RelationalSchema.Column>> difficulty.level;
ClassDiagram.Attribut>> Company.serialversionuid:long =>=>=> RelationalSchema.Column>> company.serialversionuid;
ClassDiagram.Attribut>> Company.id:Integer =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.name:String =>=>=> RelationalSchema.Column>> company.name;
ClassDiagram.Attribut>> Company.address:String =>=>=> RelationalSchema.Column>> company.address;
ClassDiagram.Attribut>> Company.//@pattern(regexp:String =>=>=> RelationalSchema.Column>> company.//@pattern(regexp;
ClassDiagram.Attribut>> Company.afm:String =>=>=> RelationalSchema.Column>> company.afm;
ClassDiagram.Attribut>> Company.postalcode:String =>=>=> RelationalSchema.Column>> company.postalcode;
ClassDiagram.Attribut>> Location.serialversionuid:long =>=>=> RelationalSchema.Column>> location.serialversionuid;
ClassDiagram.Attribut>> Location.id:Integer =>=>=> RelationalSchema.Column>> location.id PRIMARY KEY;
ClassDiagram.Attribut>> Location.address:String =>=>=> RelationalSchema.Column>> location.address;
ClassDiagram.Attribut>> Location.coordinatex:String =>=>=> RelationalSchema.Column>> location.coordinatex;
ClassDiagram.Attribut>> Location.coordinatey:String =>=>=> RelationalSchema.Column>> location.coordinatey;
ClassDiagram.Attribut>> Location.postalcode:String =>=>=> RelationalSchema.Column>> location.postalcode;
ClassDiagram.Attribut>> County.serialversionuid:long =>=>=> RelationalSchema.Column>> county.serialversionuid;
ClassDiagram.Attribut>> County.id:Integer =>=>=> RelationalSchema.Column>> county.id PRIMARY KEY;
ClassDiagram.Attribut>> County.name:String =>=>=> RelationalSchema.Column>> county.name;
ClassDiagram.Attribut>> Customer.serialversionuid:long =>=>=> RelationalSchema.Column>> customer.serialversionuid;
ClassDiagram.Attribut>> Customer.id:Integer =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.firstname:String =>=>=> RelationalSchema.Column>> customer.firstname;
ClassDiagram.Attribut>> Customer.lastname:String =>=>=> RelationalSchema.Column>> customer.lastname;
ClassDiagram.Attribut>> Customer.ofbirth:Date =>=>=> RelationalSchema.Column>> customer.ofbirth;
ClassDiagram.Attribut>> Customer.//@pattern(regexp:String =>=>=> RelationalSchema.Column>> customer.//@pattern(regexp;
ClassDiagram.Attribut>> Customer.address:String =>=>=> RelationalSchema.Column>> customer.address;
ClassDiagram.Attribut>> Customer.postalcode:String =>=>=> RelationalSchema.Column>> customer.postalcode;
ClassDiagram.Attribut>> Credentials.serialversionuid:long =>=>=> RelationalSchema.Column>> credentials.serialversionuid;
ClassDiagram.Attribut>> Credentials.id:Integer =>=>=> RelationalSchema.Column>> credentials.id PRIMARY KEY;
ClassDiagram.Attribut>> Credentials.username:String =>=>=> RelationalSchema.Column>> credentials.username;
ClassDiagram.Attribut>> Credentials.password:String =>=>=> RelationalSchema.Column>> credentials.password;
ClassDiagram.Attribut>> Credentials.passwordresettoken:String =>=>=> RelationalSchema.Column>> credentials.passwordresettoken;
ClassDiagram.Attribut>> Equipment.serialversionuid:long =>=>=> RelationalSchema.Column>> equipment.serialversionuid;
ClassDiagram.Attribut>> Equipment.id:Integer =>=>=> RelationalSchema.Column>> equipment.id PRIMARY KEY;
ClassDiagram.Attribut>> Equipment.name:String =>=>=> RelationalSchema.Column>> equipment.name;
ClassDiagram.Attribut>> CustomerBooksEvent.serialversionuid:long =>=>=> RelationalSchema.Column>> customerbooksevent.serialversionuid;
ClassDiagram.Attribut>> CustomerBooksEvent.id:Integer =>=>=> RelationalSchema.Column>> customerbooksevent.id PRIMARY KEY;
ClassDiagram.Attribut>> CustomerBooksEvent.amountpositions:int =>=>=> RelationalSchema.Column>> customerbooksevent.amountpositions;
ClassDiagram.Attribut>> CustomerBooksEvent.totalprice:double =>=>=> RelationalSchema.Column>> customerbooksevent.totalprice;
One-To-Many relationship from ClassDiagram.Class>>Categories  to ClassDiagram.Class>>List<Event>;
Many-To-One relationship from ClassDiagram.Class>>City  to ClassDiagram.Class>>county represented by ClassDiagram.Atrribute>>id;
One-To-Many relationship from ClassDiagram.Class>>City  to ClassDiagram.Class>>List<Organiser>;
One-To-Many relationship from ClassDiagram.Class>>City  to ClassDiagram.Class>>List<Company>;
One-To-Many relationship from ClassDiagram.Class>>City  to ClassDiagram.Class>>List<Location>;
One-To-Many relationship from ClassDiagram.Class>>City  to ClassDiagram.Class>>List<Customer>;
One-To-Many relationship from ClassDiagram.Class>>Gender  to ClassDiagram.Class>>List<Customer>;
Many-To-One relationship from ClassDiagram.Class>>Organiser  to ClassDiagram.Class>>city represented by ClassDiagram.Atrribute>>id;
One-To-One relationship between ClassDiagram.Class>>Organiser  to ClassDiagram.Class>>credentials represented by ClassDiagram.Atrribute>>id;
One-To-Many relationship from ClassDiagram.Class>>Organiser  to ClassDiagram.Class>>List<Event>;
Many-To-One relationship from ClassDiagram.Class>>Event  to ClassDiagram.Class>>categories represented by ClassDiagram.Atrribute>>id;
Many-To-Many relationship between ClassDiagram.Class>>Event  and ClassDiagram.Class>>list<equipment>: equipment_has_event(event_id:Event [PK] #FK to Event,equipment_id:list<equipment> [PK] #FK to list<equipment>);
One-To-Many relationship from ClassDiagram.Class>>Event  to ClassDiagram.Class>>List<CustomerBooksEvent>;
Many-To-One relationship from ClassDiagram.Class>>Event  to ClassDiagram.Class>>company represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>Event  to ClassDiagram.Class>>difficulty represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>Event  to ClassDiagram.Class>>location represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>Event  to ClassDiagram.Class>>organiser represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>Event  to ClassDiagram.Class>>typeindooroutdoor represented by ClassDiagram.Atrribute>>id;
One-To-Many relationship from ClassDiagram.Class>>Roles  to ClassDiagram.Class>>List<Credentials>;
One-To-Many relationship from ClassDiagram.Class>>TypeIndoorOutdoor  to ClassDiagram.Class>>List<Event>;
One-To-Many relationship from ClassDiagram.Class>>Difficulty  to ClassDiagram.Class>>List<Event>;
Many-To-One relationship from ClassDiagram.Class>>Company  to ClassDiagram.Class>>city represented by ClassDiagram.Atrribute>>id;
One-To-One relationship between ClassDiagram.Class>>Company  to ClassDiagram.Class>>credentials represented by ClassDiagram.Atrribute>>id;
One-To-Many relationship from ClassDiagram.Class>>Company  to ClassDiagram.Class>>List<Event>;
Many-To-One relationship from ClassDiagram.Class>>Location  to ClassDiagram.Class>>city represented by ClassDiagram.Atrribute>>id;
One-To-Many relationship from ClassDiagram.Class>>Location  to ClassDiagram.Class>>List<Event>;
One-To-Many relationship from ClassDiagram.Class>>County  to ClassDiagram.Class>>List<City>;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<CustomerBooksEvent>;
Many-To-One relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>city represented by ClassDiagram.Atrribute>>id;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>credentials represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>gender represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>Credentials  to ClassDiagram.Class>>roles represented by ClassDiagram.Atrribute>>id;
One-To-One relationship between ClassDiagram.Class>>Credentials  to ClassDiagram.Class>>organiser represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Credentials  to ClassDiagram.Class>>company represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Credentials  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CustomerBooksEvent  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>CustomerBooksEvent  to ClassDiagram.Class>>event represented by ClassDiagram.Atrribute>>id;
