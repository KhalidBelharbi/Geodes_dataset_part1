transactionstest();

abstractmultitenancytest(front_end_tenant:String, back_end_tenant:String, connectionprovidermap:Map<String,ConnectionProvider>, GeneratedName:SessionFactory);

firstlevelcachetest(log:Logger);

nonstrictreadwritecachetest(log:Logger);

secondlevelcachetest(log:Logger);

spaceship(name:String [PK], model:String, speed:double, firstname:Captain #FK to(Captain), GeneratedName:Dimensions);

customsqlsecondarytabletest(log:Logger);

oraclecustomsqlwithstoredproceduretest(log:Logger);

collectionloadertest(log:Logger);

captain(id:Identity);

customsqltest(log:Logger);

profilefetchingtest(log:Logger);

fetchingtest(log:Logger);

fetchmodejointest(log:Logger);

lazycollectiontest(log:Logger);

directvsqueryfetchingtest(log:Logger);

fetchmodesubselecttest(log:Logger);

graphfetchingtest(log:Logger);

batchfetchingtest(log:Logger);

fetchmodeselecttest(log:Logger);

flushordertest(log:Logger);

alwaysflushtest(log:Logger);

autoflushtest(log:Logger);

commitflushtest(log:Logger);

manualflushtest(log:Logger);

checktest();

columndefaulttest();

schemagenerationtest();

spatialtest(GeneratedName:GeometryFactory);

bootstraptest(emf:EntityManagerFactory);

jmxtest(log:Logger);

entityimmutabilitytest(log:Logger);

collectionimmutabilitytest(log:Logger);

optimisticlockingtest(log:Logger);

optimisticlocktypealltest(log:Logger);

optimisticlocktypedirtytest(log:Logger);

explicitlockingtest(log:Logger);

criteriatest();

bytecodeenhancementtest();

persistencecontexttest(log:Logger);

person(id:Long [PK], name:String);

phone(id:Long [PK], number:String, owner:Person #FK to(Person));

moneyconvertertest();

periodstringtest(GeneratedName:Period);

creationtimestamptest();

databasevaluegenerationtest();

inmemoryvaluegenerationtest();

generatedtest();

generatortypetest();

pooledoptimizertest();

jpaquotingtest();

columntransformertest();

formulatest();

joincolumnorformulatest(log:Logger);

autoquotingtest();

clobchararraytest();

typecategorytest();

quotingtest();

nclobtest();

localdatetimewithtemporaltimetest();

implicitbasictypetest();

datewithtemporaltimestamptest();

datewithtemporaldatetest();

enumerationconvertertest();

nationalizedtest();

wheretest();

joinformulatest(log:Logger);

phonetypeenumeratedstringtest();

clobtest();

bitsetusertypetest();

bitsettypetest();

enumerationcustomtypetest();

explicittypetest();

blobtest();

nclobchararraytest();

blobbytearraytest();

explicitcolumnnamingtest();

explicitbasictypetest();

instantliteraltest();

filtertest(log:Logger);

calendarwithtemporaltimestamptest();

clobstringtest();

filterjointabletest(log:Logger);

nclobstringtest();

datewithtemporaltimetest();

integerproperty(id:Long [PK], name:String, value:Integer);

stringproperty(id:Long [PK], name:String, value:String);

propertyholder(id:Long [PK], GeneratedName:Property);

propertyrepository(id:Long [PK], properties:List<Property<?>>);

phonetypeenumeratedordinaltest();

unidirectionalordercolumnlisttest();

unidirectionalcomparatorsortedsettest(log:Logger);

bidirectionalmaptest();

unidirectionalbagtest();

arraytest();

bidirectionalsettest();

unidirectionalorderedbylisttest();

elementcollectionmaptest();

basictypecollectiontest(log:Logger);

bidirectionalordercolumnlisttest();

bidirectionalcomparatorsortedsettest(log:Logger);

unidirectionalsortedsettest(log:Logger);

basictypeordercolumnelementcollectiontest(log:Logger);

embeddabletypeelementcollectiontest();

bidirectionalsortedsettest(log:Logger);

unidirectionalmaptest();

bidirectionalbagtest();

bidirectionalorderbylisttest();

unidirectionalsettest();

basictypeelementcollectiontest(log:Logger);

queuetest(log:Logger);

bidirectionalbagorphanremovaltest();

singletabletest();

discriminatornotnullsingletabletest();

discriminatoroptionsnotnullsingletabletest();

tableperclasstest();

singletablediscriminatorformulatest();

jointabletest();

jointableprimarykeyjoincolumntest();

mappedsuperclasstest();

interceptortest(GeneratedName:Logger);

listenertest();

selectdistincttest(log:Logger);

manytomanybidirectionalwithlinkentitytest(log:Logger);

derivedidentifierprimarykeyjoincolumntest();

manytomanyunidirectionaltest(log:Logger);

bidirectionaltwoonetomanymapsidtest();

manytoonetest();

onetomanyunidirectionaltest();

derivedidentifiertest();

onetomanybidirectionaltest();

notfoundtest();

manytomanybidirectionaltest();

unidirectionalmanytomanyremovetest(log:Logger);

compositeidassociationtest();

onetooneunidirectionaltest();

onetoonebidirectionaltest(log:Logger);

datapoint(id:long [PK], name:String);

datapoint(id:long [PK], name:String);

datapoint(id:long [PK], name:String);

event(id:Long [PK], title:String, GeneratedName:Date);

event(id:Long [PK], title:String, GeneratedName:Date);

event(id:Long [PK], title:String, GeneratedName:Date);

call(id:Long [PK], GeneratedName:Phone #FK to(Phone), timestamp:Date, duration:int);

partner(id:Long [PK], name:String, version:int);

person(id:Long [PK], name:String, nickname:String, address:String, createdon:Date, addresses:Map<AddressType,String>, version:int);

payment(id:Long [PK], amount:BigDecimal, completed:boolean, GeneratedName:Person #FK to(Person));

wiretransferpayment();

image(id:Long [PK], content:byte);

phone(id:Long [PK], GeneratedName:Person #FK to(Person), number:String, type:PhoneType, repairtimestamps:List<Date>);

creditcardpayment();



** PROGRAM TYPE: JPA+Hibernate(Hybrid)