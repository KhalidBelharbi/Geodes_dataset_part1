ClassDiagram.Class>> AlunoModel =>=>=> RelationalSchema.Table>> alunomodel;
ClassDiagram.Class>> areaModel =>=>=> RelationalSchema.Table>> areamodel;
ClassDiagram.Class>> pessoaExternaModel =>=>=> RelationalSchema.Table>> pessoaexternamodel;
ClassDiagram.Class>> pessoaModel =>=>=> RelationalSchema.Table>> pessoamodel;
ClassDiagram.Class>> cidadeModel =>=>=> RelationalSchema.Table>> cidademodel;
ClassDiagram.Class>> estadoModel =>=>=> RelationalSchema.Table>> estadomodel;
ClassDiagram.Class>> cursoModel =>=>=> RelationalSchema.Table>> cursomodel;
ClassDiagram.Class>> servidorModel =>=>=> RelationalSchema.Table>> servidormodel;
ClassDiagram.Class>> campusModel =>=>=> RelationalSchema.Table>> campusmodel;
ClassDiagram.Class>> pessoaInternaModel =>=>=> RelationalSchema.Table>> pessoainternamodel;
ClassDiagram.Class>> EventoModel =>=>=> RelationalSchema.Table>> eventomodel;
ClassDiagram.Attribut>> AlunoModel.idaluno:int =>=>=> RelationalSchema.Column>> alunomodel.idaluno;
ClassDiagram.Attribut>> areaModel.idarea:long =>=>=> RelationalSchema.Column>> areamodel.idarea PRIMARY KEY;
ClassDiagram.Attribut>> areaModel.areanome:String =>=>=> RelationalSchema.Column>> areamodel.areanome;
ClassDiagram.Attribut>> pessoaModel.idpessoa:long =>=>=> RelationalSchema.Column>> pessoamodel.idpessoa PRIMARY KEY;
ClassDiagram.Attribut>> pessoaModel.pessoanome:String =>=>=> RelationalSchema.Column>> pessoamodel.pessoanome;
ClassDiagram.Attribut>> pessoaModel.cpf:long =>=>=> RelationalSchema.Column>> pessoamodel.cpf;
ClassDiagram.Attribut>> pessoaModel.telefone:long =>=>=> RelationalSchema.Column>> pessoamodel.telefone;
ClassDiagram.Attribut>> cidadeModel.idcidade:long =>=>=> RelationalSchema.Column>> cidademodel.idcidade PRIMARY KEY;
ClassDiagram.Attribut>> cidadeModel.cidadenome:String =>=>=> RelationalSchema.Column>> cidademodel.cidadenome;
ClassDiagram.Attribut>> estadoModel.idestado:long =>=>=> RelationalSchema.Column>> estadomodel.idestado PRIMARY KEY;
ClassDiagram.Attribut>> estadoModel.estadonome:String =>=>=> RelationalSchema.Column>> estadomodel.estadonome;
ClassDiagram.Attribut>> estadoModel.estadosigla:String =>=>=> RelationalSchema.Column>> estadomodel.estadosigla;
ClassDiagram.Attribut>> cursoModel.idcurso:int =>=>=> RelationalSchema.Column>> cursomodel.idcurso PRIMARY KEY;
ClassDiagram.Attribut>> cursoModel.nome:String =>=>=> RelationalSchema.Column>> cursomodel.nome;
ClassDiagram.Attribut>> cursoModel.cargahoraria:String =>=>=> RelationalSchema.Column>> cursomodel.cargahoraria;
ClassDiagram.Attribut>> servidorModel.siape:long =>=>=> RelationalSchema.Column>> servidormodel.siape;
ClassDiagram.Attribut>> servidorModel.cargo:String =>=>=> RelationalSchema.Column>> servidormodel.cargo;
ClassDiagram.Attribut>> campusModel.idcampus:long =>=>=> RelationalSchema.Column>> campusmodel.idcampus PRIMARY KEY;
ClassDiagram.Attribut>> campusModel.campusnome:String =>=>=> RelationalSchema.Column>> campusmodel.campusnome;
ClassDiagram.Attribut>> pessoaInternaModel.dataingresso:Date =>=>=> RelationalSchema.Column>> pessoainternamodel.dataingresso;
Many-To-One relationship from ClassDiagram.Class>>pessoaExternaModel  to ClassDiagram.Class>>cidademodel represented by ClassDiagram.Atrribute>>cidade;
Many-To-One relationship from ClassDiagram.Class>>pessoaExternaModel  to ClassDiagram.Class>>estadomodel represented by ClassDiagram.Atrribute>>estado;
Many-To-One relationship from ClassDiagram.Class>>cidadeModel  to ClassDiagram.Class>>estadomodel represented by ClassDiagram.Atrribute>>estado;
Many-To-Many relationship between ClassDiagram.Class>>cursoModel  and ClassDiagram.Class>>list<alunomodel>: curso(idcurso:cursoModel [PK] #FK to cursoModel,idaluno:list<alunomodel> [PK] #FK to list<alunomodel>);
Many-To-One relationship from ClassDiagram.Class>>cursoModel  to ClassDiagram.Class>>servidormodel represented by ClassDiagram.Atrribute>>servidor;
Many-To-One relationship from ClassDiagram.Class>>servidorModel  to ClassDiagram.Class>>areamodel represented by ClassDiagram.Atrribute>>area;
Many-To-One relationship from ClassDiagram.Class>>campusModel  to ClassDiagram.Class>>cidademodel represented by ClassDiagram.Atrribute>>cidade;
Many-To-One relationship from ClassDiagram.Class>>campusModel  to ClassDiagram.Class>>estadomodel represented by ClassDiagram.Atrribute>>estado;
Many-To-Many relationship between ClassDiagram.Class>>campusModel  and ClassDiagram.Class>>list<servidormodel>: campus_servidor(id_campus:campusModel [PK] #FK to campusModel,id_servidor:list<servidormodel> [PK] #FK to list<servidormodel>);
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>pessoaModel  ;
