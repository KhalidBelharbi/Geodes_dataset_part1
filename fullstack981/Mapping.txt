ClassDiagram.Class>> PermanentEmployee =>=>=> RelationalSchema.Table>> permanentemployee;
ClassDiagram.Class>> Movie =>=>=> RelationalSchema.Table>> movie;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> ContractualEmployee =>=>=> RelationalSchema.Table>> contractualemployee;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> StockExchange =>=>=> RelationalSchema.Table>> stockexchange;
ClassDiagram.Class>> Technology =>=>=> RelationalSchema.Table>> technology;
ClassDiagram.Class>> Developer =>=>=> RelationalSchema.Table>> developer;
ClassDiagram.Class>> Actor =>=>=> RelationalSchema.Table>> actor;
ClassDiagram.Class>> PassportDetails =>=>=> RelationalSchema.Table>> passportdetails;
ClassDiagram.Attribut>> PermanentEmployee.salary:double =>=>=> RelationalSchema.Column>> permanentemployee.salary;
ClassDiagram.Attribut>> PermanentEmployee.bonus:float =>=>=> RelationalSchema.Column>> permanentemployee.bonus;
ClassDiagram.Attribut>> Movie.id:int =>=>=> RelationalSchema.Column>> movie.id PRIMARY KEY;
ClassDiagram.Attribut>> Movie.name:String =>=>=> RelationalSchema.Column>> movie.name;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.id:int =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.phone:long =>=>=> RelationalSchema.Column>> user.phone;
ClassDiagram.Attribut>> User.enabled:boolean =>=>=> RelationalSchema.Column>> user.enabled;
ClassDiagram.Attribut>> ContractualEmployee.payperhour:double =>=>=> RelationalSchema.Column>> contractualemployee.payperhour;
ClassDiagram.Attribut>> ContractualEmployee.contractperiod:float =>=>=> RelationalSchema.Column>> contractualemployee.contractperiod;
ClassDiagram.Attribut>> Person.id:int =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Employee.id:int =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> StockExchange.serialversionuid:long =>=>=> RelationalSchema.Column>> stockexchange.serialversionuid;
ClassDiagram.Attribut>> StockExchange.id:int =>=>=> RelationalSchema.Column>> stockexchange.id PRIMARY KEY;
ClassDiagram.Attribut>> StockExchange.name:String =>=>=> RelationalSchema.Column>> stockexchange.name;
ClassDiagram.Attribut>> StockExchange.address:String =>=>=> RelationalSchema.Column>> stockexchange.address;
ClassDiagram.Attribut>> StockExchange.remarks:String =>=>=> RelationalSchema.Column>> stockexchange.remarks;
ClassDiagram.Attribut>> Technology.id:int =>=>=> RelationalSchema.Column>> technology.id PRIMARY KEY;
ClassDiagram.Attribut>> Technology.language:String =>=>=> RelationalSchema.Column>> technology.language;
ClassDiagram.Attribut>> Technology.expertise:String =>=>=> RelationalSchema.Column>> technology.expertise;
ClassDiagram.Attribut>> Developer.id:long =>=>=> RelationalSchema.Column>> developer.id PRIMARY KEY;
ClassDiagram.Attribut>> Developer.name:String =>=>=> RelationalSchema.Column>> developer.name;
ClassDiagram.Attribut>> Actor.id:int =>=>=> RelationalSchema.Column>> actor.id PRIMARY KEY;
ClassDiagram.Attribut>> Actor.actorname:String =>=>=> RelationalSchema.Column>> actor.actorname;
ClassDiagram.Attribut>> PassportDetails.id:int =>=>=> RelationalSchema.Column>> passportdetails.id PRIMARY KEY;
ClassDiagram.Attribut>> PassportDetails.passportnumber:String =>=>=> RelationalSchema.Column>> passportdetails.passportnumber;
Many-To-One relationship from ClassDiagram.Class>>Movie  to ClassDiagram.Class>>Movie represented by ClassDiagram.Atrribute>>//@onetomany(mappedby;
One-To-One relationship between ClassDiagram.Class>>Person  to ClassDiagram.Class>>passportdetails represented by ClassDiagram.Atrribute>>//thisismappingoneojecttootherorwecandothesameoperationsinpassportonetooneforpersonpassport;
set<technology>: developer_set<technology>(developerID:developer [PK] #FK to developer,set<technology>ID:set<technology> [PK] #FK to set<technology>);
One-To-Many relationship from ClassDiagram.Class>>Actor  to ClassDiagram.Class>>Set<Movie>;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Employee  ;
