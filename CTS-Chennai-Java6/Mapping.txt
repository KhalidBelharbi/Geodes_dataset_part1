ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Course =>=>=> RelationalSchema.Table>> course;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Attribut>> Employee.empid:int =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
ClassDiagram.Attribut>> Employee.salary:double =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Department.deptid:int =>=>=> RelationalSchema.Column>> department.deptid PRIMARY KEY;
ClassDiagram.Attribut>> Department.deptname:String =>=>=> RelationalSchema.Column>> department.deptname;
ClassDiagram.Attribut>> Department.loc:String =>=>=> RelationalSchema.Column>> department.loc;
ClassDiagram.Attribut>> Course.courseid:int =>=>=> RelationalSchema.Column>> course.courseid PRIMARY KEY;
ClassDiagram.Attribut>> Course.coursename:String =>=>=> RelationalSchema.Column>> course.coursename;
ClassDiagram.Attribut>> Course.price:double =>=>=> RelationalSchema.Column>> course.price;
ClassDiagram.Attribut>> Student.studentid:int =>=>=> RelationalSchema.Column>> student.studentid PRIMARY KEY;
ClassDiagram.Attribut>> Student.studentname:String =>=>=> RelationalSchema.Column>> student.studentname;
ClassDiagram.Attribut>> Department.deptid:int =>=>=> RelationalSchema.Column>> department.deptid PRIMARY KEY;
ClassDiagram.Attribut>> Department.deptname:String =>=>=> RelationalSchema.Column>> department.deptname;
ClassDiagram.Attribut>> Department.loc:String =>=>=> RelationalSchema.Column>> department.loc;
ClassDiagram.Attribut>> Employee.empid:int =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
ClassDiagram.Attribut>> Employee.salary:double =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Department.deptid:int =>=>=> RelationalSchema.Column>> department.deptid PRIMARY KEY;
ClassDiagram.Attribut>> Department.deptname:String =>=>=> RelationalSchema.Column>> department.deptname;
ClassDiagram.Attribut>> Department.loc:String =>=>=> RelationalSchema.Column>> department.loc;
ClassDiagram.Attribut>> Employee.empid:int =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
ClassDiagram.Attribut>> Employee.salary:double =>=>=> RelationalSchema.Column>> employee.salary;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Department represented by ClassDiagram.Atrribute>>dept;
Many-To-Many relationship between ClassDiagram.Class>>Course  and ClassDiagram.Class>>list<student>: coursedetails(courseid:Course [PK] #FK to Course,studentid:list<student> [PK] #FK to list<student>);
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>List<Employee>;
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Department represented by ClassDiagram.Atrribute>>//@basic(fetch;
