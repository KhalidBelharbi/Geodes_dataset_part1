
ref_profession(professionid:int [PK], original:String, profession:String, code:String, current_id:int);

ref_relation_b(relationid:int [PK], kode:int, nederlands:String, sex:String, engels:String, ids:String, current_id:int);

ref_kg(id_religion:int [PK], denomination:String, standard:String, code:String, source:String, current_id:int);

ref_firstname(firstnameid:int [PK], original:String, name:String, code:String, source:String, current_id:int);

ref_prefix(prefixid:int [PK], original:String, titlenoble:String, titleother:String, prefix:String, code:String, current_id:int);

ref_address(addressid:int [PK], original:String, streetoriginal:String, street:String, quarteroriginal:String, quarter:String, placeoriginal:String, place:String, boatoriginal:String, boat:String, berthoriginal:String, berth:String, institutionoriginal:String, institution:String, landlordoriginal:String, landlord:String, otheroriginal:String, other:String, oldaddressoriginal:String, code:String, source:String, current_id:int);

ref_gb(numbermunicipality:int, namemunicipality:String, cohortnumber:int, keytorp:int [PK], lastnamefather:String, prefixfather:String, firstname1father:String, firstname2father:String, firstname3father:String, dayofbirth:int, monthofbirth:int, yearofbirth:int, sex:String, lastnamemother:String, prefixmother:String, firstname1mother:String, firstname2mother:String, firstname3mother:String, lastname:String, prefixname:String, firstname1:String, firstname2:String, firstname3:String);

ref_relation_c(relationid:int [PK], relation_a:String, relation_b:String, relation_m:String, current_id:int);

ref_housenumber(housenumberid:int [PK], original:String, housenumber:String, code:String, current_id:int);

ref_birthaddress(idnr:int [PK], rolecontextaddress:String, deliverylocation:String);

ref_familyname(lastnameid:int [PK], original:String, name:String, code:String, current_id:int);

ref_housenumberaddition(housenumberadditionid:int [PK], original:String, addition:String, code:String, current_id:int);

ref_location(locationid:int [PK], original:String, locationno:int, ambiguity:int, location:String, municipality:String, province:String, region:String, country:String, standardcode:String, standard_source:String, standard_method:String, current_id:int);

ref_ainb(keytosourceregister:int [PK], municipality:String, typeregister:String, startyearregister:int, startyearregistercorrected:int, endyearregister:int, endyearregistercorrected:int, b1gwbg:String, b1ivbg:String);

ref_municipality(codemunicipality:int [PK], codeprovince:int, coderegion:int, region:String, sequencenumber:int, municipalityname:String);

ref_rp(id:int [PK], keytorp:int, originid:int, project:String, gemnr:int, validday:int, validmonth:int, validyear:int, lastnamerp:String, prefixrp:String, firstnamerp:String, dayofbirthrp:int, monthofbirthrp:int, yearofbirthrp:int, sexrp:String, birthplacerp:String, birthprovincerp:int, birthcohortrp:int, lastnamemother:String, prefixmother:String, firstnamemother:String, lastnamefather:String, prefixfather:String, firstnamefather:String);


** PROGRAM TYPE: JPA+Hibernate(Hybrid)