
pkeigknd(//idnumberidnr:int [PK], //sequencenumberchildvgnrkdp:int, //lastnamechildanmkndp:String, //prefixchildtuskndp:String, //1stfirstnamechildvn1kndp:String, //2ndfirstnamechildvn2kndp:String, //3rdfirstnamechildvn3kndp:String, //dayofbirthchildgdgkndp:int, //monthofbirthchildgmdkndp:int, //yearofbirthchildgjrkndp:int, //dayofbirthchildaftercorrectiongdgkndpcr:int, //monthofbirthchildaftercorrectiongmdkndpcr:int, //yearofbirthchildaftercorrectiongjrkndpcr:int, //birthplacechildgplkndp:String, //birthcountrychildglnkndp:String, //relationshiptopk-holder(son,daughteretc)relkndp:String, //dayofmarriagechildhdgkndp:int, //monthofmarriagechildhmdkndp:int, //yearofmarriagechildhjrkndp:int, //placeofmarriagehplkndp:String, //firstnamepartnerchildvnmptnp:String, //prefixpartnerchildtusptnp:String, //lastnamepartnerchildanmptnp:String, //dayofdeceasechildodgkndp:int, //monthofdeceasechildomdkndp:int, //yearofdeceasechildojrkndp:int, //placedeceasechildoplkndp:String, //dayofdeparturechildadgkndp:int, //monthofdeparturechildamdkndp:int, //yearofdeparturechildajrkndp:int, //destinationdepartingchildaplkndp:String, //remarkaantek:String, //ordernumberopdrnr:String, //datedatum:String, //initialsinit:String, //versionversie:String, //originalresearchonderzko:String, //originalordernumberopdrnro:String, //originaldatedatumo:String, //originalinitialsinito:String, //originalversionversieo:String, //ordernumber2ordernumberi:String);

b32_st(contentofdynamicdata:int, civilstatusflag:int, civillocalityid:int, civillocalitystandardized:String, civillocalityflag:int);

b36_st(originid:int, originstandardized:String, originflag:int, origingroup:int, address:String, register:String, census:String);

pkadres(//idnumberidnr:int [PK], //sequencenumberaddressvgnradp:int, //dayaddressdgadrp:int, //monthaddressmdadrp:int, //yearaddressjradrp:int, //renumbering(vernummering)vernum:String, //address(street)stradrp:String, //place(municipality)pladrp:String, //land(country)lndadrp:String, //ordernumberopdrnr:String, //datedatum:String, //initialsinit:String, //versionversie:String, //originalresearchonderzko:String, //originalordernumberopdrnro:String, //originaldatedatumo:String, //originalinitialsinito:String, //originalversionversieo:String, //ordernumber2ordernumberi:String);

pkbrp(//idnumberidnr:int [PK], //sequencenumberfordifferentprofessionofpersonvgnrbrp:int, //positioninprofessionherarchybrpposp:String, //professionberoepp:String, //professioniscrosssedover(doorgehaald)dhbrppp:String, //ordernumberopdrnr:String, //datedatum:String, //initialsinit:String, //versionversie:String, //originalresearchonderzko:String, //originalordernumberopdrnro:String, //originaldatedatumo:String, //originalinitialsinito:String, //originalversionversieo:String, //ordernumber2ordernumberi:String);

pkbyz(//idnumberidnr:int [PK], //sequencenumberbyznr:int, //detailsbyz:String, //screenidentifierindatainputapplicationscherm:String, //ordernumberopdrnr:String, //datedatum:String, //initialsinit:String, //versionversie:String, //originalresearchonderzko:String, //originalordernumberopdrnro:String, //originaldatedatumo:String, //originalinitialsinito:String, //originalversionversieo:String, //ordernumber2ordernumberi:String);

b2_st(/***thisclasshandlestheattributesofastandardizedperson(name,dateofbirthetc.)*objectsofthisclassareinitializedfromapersonobject*/keytosourceregister:int [PK], entrydatehead:String [PK], keytorp:int [PK], keytopersons:int [PK], natureofperson:int, dateofregistration:String, dateofregistrationflag:int, personid:int, personidflag:int, personid_fa:int, personid_fa_fg:int, personid_mo:int, personid_mo_fg:int, startdate:String, startflag:int, startest:int, enddate:String, endflag:int, endest:int, familyname:String, prefixlastname:String, titlenoble:String, titleelse:String, familynameerpreted:int, firstname:String, firstnameflag:int, sex:String, dateofbirth:String, dateofbirthflag:int, placeofbirthid:int, placeofbirthstandardized:String, placeofbirthflag:int, dateofdecease:String, dateofdeceaseflag:int, placeofdeceaseid:int, placeofdeceasestandardized:String, placeofdeceaseflag:int, nationality:String, legalplaceoflivingid:int, legalplaceoflivingstandardized:String, legalplaceoflivingflag:int, legalplaceoflivingcode:String, remarks:String, addition:String, versionlasttimeofdataentry:String, researchcodeoriginal:String, versionoriginaldataentry:String, date0:String);

b6_st(keytosourceregister:int [PK], dateentryheadofhousehold:String [PK], keytorp:int [PK], keytoregistrationpersons:int [PK], sequencenumbertoaddresses:int, dateofaddress:String, dateofaddressflag:int, startdate:String, startflag:int, startest:int, enddate:String, endflag:int, endest:int, municipality:String, municipalitynumber:int, zipcode:String, renumbering:int, addressid:int, street:String, quarter:String, place:String, boat:String, berth:String, institution:String, landlord:String, other:String, rest:String, addressflag:int, number:String, addition:String, versionlasttimeofdataentry:String, researchcodeoriginal:String, versionoriginaldataentry:String, date0:String);

p8(//idnumberidnr:int [PK], //idnrpartneridnrp:int, //sequencenumberp8tpnr:int, //dayaddressdgadrp:int, //monthaddressmdadrp:int, //yearaddressjradrp:int, //place(municipality)pladrp:String, //dayoffirstaddressp8oppd:int, //monthoffirstaddressp8oppm:int, //yearoffirstaddressp8oppj:int, //typeofaddressp8opwf:String, //nameoflocalityp8opwl:String, //nameofthestreetp8opws:String, //housenumberp8opwh:String, //additioncharacter(s)tohousenumberp8opwr:String, //additionalnumbertohousenumberp8opwt:String, //postalcodep8opwp:String, //descriptionoflocationp8opwb:String, //countryfromwhichpl-holderoriginatesfromp8opil:String, //yearofregistrationofarrivalfromforeigncountryp8opij:int, //monthofregistrationofarrivalfromforeigncountryp8opim:int, //dayofregistrationofarrivalfromforeigncountryp8opid:int, //dataunderresearchp8opag:String, //yearof�dataunderresearch�p8opzj:int, //monthof�dataunderresearch�p8opzm:int, //dayof�dataunderresearch�p8opzd:int, //�indicatieonjuist�notclearwhatthisvariablemeans(onlysporadicallycontent)p8opio:String, //ordernumberopdrnr:String, //datedatum:String, //initialsinit:String, //versionversie:String, //originalresearchonderzko:String, //originalordernumberopdrnro:String, //originaldatedatumo:String, //originalinitialsinito:String, //originalversionversieo:String, //ordernumber2ordernumberi:String);

b33_st(religionid:int, religionstandardized:String, religionflag:int);

b313_st(contentofdynamicdata:int);

b37_st(destinationid:int, destinationstandardized:String, destinationflag:int, destinationgroup:int, address:String, register:String, census:String);

message(keytorp:int, keytosourceregister:int, dayentryhead:int, monthentryhead:int, yearentryhead:int, dayentryrp:int, monthentryrp:int, yearentryrp:int, keytoregistrationpersons:int, natureofperson:int, errornumber:int [PK], errortype:String, errortext:String, messageskeletons:List<MessageSkeleton>, messages:List<Message>);

b4_st(keytosourceregister:int [PK], entrydatehead:String [PK], keytorp:int [PK], //@column(name:int, pkholder:String, startdate:String, startflag:int, enddate:String, endflag:int, //@column(name:String, versionlasttimeofdataentry:String, researchcodeoriginal:String, versionoriginaldataentry:String, date0:String);

pkhuw(//idnumberidnr:int [PK], //sequencenumberspousevnrhuwp:int, //lastnamespouseanmhuwp:String, //prefixspousetushuwp:String, //1stfirstnamespousevn1huwp:String, //2ndfirstnamespousevn2huwp:String, //3rdfirstnamespousevn3huwp:String, //professionspousebrphuwp:String, //dayofbirthspousegdghuwp:int, //monthofbirthspousegmdhuwp:int, //yearofbirthspousegjrhuwp:int, //dayofbirthspouseaftercorrectiongdghuwpcr:int, //monthofbirthspouseaftercorrectiongmdhuwpcr:int, //yearofbirthspouseaftercorrectiongjrhuwpcr:int, //birthplacespousegplhuwp:String, //dayofmarriagespousehdghuwp:int, //monthofmarriagespousehmdhuwp:int, //yearofmarriagespousehjrhuwp:int, //placeofmarriagehplhuwp:String, //dayofterminationmarriageodghuwp:int, //monthofterminationmarriageomdhuwp:int, //yearofterminationmarriageojrhuwp:int, //reasonterminationmarriage(dateofmutation:death/divorce/otherordhuwp:int, tobehandledasdivorcecode12on[b3kode]	*///placedeceasespouseoplhuwp:String, //dayofdeparturespouseadghuwp:int, //monthofdeparturespouseamdhuwp:int, //yearofdeparturespouseajrhuwp:int, //destinationdepartingspouseaplhuwp:String, //kindofmarriage(geregistreerdpartnerschapetc.)srthuwp:String, //registrationdayspouseddghuwp:int, //registrationmonthspousedmdhuwp:int, //registrationyearspousedjrhuwp:int, //daygbaentryopdghuwp:int, //monthgbaentryopmdhuwp:int, //yeargbaentryopjrhuwp:int, //ordernumberopdrnr:String, //datedatum:String, //initialsinit:String, //versionversie:String, //originalresearchonderzko:String, //originalordernumberopdrnro:String, //originaldatedatumo:String, //originalinitialsinito:String, //originalversionversieo:String, //ordernumber2ordernumberi:String);

b35_st(occupationid:int, occupationstandardized:String, occupationflag:int);

pkknd(//idnumberidnr:int [PK], //idnrpartneridnrp:int, //numberorcodeofthebirthcertificateonwhichthepersonalcardhasbeenbasedgaktnrp:String, //typeofpkpktype:int, //dayofendofthepk,whentheobservationofthepk-holderdoesnotendwithhisorherdeatheindagpk:int, //montheinmndpk:int, //yeareinjarpk:int, //dayofthecheckofthepersonalcardwiththeinformationonthepkandchecksignofthecivilservant.ctrdgp:int, //monthofthecheckofthepersonalcardwiththeinformationonthepkandchecksignofthecivilservant.ctrmdp:int, //yearofthecheckofthepersonalcardwiththeinformationonthepkandchecksignofthecivilservant.ctrjrp:int, //checksignofthecivilservant(j/n)ctrparp:String, //structureofthefamily,indicatedbywhoistheheadofthefamilygznvrmp:String, //informationaboutthepk-holder//lastnamepk-holderanmperp:String, //prefixlastnamepk-holdertusperp:String, //firstfirstnameofpk-holdervnm1perp:String, //secondfirstnameofpk-holdervnm2perp:String, //third(andfourth,fifthetc.)firstnameofpk-holdervnm3perp:String, //birthdayofpk-holdergdgperp:int, //birthmonthofpk-holdergmdperp:int, //birthyearofpk-holdergjrperp:int, //birthdayofpk-holderaftercorrectiongdgperpcr:int, //birthmonthofpk-holderaftercorrectiongmdperpcr:int, //birthyearofpk-holderaftercorrectiongjrperpcr:int, //birthplaceofpk-holdergplperp:String, //nationalityofpk-holdernatperp:String, //religionofpk-holdergdsperp:String, //genderofpk-holdergslperp:String, //informationaboutthefatherofthepk-holder//lastnamefatherpk-holderanmvdrp:String, //prefixlastnamefatherpk-holdertusvdrp:String, //firstfirstnamefatherpk-holdervnm1vdrp:String, //secondfirstnamefatherpk-holdervnm2vdrp:String, //third(andfourth,fifthetc.)firstnamefatherofpk-holdervnm3vdrp:String, //birthdayoffatherpk-holdergdgvdrp:int, //birthmonthoffatherpk-holdergmdvdrp:int, //birthyearoffatherpk-holdergjrvdrp:int, //birthdayoffatherpk-holderaftercorrectiongdgvdrpcr:int, //birthmonthoffatherpk-holderaftercorrectiongmdvdrpcr:int, //birthyearoffatherpk-holderaftercorrectiongjrvdrpcr:int, //birthplaceoffatherpk-holdergplvdrp:String, //informationaboutthemotherofthepk-holder//lastnamemotherpk-holderanmmdrp:String, //prefixlastnamemotherpk-holdertusmdrp:String, //firstfirstnamemotherpk-holdervnm1mdrp:String, //secondfirstnamemotherpk-holdervnm2mdrp:String, //third(andfourth,fifthetc.)firstnamemotherofpk-holdervnm3mdrp:String, //birthdayofmotherpk-holdergdgmdrp:int, //birthmonthofmotherpk-holdergmdmdrp:int, //birthyearofmotherpk-holdergjrmdrp:int, //birthdayofmotherpk-holderaftercorrectiongdgmdrpcr:int, //birthmonthofmotherpk-holderaftercorrectiongmdmdrpcr:int, //birthyearofmotherpk-holderaftercorrectiongjrmdrpcr:int, //birthplaceofmotherpk-holdergplmdrp:String, //informationaboutthepk-holder//deceasedayofpk-holderodgperp:int, //deceasemonthofpk-holderomdperp:int, //deceaseyearofpk-holderojrperp:int, //deceaseplaceofpk-holderoplperp:String, //codeofdeathcertificateofpk-holderoakperp:String, //causeofdeathofthepk-holderodoperp:String, //fieldstorecorddistinctionsbetweendataoftheoriginalbirthcertificateandthepersonalcardnotusableandnotnecessaryinthefurtherprocessgegperp:String, //fieldstorecorddistinctionsbetweendataoftheoriginalbirthcertificateandthepersonalcardnotusableandnotnecessaryinthefurtherprocessgegvdrp:String, //fieldstorecorddistinctionsbetweendataoftheoriginalbirthcertificateandthepersonalcardnotusableandnotnecessaryinthefurtherprocessgegmdrp:String, //indicatoriftherearerecordsinthefilepkbyzornotnotusableanymoreproblmp:String, //dayofthe"persoonsbewijs"(ausweis),dateshouldbebetween01-01-1941and5-05-1945.psbdgp:int, //monthofthe"persoonsbewijs"(ausweis),dateshouldbebetween01-01-1941and5-05-1945.psbmdp:int, //yearofthe"persoonsbewijs"(ausweis),dateshouldbebetween01-01-1941and5-05-1945.psbjrp:int, //numberofthe"persoonsbewijs"(ausweis),dateshouldbebetween01-01-1941and5-05-1945.psbnrp:String, //ordernumberopdrnr:String, //datedatum:String, //initialsinit:String, //versionversie:String, //originalresearchonderzko:String, //originalordernumberopdrnro:String, //originaldatedatumo:String, //originalinitialsinito:String, //originalversionversieo:String, //ordernumber2ordernumberi:String);

messageskeleton(errornumber:String [PK], errortype:String, errortext:String);

b34_st(contentofdynamicdata:int);

p7(//idnumberidnr:int [PK], //idnrpartneridnrp:int, //originalidentifierforthepersonallistfromcbgitself(onlykeptforchecksonconsistency)p7idbg:int, //placeofdeathonpl-lists(municipalityandcountrydistinguished)p7opog:String, //placeofdeathonpl-lists(municipalityandcountrydistinguished)p7opol:String, //municipalityofcertificaterarelyusedonlyincaseofforeignplacesofdeathp7opor:String, //administrativecodeofthedeathcertificateorotherindicationcomparablewithfieldoakperp(tobechecked)onlyincombinationwithp7oporp7opob:String, //indicatieonjuistnotclearwhatthisvariablemeans(onlysporadicallycontent)p7opio:String, //municipalitywherethepersonallistwasputupp7oppg:String, //affirmationofthepersonalcardwasconvertedp7oppc:String, //ordernumberopdrnr:String, //datedatum:String, //initialsinit:String, //versionversie:String, //originalresearchonderzko:String, //originalordernumberopdrnro:String, //originaldatedatumo:String, //originalinitialsinito:String, //originalversionversieo:String, //ordernumber2ordernumberi:String);


** PROGRAM TYPE: JPA+Hibernate(Hybrid)