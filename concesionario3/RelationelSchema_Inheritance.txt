jaccintegratortest();

db2390dialecttestcase();

item(itemnumber:int [PK]);

getandisvariantgettertest(ssr:StandardServiceRegistry);

getandisvariantgetterwithtransientannotationtest();

order(ordernumber:int [PK], name:String);

annotationmappingjoinclasstest();

nativequerywithparenthesestest();

inclauseparameterpaddingtest(connectionprovider:PreparedStatementSpyConnectionProvider);

searchedcaseexpressiontest();

aliaswithcriteriontest();

maxinexpressionparameterpaddingtest(connectionprovider:PreparedStatementSpyConnectionProvider, max_count:int);

testlazypropertyonpreupdate(entity:EntityWithLazyProperty);

colony(id:Long [PK]);

hoarder(id:Long [PK], name:String, favorite:Item #FK to(Item));

empire(id:Long [PK]);

item(id:Long [PK], version:int, name:String, GeneratedName:Category #FK to(Category));

race(id:Integer [PK], name:String);

category(id:Long [PK], name:String, example:Item #FK to(Item), version:int);

mail(id:Long [PK], from:String);

pet(id:int [PK], name:String, weight:double);

decorate(id:int [PK], name:String, GeneratedName:Pet);

competitor(id:Integer [PK], name:String);

b1(id:int [PK], GeneratedName:A #FK to(A));

c1(id:int [PK], GeneratedName:B1 #FK to(B1));

b4(id:int [PK], GeneratedName:A #FK to(A));

c2(id:int [PK], GeneratedName:B2 #FK to(B2));

a(id:int [PK], name:String);

b2(id:int [PK], GeneratedName:A #FK to(A));

b3(id:int [PK], GeneratedName:A #FK to(A));

dog(numbones:int);

cat(lives:int);

dress(name:String [PK]);

competition(id:Integer [PK]);

competition_competitor(Competition_ID:Competition [PK] #FK to Competition,Pet_ID:Pet [PK] #FK to Pet);

music(id:Integer [PK], name:String, version:Integer);

manager();

entitygraphwithfetchannotationtest(connectionprovider:PreparedStatementSpyConnectionProvider);

course(id:int [PK], name:String);

foo2(id:long [PK], GeneratedName:Foo #FK to(Foo));

foo();

bar(id:long [PK]);

basicentitygraphtests();

entitygraphusingfetchgraphtest();

entitygraphtest();

entitygraphusingfetchgraphforlazytest();

entitygraphloadplanbuildertest();





person(id:Long [PK]);

employee(id:long [PK]);

employee_A(employeeID:employee [PK] #FK to employee,AID:A [PK] #FK to A);employee_Employee(employeeID:employee [PK] #FK to employee,EmployeeID:Employee [PK] #FK to Employee);

company(id:long [PK], GeneratedName:Location #FK to(A), markets:Set<Market>, phonenumbers:Set<String>);

student(id:int [PK], name:String);

student_courses(id:Student [PK] #FK to Student,id:Course [PK] #FK to Course);

location(id:long [PK], address:String, zip:int);

loadgraphfindbyidtest();

schemascriptfilegenerationtest(createschema:File, dropschema:File, GeneratedName:EntityManagerFactoryBuilder);

schemascriptfilegenerationfailuretest(GeneratedName:Writer, GeneratedName:EntityManagerFactoryBuilder);

schemadatabasefilegenerationfailuretest(GeneratedName:Connection, GeneratedName:EntityManagerFactoryBuilder);

document(id:Long [PK], name:String);

schemacreatedroputf8withouthbm2ddlcharsetnametest(createschema:File, dropschema:File, GeneratedName:EntityManagerFactoryBuilder);

item(name:String [PK], descr:String);

employee(id:Long [PK], name:String, /*@embedded@attributeoverrides({@attributeoverride(name:Address, /*@embedded@attributeoverrides({@attributeoverride(name:Address);

article(id:Integer [PK], name:String, next:Article);

article(id:Integer [PK], name:String, next:Article);

employee(id:Long [PK], name:String, /*@embedded@attributeoverrides({@attributeoverride(name:Address, /*@embedded@attributeoverrides({@attributeoverride(name:Address);

cupholder(id:Integer [PK], radius:BigDecimal, title:String);



basicsimplecasetest();

superclasscollectiontest();

criterialiteralstest(connectionprovider:PreparedStatementSpyConnectionProvider);

person(id:long [PK], GeneratedName:Subject #FK to(Subject));

subject(id:long [PK], name:String);

criterialiteralinselectexpressiontest();

store(id:Integer [PK], name:String, address:String);

book(id:Integer [PK]);

entitysuperclasscollectiontest();

multitypedbasicattributesentity(id:Long [PK], somes:byte, somewrappeds:Byte);

mapjointestwithembeddable();

wall(id:Long [PK], width:long, height:long, color:String, left:Wall #FK to(A), right:Wall #FK to(A));

payment(id:Long [PK], amount:BigDecimal, GeneratedName:Date);

concattest();

treatlistjointest();

limitexpressiontest();

groupbyselectcasetest();

site(serialversionuid:long, id:Long [PK], name:String, GeneratedName:Customer);



customer(id:Long [PK], name:String);

orderline(id:OrderLineId, GeneratedName:Product, purchase_org_id:Order #FK to(Order));

purchaseorg(serialversionuid:long, id:Long [PK], name:String, GeneratedName:Customer);

purchase_facility(purchase_org_id:PurchaseOrg [PK] #FK to PurchaseOrg,facility_id:A [PK] #FK to A);

facility(serialversionuid:long, id:Long [PK], name:String, GeneratedName:Site, GeneratedName:Customer);

order(id:OrderId, GeneratedName:PurchaseOrg);

treatkeywordtest();

tool(cost:Double);

widget(code:String [PK], division:String [PK], cost:Double);

abstractcriterialiteralhandlingmodetest(connectionprovider:PreparedStatementSpyConnectionProvider);

client(id:int [PK], GeneratedName:Name);

mappedsuperclasscomponentwithcollectiontest(GeneratedName:Projects);

componentinwhereclausetest(GeneratedName:Projects);

entitysuperclasscomponentwithcollectiontest(GeneratedName:Projects);

alias(id:Long [PK], GeneratedName:Name, source:String);

manytoonetype(id:Long [PK], value:String);

human();

elephant();

user(id:Long [PK], roles:Set<Role>);

treatjointest();

lineitem(id:String [PK], quantity:int, GeneratedName:Order, GeneratedName:Product);

phone(id:String [PK], area:String, number:String, GeneratedName:Address, types:Set<Type>);

address(id:String [PK], street:String, city:String, state:String, zip:String);

mapentity(key:String [PK], localized:Map<String,MapEntityLocal>);

product(id:String [PK], name:String, price:double, rating:float, quantity:int, partnumber:long, some:BigInteger, some:BigDecimal, warehouse:String, GeneratedName:ShelfLife);

entity2(id:long [PK], GeneratedName:Entity3 #FK to(Entity), value:String);

somemappedsuperclasssubclass(thedata:String);

entity3(id:long [PK], value:String);

mixedidandidclasshandling();

article(id:Integer [PK]);

person(firstname:String, lastname:String);

thingwithquantity(quantity:int);

versionedentity(id:String [PK], name:String, version:int);

thing(id:String [PK], name:String);

spouse(id:String [PK], first:String, maiden:String, last:String, snumber:String, GeneratedName:Info, GeneratedName:Customer);

entity1(id:long [PK], GeneratedName:Entity2 #FK to(Entity), value:String);

alias(id:String [PK], alias:String, noop:Customer);

fks_anoop_cnoop(fk2_for_alias_table:Alias [PK] #FK to Alias,fk8_for_customer_table:Customer [PK] #FK to Customer);fks_alias_customer(fk_for_alias_table:Alias [PK] #FK to Alias,fk_for_customer_table:Customer [PK] #FK to Customer);

creditcard(id:String [PK], number:String, type:String, expires:String, approved:boolean, balance:double, GeneratedName:Order, GeneratedName:Customer);

customer(id:String [PK], name:String, age:Integer, home:Address #FK to(A), work:Address #FK to(A), GeneratedName:Country, GeneratedName:Spouse);

order(id:String [PK], totalprice:double, GeneratedName:Customer, GeneratedName:CreditCard, sample:LineItem, domen:char, number:byte);

info(id:String [PK], street:String, city:String, state:String, zip:String, GeneratedName:Spouse);

translation(id:Integer [PK], title:String, text:String);

cable(id:Integer [PK], name:String);

bell(id:Integer [PK]);

accountgroup(id:Long [PK]);

account(id:Long [PK], name:String, regioncode:String);

pasta(id:Integer [PK], type:String);

distributor(id:Integer [PK], name:String);

temporaltypetest();

transactionrollbacktest();

book(id:Integer [PK], name:String, version:Integer);

jtareusingentitytransactiontest();

closeentitymanagerwithactivetransactiontest();

entitymanagerdeserializationtest();

fruit(id:Long [PK]);

strawberry(size:Long);

querywithinparamlistandnamedentitygraphtest();

oracleconstructorresultnativequerytest();

contractor(company:String);

querywithliteralsinselectexpressiontest();

typedvalueparameterstest(docid:int);

namedquerytest(game_titles:String);

queryparametersvalidationtest();

scalarresultnativequerytest();

datetimeparametertest(nowcal:GregorianCalendar, now:Date);

tuplequerytest();

namedquerycommenttest(connectionprovider:PreparedStatementSpyConnectionProvider, game_titles:String);

nativequeryordinalparameterstest(game_titles:String);

tuplenativequerytest();

employee(id:Long [PK], name:String, salary:Double);

queryparameterswithdisabledvalidationtest();

limitexpressiontest();

constructorresultnativequerytest();

basiccditest(count:int);

event(id:Long [PK], name:String);

countrychecker();

rythm(id:Integer [PK]);

translation(id:Integer [PK], into:String);

communicationsystem(communication:int, isfirst:boolean, islast:boolean);

television(id:Integer [PK], control:RemoteControl #FK to(RemoteControl), name:String);

plant(id:String [PK], name:String);

employee(title:String, salary:BigDecimal, manager:Employee #FK to(Employee));

videosystem(transientcounter:int);

remotecontrol(id:Integer [PK], creation:Date);

customer(salesperson:Employee #FK to(Employee), comments:String);

person(id:long [PK], name:String, address:String, zip:String, country:String, sex:char);

item(name:String [PK], descr:String, intval:Integer);

removeorderingtest();

containstest();

reptile(temperature:float);

animal(name:String, id:Long [PK]);

workload(id:Integer [PK], name:String, load:Integer);

mammal(mamalnbr:int);

datapoint(id:long [PK]);

twopersistenceunits2lcdisabledenabled();

unlisteddatapoint(id:long [PK]);

cat(log:Logger, //usedforassertionsids:List, //usedforassertionspostversion:int, id:Integer [PK], name:String, ofbirth:Date, length:long, lastup:Date, manualversion:int);

unidirectionalonetomanyuniqueconstraintordercolumntest();

columnwithexplicitreferencetoprimarytabletest();

phone(id:Integer [PK], brandname:String, price:float);

defaultcascadetest();

unidirectionalonetomanyindexcolumntest();

unidirectionalonetomanyordercolumntest();

testconnectionpool(connection_pool_size:int);

soldier2(id:Integer [PK], name:String, troop:Troop2 #FK to(Troop));

extractiondocumentinfo(id:Long [PK], lastmodified:Date, GeneratedName:Conference);

multilevelcascadecollectionidclasstest(log:Logger);

multilevelcascadecollectionembeddabletest(log:Logger);

middle(id:Long [PK], GeneratedName:Top #FK to(Top), GeneratedName:Bottom #FK to(Bottom));

bottom(id:Long [PK], GeneratedName:Middle #FK to(Middle));

top(id:Long [PK]);

mergewithtransientnoncascadedassociationtest();

troop(id:Integer [PK], name:String);

teacher(id:Long [PK], name:String, favorite:Student #FK to(Student));

extractiondocument(id:Long [PK], body:byte, documentinfo:ExtractionDocumentInfo #FK to(A));

troop2(/*fails:*/id:Integer [PK], name:String);

student(id:Long [PK], name:String, primary:Teacher #FK to(A), favorite:Teacher #FK to(A));

soldier(id:Integer [PK], name:String, GeneratedName:Troop);

mergetest();

detachandcontainstest();

author(id:Long [PK]);

song(id:Long [PK], GeneratedName:Author #FK to(A));

parent(id:Integer [PK]);

conference(id:Long [PK], GeneratedName:Date, extractiondocument:ExtractionDocumentInfo #FK to(A));

son(id:Integer [PK], GeneratedName:Parent #FK to(A));

grandson(id:Integer [PK], parent:Son #FK to(Son));

feline(color:String);

dog(name:String);

cat(nickname:String);

withgenericcollection(id:String [PK], d:double, parent:WithGenericCollection<? extends Object> #FK to(D));

child(id:Integer [PK], name:String);

giant(height:long);

joinedmanytooneowner(id:Long [PK], GeneratedName:House);

employeewithrawtype(id:String [PK], name:String);

parent(id:Integer [PK], name:String, siblings:Relatives<Child>);

garden(id:Long [PK], name:String);

house(GeneratedName:Key, GeneratedName:Address, rooms:Set<Room>, roomsbyname:Map<String,Room>, roomsbysize:List<Room>);

flower(id:Long [PK], name:String);

fridge(id:Long [PK], brand:String, temperature:int);

person(firstname:String [PK], lastname:String [PK], age:Short);

fooditem(id:Long [PK], name:String, version:Long);

deskwithrawtype(id:String [PK], name:String);

desk_empl(desk_fk:DeskWithRawType [PK] #FK to DeskWithRawType,empl_fk:E [PK] #FK to E);

simpleperson(ssn:String [PK]);

simplemedicalhistory(lastup:Date, patient:SimplePerson [PK] #FK to(Person));

product1(overridenname:String);

product2();

company(id:Long [PK]);

product(description:String);

productattribute(owner:String [PK]);

product(id:Long [PK]);

lockable(id:Integer [PK], version:Integer, name:String);

unversionedlock(id:Integer [PK], name:String);

querylockingtest();

lock(id:Integer [PK], version:Integer, name:String);

person(id:Long [PK], parent:Person #FK to(Person));

caipirinha(id:Integer [PK], name:String);

money(id:Integer [PK]);

applicationserver(id:Integer [PK], name:String, GeneratedName:Version);

scooter(model:String [PK], speed:Long);

bug(id:Long [PK], subject:String, comment:String);

washer();

morito(id:Integer [PK], power:String);

bug(id:Long [PK], subject:String, comment:String);

applicationserver(id:Integer [PK], name:String, GeneratedName:Version);

money(id:Integer [PK]);

money1(id:Integer [PK]);

applicationserver1(id:Integer [PK], name:String, version:Version1);

carpet(id:Integer [PK], country:String);

oven(id:Long [PK], GeneratedName:Kitchen #FK to(E));

kitchen(id:Long [PK], GeneratedName:Oven #FK to(E));

incident(id:String [PK], GeneratedName:IncidentStatus #FK to(A));

incidentstatus(id:String [PK], GeneratedName:Incident #FK to(D));

testentity(id:long [PK]);

entitymanagerclosedtest();

wallet(serial:String [PK], model:String, marketentrance:Date, brand:String);

defaultinitialvaluetablegeneratorconfiguredtest();

assignedinitialvaluetablegeneratorconfiguredtest();

hsqlstoreproceduretest(GeneratedName:EntityManagerFactory);

h2storeproceduretest();

storeprocedurerefcursoroutparameterbynametest(GeneratedName:EntityManagerFactory);

storedprocedurenullparameterbynametest(GeneratedName:EntityManagerFactory);

storeprocedureoutparameterbypositiontest(GeneratedName:EntityManagerFactory);

user(id:int [PK], name:String);

datetimeparametertest(entitymanagerfactory:HibernateEntityManagerFactory, nowcal:GregorianCalendar, now:Date);

storedprocedureresultsetmappingtest();

storeprocedurerefcursoroutparameterbypositiontest(GeneratedName:EntityManagerFactory);

storeprocedureoutparameterbynametest(GeneratedName:EntityManagerFactory);

instrument(id:int [PK], name:String, GeneratedName:Type);

musician(id:Integer [PK], name:String, favourite:Music);

music(id:Integer [PK], version:Integer, name:String);

nestedlegacyentity(primitivepk1:LegacyEntity [PK] #FK to(A), id:ModernEntity [PK] #FK to(Entity));

legacyentity(primitivepk1:int [PK], primitivepk2:int [PK], foo:String);

modernentity(id:int [PK], foo:int);

product(id:Long [PK], name:String);

feature(id:Long [PK], GeneratedName:Product #FK to(Product), name:String);

deletesharedonetomanyorphanstest(1alongwiththeinitializationoftheitem#higheritemrelations	collectioncausestheissue	*/batch_fetch_size:String);

a(id:Integer [PK], GeneratedName:B);

x(id:Long [PK], GeneratedName:Tranchenmodell #FK to(A));

y(id:Long [PK], GeneratedName:Tranche #FK to(A));

preisregelung(id:Long [PK], GeneratedName:Tranchenmodell #FK to(A));

tranche(id:Long [PK], GeneratedName:Tranchenmodell #FK to(A), GeneratedName:Y #FK to(Y));

tranchenmodell(id:Long [PK], GeneratedName:Preisregelung #FK to(E), GeneratedName:X #FK to(X));



entitywithcompositeid(id:CompositeId, description:String);

kitten(id:Integer [PK], name:String);

order(id:int [PK], total:int);

nocacheableannotationentity(id:Long [PK], name:String);

explicitlynoncacheableentity(id:Long [PK], name:String);

explicitlycacheableentity(id:Long [PK], name:String);

simpleentity(id:Long [PK], name:String);

imagereader(id:long [PK], image:Blob, text:Clob);

child(id:Integer [PK], daddy:Parent #FK to(A));

parent(id:Integer [PK]);

article(id:Integer [PK], GeneratedName:Author #FK to(A));

umbrella(id:PK, size:int);

book(id:Long [PK], name:String);

author(id:Integer [PK]);

sickness(begintime:Date, type:String [PK], classification:String [PK]);

customer(id:Long [PK], version:long);

order(id:Long [PK], GeneratedName:Customer #FK to(Customer), version:long);

annotateddetail(id:Integer [PK], name:String, //becauseotherwiseschemaexportwouldnotknowaboutit...domain:String);

annotatedmaster(id:Integer [PK], name:String, detail_domain:AnnotatedDetail #FK to(A));

invoice(id:Long [PK]);

customer(id:Long [PK], name:String);

loadplanbuildertest();

basicwalkingtest();

simpleresultsetprocessortest();

entitywithnonlazycollectionresultsetprocessortest();

encapsulatedcompositeattributeresultsetprocessortest();

user(id:Integer [PK]);

contractor(//illustratestheproblematicsituationdescribedinhhh-8330reportsto:Department #FK to(A));

employee(//illustratestheproblematicsituationdescribedinhhh-8980belongsto:Department #FK to(A));

department(id:Integer [PK]);

entityassociationresultsetprocessortest();

encapsulatedcompositeidresultsetprocessortest();

entitywithnonlazyonetomanysetresultsetprocessortest();

entitywithnonlazyonetomanylistresultsetprocessortest();

onetoonelazynonoptionalorphanremovaltest();

tranchenmodell(id:Long [PK], GeneratedName:Preisregelung #FK to(E), GeneratedName:X #FK to(X));

y(id:Long [PK], GeneratedName:Tranche #FK to(A));

tranche(id:Long [PK], GeneratedName:Tranchenmodell #FK to(A), GeneratedName:Y #FK to(Y));

preisregelung(id:Long [PK], GeneratedName:Tranchenmodell #FK to(A));

x(id:Long [PK], GeneratedName:Tranchenmodell #FK to(A));

preisregelung(id:Long [PK], GeneratedName:Tranchenmodell #FK to(A));

tranchenmodell(id:Long [PK], GeneratedName:Preisregelung #FK to(E));

tranche(id:Long [PK], GeneratedName:Tranchenmodell #FK to(A));

onetooneeagerorphanremovaltest();

onetooneproxyorphanremovaltest();

onetooneeagernonoptionalorphanremovaltest();

onetoonelazyorphanremovaltest();

product(id:Long [PK], name:String);

feature(id:Long [PK], GeneratedName:Product #FK to(Product), name:String);

thing(id:Long [PK], name:String, mutableproperty:Date);

batchinginheritancedeletetest();

batchingbatchfailuretest();

nonbatchingbatchfailuretest();

batchoptimisticlockingtest(GeneratedName:ExecutorService);



inheritingentity(somevalue:String);

polygon(id:Integer [PK], description:String);

quadrilateral(anglea:Double, angleb:Double, anglec:Double);

mappedsuperclassextendsentitytest();

tableperclassinheritancepersisttest(john:Man, jane:Woman, susan:Child, mark:Child, GeneratedName:Family, children:List<Child>, familymembers:List<Person>);

joinedinheritancetest();

joinedinheritanceeagertest();

multisingletableloadtest();

singletableinheritancepersisttest(john:Man, jane:Woman, susan:Child, mark:Child, GeneratedName:Family, children:List<Child>, familymembers:List<Person>);

joinedsubclasswithembeddabletest();

tableperclasswithembeddabletest();

singletablewithembeddabletest();

rootentity(id:Long [PK]);

subsubsubentity();

subentity();

subsubentity();

multiinheritanceimplicitdowncasttest();

singletablerelationstest();

joinedinheritancepropertynameconflicttest();

joinedinheritancewithonetomanytest();

joinedsubclasswithignoredexplicitdiscriminatortest();

joinedsubclasswithexplicitdiscriminatortest();

joinedsubclasswithembeddabletest();

joinedsubclasswithimplicitdiscriminatortest();

nativequerydoesnotsupportiterationtest();

group(id:Long [PK], name:String);

user(id:Long [PK], name:String);

membership(id:Long [PK], member:User #FK to(User), GeneratedName:Group, join:Date, dues:Float);

nativequeryscrollableresults();

jpafunctiontest();

postgresrefcursorsupporttest(sf:SessionFactory);

storedprocedureresultsetmappingtest();

h2proctesting();

numvalue(num:long [PK], value:String);

nativequerysyncspacecachingtest();

tooneondeletetest();

testentity(id:long [PK]);

selectdistincthqltest(GeneratedName:SQLStatementInterceptor);

person(id:long [PK], name:String, address:String, zip:String, country:String, heightinches:double, sex:char);

customer(salesperson:Employee #FK to(Employee), comments:String);

user(login:String, passwordexpirydays:Double, silly:String);

employee(title:String, salary:BigDecimal, manager:Employee #FK to(Employee));

shop(id:Long [PK]);

product(id:Long [PK]);

oraclepaginationtest();

lazyloadingloggingtest();

parent(id:Long [PK]);

child(id:Long [PK], GeneratedName:Parent);

lazyloadingtest(children_size:int, parentid:Long, lastchildid:Long);

proxyinterfaceclassloadertest();

zoneddatetimeversiontest();

sybasetimestampcomparisonannotationstest();

localdatetimeversiontest();

offsetdatetimeversiontest();

instantversiontest();

bidirectionalonetoonefetchtest();

parent(id:Long [PK], GeneratedName:Child #FK to(D));

child(GeneratedName:Parent [PK] #FK to(A));

event(description:String);

otherentity(id:String [PK]);

ablockableentity(id:Long [PK], //wehavetwoone-to-oneassociationstomakesureparent_idisn'tconsideredaspartofthistableregardingduplicatemappingsother:OtherEntity #FK to(Entity), other2:ABlockableEntity #FK to(A), //twomany-to-onestomakesurethatstillworksinthisscenariomanytoone1:OtherEntity #FK to(Entity), manytoone2:ABlockableEntity #FK to(A));

message(description:String);

mergetest();

lobstringtest(long_string_size:int, value1:String, value2:String);

lobentity(blob_length:int, id:Long [PK], GeneratedName:Blob);

postgresqllobstringtest(value1:String, value2:String, value3:String);

querytimeouttest(connection_provider:PreparedStatementSpyConnectionProvider, query:String);

invalidenumeratedjavatypetest();

usereservedkeywordinorderbytest();

hqlorderbyidstest();

joinedsubclassduplicatefieldswithtreattest();

schemaupdatetest(skiptest:boolean, jdbcmetadataextractorstrategy:String, output:File, ssr:StandardServiceRegistry, metadata:MetadataImplementor);

componentindextest(ssr:StandardServiceRegistry, GeneratedName:Metadata);

indexescreationtest(ssr:StandardServiceRegistry, GeneratedName:Metadata);

quotedtablenameschemaupdatetest(output:File, ssr:StandardServiceRegistry);

schemaupdateformattertest(after_format:String, delimiter:String);

schemamigratorhaltonerrortest();

schemamigrationtargetscriptcreationtest(output:File);

columnlengthtest(ssr:StandardServiceRegistry, output:File, metadata:MetadataImplementor);

schemaupdatewithviewstest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaupdatehaltonerrortest(output:File, ssr:StandardServiceRegistry, metadata:MetadataImplementor);

postgresqlmultipleschemasequencetest(output:File);

schemaupdateschemanametest();

testfkupdating(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaexportwithglobalquotingenabledtest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

migrationtest(GeneratedName:ServiceRegistry);

connectionsreleasetest(ssr:StandardServiceRegistry, metadata:MetadataImplementor, connectionprovider:ConnectionProviderDecorator);

sequencegenerationtest(ssr:StandardServiceRegistry, output:File, metadata:MetadataImplementor);

tablegeneratortest(ssr:StandardServiceRegistry, output:File, metadata:MetadataImplementor, initial_value:int, expected_db_inserted_value:int);

tablegeneratorstest(ssr:StandardServiceRegistry, output:File, metadata:MetadataImplementor, initial_value:int, expected_db_inserted_value:int);

sequencegeneratorstest(ssr:StandardServiceRegistry, output:File, metadata:MetadataImplementor);

schemaoneentity(id:String [PK]);

schematwoentity(id:String [PK]);

project(id:Long [PK]);

group(id:Long [PK]);

person(id:Long [PK]);

schemaupdatewithkeywordautoquotingenabledtest(ssr:StandardServiceRegistry, metadata:MetadataImplementor);

joinedinheritanceforeignkeytest(output:File, ssr:StandardServiceRegistry, metadata:MetadataImplementor);

phone(id:Long [PK], number:String);

user(id:long [PK], GeneratedName:UserSetting #FK to(User));

foreignkeymigrationtest();

usersetting(id:long [PK], GeneratedName:User #FK to(User));

foreignkeydroptest(output:File, metadata:MetadataImplementor, ssr:StandardServiceRegistry, GeneratedName:SchemaExport);

employee(id:Long [PK]);

employee_project(employee_id:Employee [PK] #FK to Employee,project_id:E [PK] #FK to E);

foreignkeydefinitionmanytoonetest();

foreignkeydefinitionsecondarytabletest();

foreignkeydefinitiononetomanyjointabletest();

foreignkeydefinitiononetoonetest();

columnnamestest(jdbcmetadataextractorstrategy:String, ssr:StandardServiceRegistry, GeneratedName:Metadata, output:File);

sqlserverquoteschematest(output:File);

implicitcompositekeyjointest(GeneratedName:Logger);

tablecommenttest(output:File);

schemadroptest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaexportwithindexanddefaultschema(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

mixedfieldpropertyannotationtest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaupdategeneratingonlyscriptfiletest();

schemaupdatewithfunctionindextest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaupdatedelimitertest(id:Long [PK],  code:String, expected_delimiter:String);

sequencereadingtest();

element(id:Long [PK], code:String);

category();



step(id:Integer [PK], parent:Step #FK to(E));

schemaupdateproceedonerrortest();

schemaupdatesqlservertest(jdbcmetadataextractorstrategy:String, output:File, ssr:StandardServiceRegistry, metadata:MetadataImplementor);

hanaschemamigrationtargetscriptcreationtest(output:File);

tableb(id:TableBId, idcolumn:ATable #FK to(A));

atable(firstid:Integer [PK]);

tablea(id:int [PK], test:String, test2:String);

hsqltruncfunctiontest();

abstractsequenceinformationextractortest();

hanabooleantest(entity_name:String, legacy_entity_name:String);

category(id:Integer [PK], name:String);

contact(id:Long [PK], type:String, firstname:String, lastname:String, GeneratedName:Folder #FK to(D));

hanacalcviewtest(calc_view_name:String, calc_scenario_name:String, projection_node_name:String);

product2(id:Integer [PK], description:String, GeneratedName:Category #FK to(Category));

sqlserverdialecttest();

folder(id:Long [PK], name:String, owner:String);

sqlserverdialectpaginationtest();

sqlserverdialectcollationtest();

oraclefollowonlockingtest(GeneratedName:SQLStatementInterceptor);

category(id:Long [PK]);

category_Item(categoryID:category [PK] #FK to category,ItemID:Item [PK] #FK to Item);

customer(id:Integer [PK], version:Integer, name:String, registeredtrademarks:Set<String>, hq:Address, addresses:Set<Address>);

customer_D(customerID:customer [PK] #FK to customer,DID:D [PK] #FK to D);

industry(id:Integer [PK], name:String);

zipcode(id:Integer [PK], code:String, city:String, GeneratedName:State);

order(id:Integer [PK], referencecode:String, placed:Date, fulfilled:Date, GeneratedName:Customer);

item(id:Long [PK], price:Double, specialprice:Double);

language(id:Long [PK], //@column(unique:String, fallback:Language #FK to(A));

workflow(serialversionuid:long, id:Long [PK], defaultlanguage:Locale, supportedlocales:Set<Locale>, localized:Map<Locale,LocalizedEmbeddable>);

container(id:Integer [PK], items:List<Item>);

componentnamingstrategyforjoincolumntest();

collectionjointablenamingtest();

dynamicentity(id:Integer [PK]);

zoneddatetimetest();

oraclelonglobtypetest();

localdatetest(expected:LocalDate);

arraytypecontributortest();

longlisttypecontributortest();

sqlserver2008nvarchartypetest(ssr:StandardServiceRegistry, metadata:MetadataImplementor, GeneratedName:SchemaExport);

java8datetimetests();

timeandtimestamptest();

offsetdatetimetest();

binarytypetest();

smallinttoshortclassmappingtest();

library(entid:int [PK]);

product(entid:int [PK], inventorycode:String);

book(isbn:String, GeneratedName:Library #FK to(A));

book(isbn:String, GeneratedName:Library #FK to(A));

library(entid:int [PK]);

product(entid:int [PK], inventorycode:String);

product(entid:int [PK], inventorycode:String);

library(entid:int [PK]);

book(isbn:String, GeneratedName:Library #FK to(A));

individuallyschemavalidatorimpltest(loginspection:LoggerInspectionRule, ssr:StandardServiceRegistry, tool:HibernateSchemaManagementTool, configurationvalues:Map, GeneratedName:ExecutionOptions);

schematooltransactionhandlingtest();

dropschemaduringjtatxntest();

individuallyschemavalidatorimplconnectiontest(loginspection:LoggerInspectionRule, ssr:StandardServiceRegistry, tool:HibernateSchemaManagementTool, configurationvalues:Map, GeneratedName:ExecutionOptions, connectionprovider:DriverManagerConnectionProviderImpl, GeneratedName:Connection);

unionsubclasstest();

primitivebytearrayidtest();

bytearrayidtest();

primitivecharacterarrayidtest();

characterarrayidtest();

pooledhilosequenceidentifiertest();

legacysequenceexporttest(ssr:StandardServiceRegistry);

optimizertest();

sequenceexporttest(ssr:StandardServiceRegistry);

negativevaluesequencetest(loginspection:LoggerInspectionRule);

usertypecomparableidtest();

usertypenoncomparableidtest();

uuidbasedidinterpretationtest();

sqlserver2012sequencegeneratorannotationtest();

nationalizedignorecasetest();

queryhinthanatest(connectionprovider:PreparedStatementSpyConnectionProvider);

queryhintsqlserver2012test();

queryhinttest(connectionprovider:PreparedStatementSpyConnectionProvider);

productentity(pk:Long [PK], description:Map<String,ILocalizable>);

employee(id:Long [PK], name:String);

employeegroup(id:EmployeeGroupId [PK]);

wrongcircularitydetectiontest();

defaultcacheconcurrencypropertytest();

tree(id:Long [PK]);

palmtree(leavesize:double);

gate(id:Long [PK]);

window(id:Long [PK]);

portal(id:Long [PK]);

annotationbindertest(loginspection:LoggerInspectionRule);

child1(id:Long [PK]);

unidirectionalonetomanynonpkjoincolumntest();

child2(id:Long [PK]);

parent1(id:Long [PK]);

bookstore(id:Long [PK], name:String);

bookstore_Book(bookstoreID:bookstore [PK] #FK to bookstore,BookID:Book [PK] #FK to Book);

unrelatedentity(id:Long [PK], name:String);

author(id:Long [PK], name:String, GeneratedName:Publisher);

nontransactionaldataaccesstest(allowupdateoperationoutsidetransaction:String);

publisher(id:Long [PK], name:String);

book(id:Long [PK], title:String, GeneratedName:Author);

statelesssessionconnectiontest(loginspection:LoggerInspectionRule);

statelesssessionnativequeryinserttest();

incorrectentity(name:String);

parenthierarchy1();

childhierarchy22();

childhierarchy1();

parenthierarchy22();

simple2(id1:Long [PK], id2:Long [PK], quantity:int);

simple(id1:Long [PK], id2:Long [PK], quantity:int);

multiple(id1:Long [PK], id2:Long [PK], id3:Long [PK], quantity:int);

uniqueconstraintvalidationtest();

room(id:Long [PK], name:String);

uniqueconstraintunittests();

house(id:Long [PK], cost:Integer);

mysqldropconstraintthrowsexceptiontest();

someotherentity(id:int [PK], data:boolean, data:byte, //settingaarbitraryacterheretomakethistestalsopassagainstpostgresql//postgresqlthrowsotherwiseanexceptionwhenpersistingthenullvalue//org.postgresql.util.psqlexception:error:invalidbytesequenceforencoding"utf8":0x00acterdata:char, data:short, egerdata:int, data:long, data:double, data:float, GeneratedName:Grade);

someentity(id:java.util.Date [PK], timedata:java.sql.Time, tsdata:java.sql.Timestamp, data:Byte, chardata:Character);

updatetimestampinheritancetest(sleep_millis:long, customerid:String);

a(id:String [PK], name:String, value:int, address:Set<AddressEntry>);

longkeynamingstrategytest(GeneratedName:ServiceRegistry);

address(id:long [PK], GeneratedName:Person #FK to(Person));

abstractcharsetnamingstrategytest(GeneratedName:ServiceRegistry);

person(id:long [PK]);

deck(id:Integer [PK]);

card(id:Integer [PK], GeneratedName:Deck #FK to(D));

bed();

rentalcar(id:int [PK], GeneratedName:Driver);

driver(id:int [PK], name:String);

waiter();

cook(id:int [PK], favouriteknife:Knive);

tourist(id:long [PK], name:String, destination:String);

boy(id:long [PK], nicknames:Set<String>);

course2(id:long [PK], title:String);

bed();

user();

course6(id:long [PK], title:String);

horse(name:String);

shape(id:long [PK]);

furniture(id:Integer [PK], weight:long);

course3(id:long [PK], title:String);

gardenshed(id:Integer [PK], floors:long);

square(id:long [PK], GeneratedName:Position);

course7(id:long [PK], title:String);

bigbed(size:int);

course1(id:long [PK], title:String);

chair();

course5(id:long [PK], title:String);

course5_Student(course5ID:course5 [PK] #FK to course5,StudentID:Student [PK] #FK to Student);

animal(id:long [PK]);

student(id:long [PK], name:String);

circle(GeneratedName:Color);

being(id:long [PK]);

course4(id:long [PK], title:String);

course8(id:long [PK], title:String);

person(firstname:String, lastname:String);

foobar(foo:String);

chair();

gardenshed(id:Integer [PK], floors:long);

attributeaccessortest(GeneratedName:ServiceRegistry);

furniture(id:Integer [PK], weight:long);

bigbed(size:int);

customer(id:Long [PK], name:String, GeneratedName:Passport);

vegetable(id:VegetablePk [PK], priceincent:long);

folder();



symboliclink(target:File #FK to(E));

document(size:int);

trash(id:Integer [PK]);

house();

noise();

duplicateddiscriminatorvaluetest(discriminator_value:String);

papertrash();

funk(starred:int);

building(id:Integer [PK], street:String);

rock();

music(id:Integer [PK], avgbeat:int, type:Integer);

apple();

carrot(length:int);

fruit(id:Integer [PK]);

customer(customername:String, customercode:String);

document(size:int);

pool(id:Integer [PK], address:PoolAddress);

propertyasset(price:double);

asset(id:Integer [PK], GeneratedName:Parent);

financialasset(price:double);

swimmingpool();

alarm(eventinfo:EventInformation #FK to(A));

programexecution(id:Integer [PK], action:String, applieson:File #FK to(E));

parent(id:Integer [PK], propertyass:Set, financialass:Set);

clothing(id:long [PK], size:int, color:String);

account(serialversionuid:long, id:int [PK], number:String, balance:double);

file(name:String [PK], parent:Folder #FK to(D));

symboliclink(target:File #FK to(E));

eventinformation(notificationid:String [PK]);

folder();

sweater(issweat:boolean);

client(serialversionuid:long, street:String, code:String, city:String, id:Account #FK to(A));

person(id:int [PK], name:String, firtsname:String);

company(companyname:String, companyaddress:String);

folder();

file(name:String [PK], parent:Folder #FK to(D));

document(size:int);

symboliclink(target:File #FK to(E));

tomato(size:int);

baseclass(id:long [PK]);

subclass2();

subclass();

baseclass2(id:long [PK]);

machine(id:Integer [PK], weight:Double);

product();

robot(name:String);

component(manufacturerpartnumber:String, manufacturerid:Long, id:Long [PK]);

t800(targetname:String);

car(id:long [PK], brand:String, producer:String, since:long, GeneratedName:Dealer, otherdealers:Set<Dealer>);

importer(id:long [PK], name:String);

car_importer(Importer_ID:Importer [PK] #FK to Importer,A_ID:A [PK] #FK to A);

player(id:Long [PK], GeneratedName:Team, name:String);

loaderwithinvalidquerytest();

team(id:Long [PK]);

discount(id:Long [PK], discount:double, owner:Customer #FK to(Customer));

collectionasbasictest();

wildentity(serialversionuid:long, id:int [PK], property:String);

dna(id:Integer [PK]);

classes();

gene(id:Integer [PK], state:STE);

paper();

dummy(id:Long [PK]);

someguy(id:Integer [PK]);

price(id:Integer [PK], amount:Double, currency:String);

papertype(id:Integer [PK], name:String);

gsm(frequency:int);

voice(id:Integer [PK]);

a(id:int [PK]);

acces(idpk:BigInteger [PK], idpkdracc:Droitacces #FK to(A));

benefserv(idpk:BigInteger [PK], idpkser:Service #FK to(E));

c(prent:A [PK], sequencenumber:int [PK]);

b(parent:C [PK], sequencenumber:int [PK]);

service(idpk:BigInteger [PK]);

droitacces(idpk:BigInteger [PK], idpkbenef:Benefserv #FK to(E));

cardkey(id:int [PK]);

storecustomer(GeneratedName:Store [PK] #FK to(Store), GeneratedName:Customer [PK] #FK to(Customer), serialversionuid:long);

store(id:Integer [PK], serialversionuid:long);

project(id:int [PK]);

customer(id:Integer [PK], serialversionuid:long);

course(id:int [PK], name:String);

card(primarykey:CardPrimaryKey [PK], main:CardField #FK to(A));

cardfield(GeneratedName:PrimaryKey [PK], tmp:Card #FK to(A));

shoppingbaskets(serialversionuid:long, customerid:Customers [PK] #FK to(Customer), basketdatetime:java.util.Date [PK]);

customers(serialversionuid:long, customerid:int [PK]);

student(id:int [PK], name:String);

basketitems(serialversionuid:long, basketdatetime:ShoppingBaskets [PK] #FK to(A), cost:Double [PK]);

coursestudent(GeneratedName:Course [PK] #FK to(Course), GeneratedName:Student [PK] #FK to(Student), value:String);

americacupclass(GeneratedName:Country);

boat(id:Integer [PK], size:int, weight:int);

a(accountid:AId, shortcode:String);

naturalidonmanytoone(id:int [PK], GeneratedName:Citizen #FK to(E));

a(oid:long [PK], version:int, name:String, ds:Set<D>, single:D);

d(oid:long [PK], version:int, GeneratedName:A, single:A);

state(id:Integer [PK], name:String);

citizen(id:Integer [PK], firstname:String, lastname:String, GeneratedName:State #FK to(A), ssn:String);

ferry(sea:String);

formulawithpartitionbytest();

formulawithcolumntypestest();

joincolumnorformulatest(ssr:StandardServiceRegistry);

formulawithaliastest();

entitymapenum(id:int [PK], ordinalmap:Map<Common,String>, stringmap:Map<Common,String>, firstlettermap:Map<FirstLetter,String>, lastnumbermap:Map<LastNumber,String>, explicitoverridingimplicitmap:Map<LastNumber,String>);

user(id:java.lang.String);

socialnetworkprofile(id:java.lang.String, GeneratedName:User #FK to(User), type:SocialNetwork, networkid:String);

entityenum(id:long [PK], ordinal:Common, string:Common, GeneratedName:FirstLetter, GeneratedName:LastNumber, explicitoverridingimplicit:LastNumber, GeneratedName:Trimmed, formula:Trimmed, set:Set<Common>);

enumeratedsmoketest(ssr:StandardServiceRegistry);

myentity(id:Long [PK], name:String);

secondarytableschematest();

corptype(id:Integer [PK], type:String);

person(id:Long [PK], name:String, GeneratedName:Address);

country(iso2:String [PK], name:String);

alias(id:Long [PK], GeneratedName:Name, source:String);

person(id:Long [PK], name:PersonName);

regionalarticle(pk:RegionalArticlePk [PK], name:String);

wealthyperson(vacationhomes:Set<Address>, legacyvacationhomes:Set<Address>, explicitvacationhomes:Set<Address>);

person(id:Integer [PK], name:String, GeneratedName:Address, bornin:Country);

spreaddeal(/***withthetenor.*/long:Swap, /***withthelongertenor.*/short:Swap);

nationality(id:Integer [PK], name:String);

addresstype(id:Integer [PK], name:String);

entitywithnestedembeddables(id:Integer [PK], embeda:EmbeddableA);

internetprovider(id:Integer [PK], brandname:String, owner:LegalStructure);

manager(id:Integer [PK], name:String, employer:InternetProvider #FK to(D));

favoritethings(id:int [PK], web:InternetFavorites);

book(isbn:String [PK], name:String, GeneratedName:Summary);

vanillaswap(/***identifieroftheinterestrateswap*/instrumentid:String, /***oftheswap(andofbothlegs).*/:Currency, /***fixedleg(cashflowswiththefixedrate).*/:FixedLeg, /***floatingleg(cashflowsboundtoafinancialindex).*/:FloatLeg);

store(id:Integer [PK], name:String);

store_Client(storeID:store [PK] #FK to store,ClientID:Client [PK] #FK to Client);storesupplier(store:Store [PK] #FK to Store,supplier:E [PK] #FK to E);store_E(storeID:store [PK] #FK to store,EID:E [PK] #FK to E);

category(id:Integer [PK]);

category_Client(categoryID:category [PK] #FK to category,ClientID:Client [PK] #FK to Client);

item(id:Integer [PK]);

item_E(itemID:item [PK] #FK to item,EID:E [PK] #FK to E);

knownclient(id:Integer [PK], name:String);

city(id:Integer [PK], name:String);

city_Item(cityID:city [PK] #FK to city,ItemID:Item [PK] #FK to Item);

store(id:Integer [PK], name:String);

store_Client(storeID:store [PK] #FK to store,ClientID:Client [PK] #FK to Client);store_Item(storeID:store [PK] #FK to store,ItemID:Item [PK] #FK to Item);store_Category(storeID:store [PK] #FK to store,CategoryID:Category [PK] #FK to Category);store_E(storeID:store [PK] #FK to store,EID:E [PK] #FK to E);

employee(id:Integer [PK], name:String, GeneratedName:ContactInfo);

phonenumber(phnumber:int [PK]);

man(id:ManPk [PK], carname:String);

inspector(_id:Long [PK], name:String);

supplier(id:Integer [PK], name:String);

woman(id:WomanPk [PK], carname:String);

man_woman(womanlastname:Woman [PK] #FK to Woman,maniselder:A [PK] #FK to A);

phonenumber(phnumber:int [PK]);

friend(id:Integer [PK], name:String);

friend2friend(from_fr:Friend [PK] #FK to Friend,to_fr:D [PK] #FK to D);

programmanager(id:int [PK]);

cat(id:CatPk, age:int);

tt(Cat_ID:Cat [PK] #FK to Cat,A_ID:A [PK] #FK to A);

inspectorprefixes(prefixes:String);

deserted_area(inspector_name:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:E [PK] #FK to E);inspector_prefixes_areas(inspector_id:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:E [PK] #FK to E);

employer(id:Integer [PK]);

employer_employee(emper_id:Employer [PK] #FK to Employer,empee_id:E [PK] #FK to E);employer_contractor(employer_id:Employer [PK] #FK to Employer,contractor_id:list [PK] #FK to list);

group(id:Integer [PK]);

group_E(groupID:group [PK] #FK to group,EID:E [PK] #FK to E);

employee(id:Integer [PK], name:String, GeneratedName:ContactInfo, GeneratedName:JobInfo);

knownclient(id:Integer [PK], name:String);

contractor(hourlyrate:float);

building(id:Long [PK], name:BuildingCompany #FK to(A));

permission(permission:String [PK], expiration:Date);

groupwithset(id:Integer [PK]);

groupwithset_E(groupwithsetID:groupwithset [PK] #FK to groupwithset,EID:E [PK] #FK to E);

city(id:Integer [PK], name:String);

zone(id:Integer [PK]);

buildingcompany(id:Long [PK], foundedin:Date);

son(id:Integer [PK], GeneratedName:Father, GeneratedName:Mother);

mother(id:Integer [PK]);

father(id:Integer [PK]);

stay(//memberdeclarationid:int, GeneratedName:Person, old:Person, veryold:Person, start:Date, end:Date, vessel:String, authoriser:String, comments:String);

leaf(id:Integer [PK], GeneratedName:Branch #FK to(A));

person(//memberdeclarationid:int, firstname:String, lastname:String, companyname:String);

branch(id:Integer [PK]);

marketregion(id:long [PK], regioncode:String);

sportcar();

car(id:long [PK], model:String, region_code:MarketRegion #FK to(A));

doctor(id:Integer [PK], name:String, activelicense:boolean, yearsexperience:Integer);

narrative(id:int [PK], state:String, GeneratedName:Topic);

name(id:Integer [PK], GeneratedName:LastName);

localcontactdetails(id:int [PK], local:PhoneNumber, GeneratedName:OverseasPhoneNumber);

car(id:int [PK], name:String);

tree(id:Integer [PK], name:String);



contactdetails(id:int [PK], local:PhoneNumber, GeneratedName:OverseasPhoneNumber);

forest2(id:Integer [PK], name:String, longdescription:String);

flight(id:Long [PK], maxaltitudeinmilimeter:long, maxaltitude:long);

powerdrill();

address(id:Integer [PK], city:String, GeneratedName:Country);

race(length:Long, id:Integer [PK]);

player(id:int [PK], name:String, team:SoccerTeam #FK to(A), //fortheworldcupofoneversusonematches,wehave//teamswithoneplayer(1v1team).onevoneteam:SoccerTeam);

forest(id:Integer [PK], name:String, length:long, longdescription:String, smalltext:String, bigtext:String, GeneratedName:Country, near:Set);

zipcode(code:String [PK]);

peugot();

washingmachine(id:Integer [PK], transientisactive:boolean);

month(id:int [PK], year:int, month:int);

bid(id:Integer [PK], description:String, note:Starred, editorsnote:Starred, approved:Boolean);

formallastname(id:Integer [PK], GeneratedName:LastName, designation:String);

ransom(id:Integer [PK], kidnappername:String, amount:MonetaryAmount, GeneratedName:Date);

communitybid(communitynote:Starred);

soccerteam(id:int [PK], name:String, onevone:Player #FK to(A));

topic(id:int [PK]);

conductor(id:Integer [PK], name:String, version:Long);

truck(weight:int, agreement:ProfessionalAgreement #FK to(A));

vmtimestamped(id:int [PK], lastup:Date);

staff(id:Integer [PK], sizeininches:double, radiuss:double, diameter:double, kooky:String);

antenna(id:Integer [PK], longitude:String, latitude:String, power:Double);

dbtimestamped(id:int [PK], lastup:Date);

vehicule(id:String [PK], registrationnumber:String, current:Conductor #FK to(D), year:Integer, previous:Conductor #FK to(D));

professionalagreement(id:Integer [PK], expiration:Date);

classa(id:int [PK]);

a(id:A_PK);

d(id:D_PK);

classd();

b(id:int [PK]);

classb();

classc();

c();

primeminister(id:Integer [PK], name:String, current:Government);

zimpl(serialversionuid:long, zid:Integer [PK], GeneratedName:B);

sky(id:Integer [PK], maincloud:CloudType #FK to(D));

sky_D(skyID:sky [PK] #FK to sky,DID:D [PK] #FK to D);

bimpl(serialversionuid:long, bid:Integer);

aimpl(serialversionuid:long, aid:Integer [PK]);

manufacturer(id:Integer [PK]);

port(id:Long [PK]);

a320(javaembeddedversion:String);

show(id:Integer [PK], description:ShowDescription #FK to(D));

partyaffiliate(partyid:String [PK], GeneratedName:Party #FK to(A), affiliatename:String);

party(partyid:String [PK], GeneratedName:PartyAffiliate #FK to(A));

computer(id:ComputerPk, cpu:String, serial:SerialNumber #FK to(A));

showdescription(id:Integer [PK], GeneratedName:Show #FK to(H));

shipment(id:Long [PK], createdon:Date, GeneratedName:ShipmentState, auction:Item #FK to(Item));

item(id:Long [PK], name:String);

onetoonemapsidjoincolumntest();

trouserszip(id:Integer [PK], GeneratedName:Trousers #FK to(User));

trousers(id:Integer [PK], zip:TrousersZip #FK to(User));

personaddress(id:Integer [PK], GeneratedName:Person #FK to(Person));

onetoonejointableoptionaltest();

heart(id:Integer [PK]);

person(id:long [PK], GeneratedName:Address #FK to(A));

address(id:long [PK], GeneratedName:Person #FK to(Person));

serialnumber(id:SerialNumberPk [PK], value:String);

address(id:Integer [PK], city:String);

body(id:Integer [PK], GeneratedName:Heart);

person(id:Integer [PK], GeneratedName:PersonAddress #FK to(A));

client(id:Integer [PK], name:String, GeneratedName:Address, secondary:Address);

owner(id:Integer [PK], address:OwnerAddress #FK to(A));

owneraddress(id:Integer [PK], GeneratedName:Owner #FK to(E));

onetoonejointablenonoptionaltest();

device(GeneratedName:ManagedDevice, tag:String);



owner(deleted:boolean, id:Long [PK], name:String, version:Integer);

manageddevice(name:String, GeneratedName:Device, GeneratedName:DeviceGroupConfig);

devicegroupconfig(name:String);

onetoonemapsidtest();

customer2(id:long [PK], name:String, customernumber:long);

country(id:Integer [PK], name:String);

supporttickets(id:long [PK], description:String, resolution:String);

customer3(id:long [PK], name:String, customernumber:long);

customer(id:long [PK], name:String, customernumber:long, last:Order #FK to(Order));

customer5(id:long [PK], name:String, customernumber:long);

order(id:long [PK], ordernumber:long, delivery:Date, GeneratedName:Country #FK to(Country));

customer4(id:long [PK], name:String, customernumber:long);

printercable(id:Long [PK], GeneratedName:Printer);

category(id:int [PK], title:String);

printer(id:Long [PK]);

bug(id:int [PK], title:String);

`bug_category`(Bug_ID:Bug [PK] #FK to Bug,Category_ID:Category [PK] #FK to Category);

home(id:Long [PK]);

twinkletoes(id:BigDecimal [PK], GeneratedName:Bunny #FK to(B));

computer(id:Long [PK], serialnumber:String);

hotel(id:Long [PK], name:String);

shoe(id:Long [PK]);

ball(id:Integer [PK]);

footballer(firstname:String [PK], lastname:String [PK], club:String);

phone(id:Integer [PK]);

furniture(id:Integer [PK]);

department(id:Long [PK]);

bunny(id:BigDecimal [PK]);

firtree();

tower();

monkey(id:String [PK]);

goalkeeper();

soundsystem(id:String [PK], brand:String, model:String);

dog(id:Integer [PK], name:String);

store(id:Long [PK]);

planetcheatsheet(GeneratedName:Planet [PK], mass:double, radius:double, numberofinhabitants:long);

pointytooth(id:BigDecimal [PK], GeneratedName:Bunny #FK to(B));

breakdance(id:Integer [PK], name:String);

dedicatedsequenceentity2(entity_name:String, id:Long [PK]);

minimalsequenceentity(seq_name:String, id:Long [PK]);

minimaltableentity(tbl_name:String, id:Long [PK]);

dedicatedsequenceentity1(sequence_suffix:String, id:Long [PK]);

completesequenceentity(seq_name:String, id:Long [PK]);

autoentity(id:Long [PK]);

bunny(id:BigDecimal [PK]);

furniture(id:Integer [PK]);

computer(id:Long [PK], serialnumber:String);

phone(id:Integer [PK]);

monkey(id:String [PK]);

pointytooth(id:BigDecimal [PK], GeneratedName:Bunny #FK to(B));

planetcheatsheet(GeneratedName:Planet [PK], mass:double, radius:double, numberofinhabitants:long);

store(id:Long [PK]);

soundsystem(id:String [PK], brand:String, model:String);

hibernatesequenceentity(id:Long [PK], text:String);

tower();

firtree();

twinkletoes(id:BigDecimal [PK], GeneratedName:Bunny #FK to(B));

shoe(id:Long [PK]);

ball(id:Integer [PK]);

department(id:Long [PK]);

footballer(firstname:String [PK], lastname:String [PK], club:String);

breakdance(id:Integer [PK], name:String);

goalkeeper();

home(id:Long [PK]);

dog(id:Integer [PK], name:String);

andformulatest(ssr:StandardServiceRegistry);

passport(id:Long [PK], number:String, owner:Customer #FK to(Customer));

userimpl(id:Integer [PK]);

contactimpl(id:Integer [PK], name:String);

sky(id:Long [PK], color:String, day:String, month:String);

bag(id:Integer [PK], serial:String, fld_name:Rambler #FK to(A));

itemcost(id:int [PK], GeneratedName:Item, GeneratedName:Vendor, cost:BigDecimal);

postman(name:String, id:String [PK]);

place(id:int [PK], name:String, owner:String);

inhabitant(id:Integer [PK], name:String);

houseplaces(id:int [PK], GeneratedName:Places, neighbour:Places);

rambler(id:Integer [PK], name:String);

clothes(id:Integer [PK], type:String, flavor:String);

vendor(id:int [PK]);

house(id:Integer [PK], address:String, GeneratedName:Postman);

address(address:House [PK] #FK to House,name:A [PK] #FK to A);

warehouseitem(id:int [PK], GeneratedName:Item, GeneratedName:Vendor, vendor_id:ItemCost #FK to(Item), qtyinstock:BigDecimal);

item(id:int [PK]);

luggage(id:Integer [PK], owner:String, type:String);

materializedblobentity(id:Long [PK], name:String, thes:byte);

imageholder(id:Long [PK], longarray:byte, GeneratedName:Dog, picarray:Byte);

longstringholder(id:Long [PK], name:char, whatever:Character, long:String);

document(id:Long [PK], revision:Integer, fulltext:String, shortdescription:String);

compiledcode(id:Integer [PK]);

versionedcompiledcode(id:Integer [PK], version:Integer);

lobtestentity(id:Long [PK], lobvalue:Blob, qwerty:String);

versionedbook(id:Integer [PK], version:Integer);

entityserialize(id:long [PK], explicitlob:ExplicitSerializable, explicit:ExplicitSerializable, implicit:ImplicitSerializable, explicitoverridingimplicit:ImplicitSerializable);

lobholder(id:Long [PK], locator:Clob, locator:Blob, counter:Integer);

book(id:Integer [PK]);

storm(id:Integer [PK], start:Location, end:Location, stormname:String);

listmappingtest(ssr:StandardServiceRegistry);

savingsaccount();

account();

state(id:Integer [PK], name:String);

country(id:Integer [PK], name:String);

foobar(id:Integer [PK], name:String);

photo(id:Integer [PK], name:String, metadata:Exif, GeneratedName:Caption);

contest(id:int [PK], heldin:Month);

competitor(id:int [PK], name:String);

flight(id:String [PK]);

updatetimestamptest();

menu(serialversionuid:long, id:Integer [PK], ordernbr:String, isdefault:String);

model(id:ModelId [PK], name:String);

manufacturer(id:ManufacturerId [PK], name:String);

message(serialversionuid:long, id:int [PK], languagecode:String, languagename:String, GeneratedName:Language);

contract(contractnumber:String, //integercompanycodeid:ContractId, GeneratedName:Manufacturer, GeneratedName:Model);

productsqlserver(serialversionuid:long, id:Integer [PK], productidnf:String, description:String, product_idnf:ProductSqlServer #FK to(Product));

company(serialversionuid:long, id:int [PK], GeneratedName:Person);

fooditem(id:Integer [PK], item:String, order_nbr:Menu #FK to(E));

person(serialversionuid:long, id:int [PK], companyid:int, defaultflag:String);

product(serialversionuid:long, id:Integer [PK], productidnf:String, description:String, product_idnf:Product #FK to(Product));

language(serialversionuid:long, name:String, code:String [PK]);

death(id:Integer [PK], GeneratedName:Date, howdoesithappen:String);

dog(id:DogPk [PK], weight:int, thoroughbredname:String);

cat(id:Integer [PK], name:String, secondname:String, storypart1:String, storypart2:String);

b(id:Integer [PK], name:String);

sysgroupsorm(groupid:long [PK]);

c(age:int);

sysuserorm(userid:long [PK]);

sys_groups_users(userid:SysUserOrm [PK] #FK to SysUserOrm,groupid:E [PK] #FK to E);

life(id:Integer [PK], duration:int, fulldescription:String, owner:Cat #FK to(A));

simplecat(id:Integer [PK], name:String);

life(id:Integer [PK], duration:int, fulldescription:String, owner:SimpleCat #FK to(A));



color(id:Integer [PK], name:String);

treetype(id:Integer [PK], name:String, GeneratedName:ForestType, alternative:ForestType);

customer(id:Integer [PK], userid:String);

node(id:NodePk [PK], description:String, parent:Node #FK to(Node));

carz(id:Integer [PK], make:String, model:String, manufactured:Date, loc_code:Lotz #FK to(lotz));

user(userkey:Long [PK], start:Date [PK], end:Date [PK], createdby:Long, createdon:Date, userid:String, prefix:Integer, firstname:String, lastname1:String, lastname2:String, middlename1:String, middlename2:String, suffix:Integer, birth:Date, birthstate:Integer, birthcountry:Integer, username:String, password:String, usertype:Integer, privilege:Integer, state:Integer, country:Integer, preferredname:String, birthplace:String, school:Long, cluster:Long, ldtmm:Long, ldtmd:Long, pmtmp:Long);

orderline(id:Integer [PK], item:String, GeneratedName:Order, replacement:Order);

frame(id:Long [PK], name:String, lowername:String);

lens(id:Long [PK], focal:float, length:float, name:Frame #FK to(A));

car(id:Integer [PK], body:Color, owner:Parent #FK to(A));

districtuser(id:Long [PK], createdby:Long, createdon:Date, ctvusers_key:User #FK to(User), ldtmd:Long, pmtmp:Long);

foresttype(id:Integer [PK], name:String, biggestrepresentative:BiggestForest #FK to(E));

vendor();

zitemcost(GeneratedName:Item, GeneratedName:Vendor, cost:BigDecimal);

warehouseitem(GeneratedName:Item, GeneratedName:Vendor, vendor_id:ZItemCost #FK to(Item), qtyinstock:BigDecimal);

item();

biggestforest(id:Integer [PK], type:ForestType #FK to(E));

deal(id:Integer [PK], userid:Customer #FK to(Customer), userid:Customer #FK to(Customer));

lotz(lotpk:LotzPK, name:String, location:String);

order(id:Integer [PK], ordernbr:String);

parent(id:ParentPk [PK], age:int);

child(id:Integer [PK], ismale:Parent #FK to(A));

person(id:Integer [PK]);

medicalhistory(id:Integer [PK], patient:Person #FK to(Person));

person(firstname:String [PK], lastname:String [PK]);

medicalhistory(patient:Person [PK] #FK to(Person));

medicalhistory(//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId, patient:Person #FK to(Person));

person(firstname:String [PK], lastname:String [PK]);

dependent(name:String [PK], firstname:Employee [PK] #FK to(Employee));

employee(firstname:String [PK], lastname:String [PK]);

dependent(id:DependentId, emp:Employee #FK to(Employee));

employee(firstname:String [PK], lastname:String [PK]);

dependent(//idattributemappedbyjoincolumndefaultid:DependentId, GeneratedName:Employee #FK to(Employee));

medicalhistory(//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId, patient:Person #FK to(Person));

person(id:PersonId);

person(id:PersonId);

medicalhistory(patient:Person [PK] #FK to(Person));

dependent(name:String [PK], //idattributemappedbyjoincolumndefaultemp:Employee);

employee(empid:long [PK], empname:String, nickname:String);

dependent(id:DependentId, //@joincolumn(name:Employee #FK to(Employee));

exclusivedependent(id:DependentId, emp:Employee #FK to(Employee));

employee(empid:long [PK], empname:String);

customertwo(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

customerinventorytwo(id:Integer [PK], custid:int [PK], customer:CustomerTwo #FK to(Customer), vehicle:Item #FK to(Item), totalcost:BigDecimal, quantity:int, version:int);

customerinventory(id:Integer [PK], custid:int [PK], GeneratedName:Customer #FK to(Customer), vehicle:Item #FK to(Item), totalcost:BigDecimal, quantity:int, version:int);

item(query_by_category:String, id:String [PK], name:String, price:BigDecimal, description:String, discount:BigDecimal, category:int, version:int);

customer(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

customer(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

customerinventory(id:Integer [PK], GeneratedName:Customer [PK] #FK to(Customer), vehicle:Item #FK to(Item), totalcost:BigDecimal, quantity:int, version:int);

item(query_by_category:String, id:String [PK], name:String, price:BigDecimal, description:String, discount:BigDecimal, category:int, version:int);

dependent(name:String [PK], emp:Employee [PK] #FK to(Employee));

employee(empid:long [PK], empname:String);

employer(name:String [PK], GeneratedName:Employee [PK] #FK to(Employee));

employee(id:long [PK], name:String);

employee(empid:EmployeeId);

dependent(//defaultcolumnnamefor"name"attributeisoverriddenid:DependentId, firstname:Employee #FK to(Employee));

policy(id:PolicyId, firstname:Dependent #FK to(D));

dependent(id:DependentId, firstname:Employee #FK to(Employee));

employee(empid:EmployeeId);

dependent(//defaultcolumnnameisoverriddenname:String [PK], firstname:Employee [PK] #FK to(Employee));

employee(empid:EmployeeId);

dependent(id:DependentId, emp:Employee #FK to(Employee));

policy(id:PolicyId, dep:Dependent #FK to(D));

employee(empid:EmployeeId);

person(ssn:String [PK]);

medicalhistory(patient:Person [PK] #FK to(Person), lastup:Date);

financialhistory(patient:Person [PK] #FK to(Person), lastup:Date);

simple(ssn:String [PK], name:String [PK]);

medicalhistory(//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String [PK], patient:Person #FK to(Person), lastup:Date);

person(ssn:String [PK]);

financialhistory(//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String [PK], lastup:Date, patient:Person #FK to(Person));

foo(id:Long [PK], name:String, GeneratedName:Bar #FK to(A));

bar(GeneratedName:Foo [PK] #FK to(Foo), details:String);

order(id:Long [PK], name:String);

dependent(emp:Employee [PK] #FK to(Employee), name:String);

employee(empid:long [PK], empname:String);

orderline(GeneratedName:Order [PK] #FK to(Order), GeneratedName:Product [PK] #FK to(Product), amount:Integer);

product(id:Long [PK], name:String);

person(serialversionuid:long, id:Integer [PK], name:String, GeneratedName:PersonInfo #FK to(Person));

personinfo(serialversionuid:long, id:Person [PK] #FK to(Person), info:String);

medicalhistory(patient:Person [PK] #FK to(Person), xraydata:byte);

person(ssn:String [PK]);

longproperty(id:Integer [PK], name:String, value:Long);

propertylist(id:Integer [PK], name:String, somepropery:T, generalproperties:List<T>);

propertymap(id:Integer [PK], name:String, properties:Map<String,Property>);

integerproperty(id:Integer [PK], name:String, value:Integer);

propertyset(id:Integer [PK], name:String, some:Property, generalproperties:List<Property>);

stringproperty(id:Integer [PK], name:String, value:String);

charproperty(id:Integer [PK], name:String, value:Character);

embeddablewithmanytomany_hhh_11302_test();

embeddablewithonetomany_hhh_11302_test();

embeddablewithonetomany_hhh_8860_test();

embeddablewithonetomany_hhh_8564_test();

basicattributeoverridetest();

investor(id:Long [PK], investments:List<Investment>);

customer(id:Long [PK], investments:List<Investment>);

customer(id:Long [PK], investments:List<Investment>);

order(id:Integer [PK]);

a(GeneratedName:AId);

child(id:ChildPk);

orderline(GeneratedName:Order [PK], GeneratedName:Product [PK]);

parent(id:ParentPk);

tvprogramidclass(GeneratedName:Channel [PK], GeneratedName:Presenter [PK], time:Date, text:String);

tvmagazin(id:TvMagazinPk, time:Date);

tvprogram(id:TvMagazinPk, time:Date, text:String);

b(id:Long [PK]);

product(name:String [PK]);

littlegenius(particularskill:String);

compositeididentitytest();

channel(id:Integer [PK], name:String);

c(id:Long [PK]);

someentity(id:SomeEntityId [PK], prop:String);

presenter(name:String [PK]);

key(id:String [PK]);

card(id:String [PK]);

cardfield(GeneratedName:PrimaryKey);

codedpairholder(id:Long [PK], code:String, pair:PersonPair);

codedpairsetholder(serialversionuid:long, id:Long [PK], code:String, pairs:Set<PersonPair>);

tooth(id:Integer [PK], type:String, leftneighbour:Tooth #FK to(H), rightneighbour:Tooth #FK to(H), GeneratedName:Mouth #FK to(H));

mouth(id:Integer [PK], size:int);

person(serialversionuid:long, id:Long [PK], name:String);

child(/***/id:Long [PK], /***/:Parent #FK to(A));

parent(/***/id:Long [PK], /***/default:Child #FK to(D));

country(id:Integer [PK], name:String);

flight(id:Long [PK], name:String, transientduration:Long, version:Integer, GeneratedName:Company, triggereddata:String, factor:long, departure:Date, buydate:java.sql.Timestamp, alternativedeparturedate:Calendar);

a320b();

boy(id:Integer [PK], firstname:String, lastname:String, nicknames:Set<String>, hatednames:Set<String>, preferrednames:Set<String>, scorepernickname:Map<String,Integer>, scoreperpreferredname:Map<String,Integer>, favoritenumbers:int, favoritetoys:Set<Toy>, characters:Set<Character>, foods:Map<String,FavoriteFood>, countryattitudes:Set<CountryAttitude>);

bugsystem(id:Integer [PK], bugs:Set<Bug>);

matrix(id:Integer [PK], mvalues:SortedMap<Integer,Float>);

testcourse(testcourseid:Long [PK], title:LocalizedString);

person(id:Long [PK], name:String, nicknamesascendingnaturalsort:Set<String>, nicknamesdescendingnaturalsort:Set<String>, addressesascendingnaturalsort:Set<Address>, addressesdescendingnaturalsort:Set<Address>, addressescityascendingsort:Set<Address>, addressescitydescendingsort:Set<Address>);

poi(id:Integer [PK], name:String);

raceexecution(id:Integer [PK], poiarrival:Map<Poi,PoiArrival>);

c(id:int [PK], comment:String);

a(id:int [PK], listofb:List<B>);

products(id:Integer [PK], widgets:Set<Widgets>);

widgets(name:String, id:int [PK]);

entitywithanelementcollection(id:Long [PK], somestrings:Set<String>);

sale(id:Integer [PK], contacts:List<Contact>);

query(id:Long [PK], includedlocations:Set<Location>);

owner(id:Integer [PK], elements:Set<String>);

location(name:String [PK]);

phonenumber(id:int [PK], number:int);

trip();

employee(id:int [PK], GeneratedName:ContactInfo);

socialsite(id:int [PK], website:String);

addr(id:int [PK], street:String, city:String, state:String, country:String, zipcode:String);

inheritedattributeoverridingtest(GeneratedName:StandardServiceRegistry);

propertyrecord(id:Long [PK], parcels:Map<Address,PropertyInfo>, legacyparcels:Map<Address,PropertyInfo>, unsortedparcels:Set<PropertyInfo>, legacyunsortedparcels:Set<PropertyInfo>);

blogentry(text:String);

c(id:Long [PK], name:String);

parent(id:ParentPk [PK], age:int);

zoo(id:Long [PK], name:String);

employee(id:Integer [PK]);

model(id:Integer [PK], GeneratedName:Manufacturer #FK to(A));

onetomanytest();

post();

street(id:Integer [PK], streetname:String, streetnamecopy:String, GeneratedName:City);

organisationuser(sometext:String, GeneratedName:Organisation);

trainer(id:Integer [PK], name:String);

city(id:Integer [PK], name:String);

order(schoolid:String [PK], schoolidsort:Integer, academicyear:Integer [PK]);

child(id:Integer [PK], ismale:Parent #FK to(A), favoritesuperhero:String, favoritesinger:String);

b(id:Long [PK], name:String);

computer(computername:String);

politician(name:String [PK], party:PoliticalParty #FK to(A));

bankaccount(id:long [PK]);

person(idperson:Long [PK], firstname,lastname:String);

tiger(id:Integer [PK], name:String);

troop(id:Integer [PK], name:String);

user(id:Long [PK], name:String, GeneratedName:Forum);

orderitem(schoolid:String [PK], academicyear:Integer [PK], dayno:Integer [PK], dayname:String, GeneratedName:Order);

asset(idasset:Integer [PK], test:Integer [PK], GeneratedName:Employee #FK to(Employee));

a(id:Long [PK], name:String);

forum(id:Long [PK], name:String);

box(id:int [PK]);

politicalparty(name:String [PK]);



item(id:int [PK], code:String, sortfield:int, GeneratedName:Box #FK to(B));

visitor(id:Long [PK], firstname:String, lastname:String);

organisation(idorganisation:Long [PK], name:String);

monkey(id:Integer [PK], name:String);

transaction(id:long [PK], code:String, account:BankAccount #FK to(A));

soldier(id:Integer [PK], name:String, GeneratedName:Troop);

notfoundonetoonenoninsertablenonupdateabletest(id:int);

notfoundtest();

notfoundlogicalonetoonetest();

onetoonenotfoundtest();

alltables(tablename:String [PK], daysold:String);

dictionary(id:Integer [PK], name:String, editor:String);

area(id:Integer [PK], name:String);

casimirparticle(id:Long [PK]);

employee(id:Long [PK], GeneratedName:Employeegroup #FK to(Employee), GeneratedName:Attrset #FK to(A));

employeegroup(id:Long [PK], GeneratedName:Attrset #FK to(A));

night(id:Integer [PK], duration:long, GeneratedName:Date, GeneratedName:Area);

attrset(id:Long [PK]);

attrvalue(id:Long [PK], value:String);

namedquerytest(game_titles:String);

twilight(id:int [PK]);

spaceship(name:String [PK], model:String, speed:double, GeneratedName:Captain, GeneratedName:Dimensions);

captain(firstname:String [PK], lastname:String [PK]);

synonymousdictionary();

chaos(id:Long [PK], size:Long, name:String, nickname:String);

mark(id:int [PK], value:int);

company(id:Integer [PK], name:String);

user(id:int [PK], emailaddress:String, age:int, username:String, password:String, lockedout:boolean);

mammal(ispregnant:boolean);

human(iq:int);

human(iq:int);

mammal(ispregnant:boolean);

animal(id:Integer [PK], name:String);

mammal(ispregnant:boolean);

club(id:int [PK], name:String);

animal(id:Integer [PK], name:String);

human(iq:int, GeneratedName:Club #FK to(C));

mammal(ispregnant:boolean);

animal(id:Integer [PK], name:String);

human(iq:int);

dvd(id:MyOid [PK], title:String);

entity2(entity2_prop1:String, entity2_prop2:String, entity2_prop3:String, entity2_prop4:String, entity2_prop5:String, entity2_prop6:String);

entity1(entity1_prop1:String, entity1_prop2:String, entity1_prop3:String, entity1_prop4:String, entity1_prop5:String, entity1_prop6:String);

jpaoverriddenannotationreadertest();

administration(id:Integer [PK], firstname:String, lastname:String, address:String, version:Integer, transientfield:String, default:BusTrip #FK to(B));

bustrip(id:BusTripPk, status:Availability, serial:byte, terminustime:Date, players:Map<String,SocialSecurityPhysicalAccount>, roads:List);

match(competitor1point:String, version:Integer, playerassn:SocialSecurityNumber);

socialsecurityphysicalaccount(number:String, countrycode:String);

tennismatch();

socialsecuritymoralaccount(number:String, countrycode:String);

company(id:Long [PK], organizations:List<Organization>);

cuisine();

domainadmin(domainname:String [PK], adminuser:String [PK], nickname:String);

idclassmappedsuperclasstest();

stamp(id:Long [PK], country:String);

passport(id:Long [PK], name:String);

passport_stamp(Passport_ID:Passport [PK] #FK to Passport,A_ID:A [PK] #FK to A);passport_visastamp(Passport_ID:Passport [PK] #FK to Passport,A_ID:A [PK] #FK to A);

creationtimestamptest();

dress(id:Integer [PK]);

painter(id:Integer [PK]);

exchangerate(id:Integer [PK], rate:double, key:ExchangeRateKey, parent:ExchangeOffice);

version(id:Integer [PK], codename:String, number:String, GeneratedName:Software);

addressbook(id:Integer [PK], owner:String);

wardrobe(id:Long [PK]);

training(id:Long [PK]);

training_A(trainingID:training [PK] #FK to training,AID:A [PK] #FK to A);

generationuser(id:int [PK]);

trainee(id:Long [PK], name:String);

exchangeoffice(id:Integer [PK], exchangerates:Map<ExchangeRateKey,ExchangeRate>, exchangeratefees:Map<ExchangeRateKey,BigDecimal>);

atmosphere(id:Integer [PK], colorperdate:Map<Date,String>, colorperlevel:Map<Level,String>, composition:Map<Gas,Double>);

atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);

news(id:Integer [PK], title:String, detail:String);

gas(id:Integer [PK], name:String);

painting(sizex:int, sizey:int, name:String [PK], painter:String [PK]);

generationgroup(id:int [PK], GeneratedName:Generation);

newspaper(id:Integer [PK], name:String);

newspaper_A(newspaperID:newspaper [PK] #FK to newspaper,AID:A [PK] #FK to A);

alphabeticaldirectory(id:Integer [PK], name:String);

drawer(id:Long [PK]);

addressentry(person:AddressEntryPk, street:String, city:String, book:AddressBook #FK to(A), directory:AlphabeticalDirectory #FK to(A));

pressreleaseagency(id:Integer [PK], name:String);

pressreleaseagency_id(pressreleaseagency_id:PressReleaseAgency [PK] #FK to PressReleaseAgency,news_id:A [PK] #FK to A);

software(name:String [PK]);

atmosphere(id:Integer [PK], colorperdate:Map<Date,String>, colorperlevel:Map<Level,String>, composition:Map<Gas,Double>);

atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);

gaskey(name:String [PK]);

currency(id:Integer [PK], currency:String);

ticket(id:Long [PK], number:String);

highestbid(name:String [PK], amount:double);

bid(id:int [PK], itemid:long, amount:double);

item(id:long [PK], name:String);

mergenotnullcollectiontest();

display(id:Integer [PK], brand:String);

minmax(id:Long [PK], value:Integer);

color(id:Integer [PK], name:String);

screen(id:Integer [PK], stop:Button, GeneratedName:PowerSupply, connectors:Set<DisplayConnector>);

screen_E(screenID:screen [PK] #FK to screen,EID:E [PK] #FK to E);

music(name:String [PK]);

tvowner(id:Integer [PK], GeneratedName:Tv #FK to(tv));

rock(bit:Integer);

address(blacklistedzipcode:String, line1:String, line2:String, zip:String, state:String, country:String, id:long [PK], internalvalid:boolean, floor:int);

mergenotnullcollectionusingidentitytest();

cupholder(id:Integer [PK], radius:BigDecimal);

tv(serial:String [PK], model:String, size:int, name:String, exp:Date, description:String, lifetime:BigInteger, GeneratedName:Tuner, GeneratedName:Recorder);

range(id:Long [PK], value:Integer);

powersupply(id:Integer [PK], power:BigDecimal, position:String);

updatedetachedtest();

simplenationalizedtest();

usenationalizedchardatasettingtest();

stringnationalizedtest();

nationalizedlobfieldtest();

pageadvertisement(id:Integer [PK]);

advertisement(id:Integer [PK]);

attachment(id:Integer [PK], filename:String, deleted:String);

attachment_A(attachmentID:attachment [PK] #FK to attachment,AID:A [PK] #FK to A);

manytomanybidirectionaltest();

oraclestoredproceduretest();

hanastoredproceduretest();

phone(id:Long [PK], GeneratedName:Person #FK to(Person), number:String, repairtimestamps:List<Date>);

person(id:Long [PK], name:String, nickname:String, address:String, createdon:Date, version:int);

doesnotwork(serialversionuid:long, GeneratedName:DoesNotWorkPk, globadditinfotid:Long, globalnotes:List<String>);

issue(id:Long [PK], description:String, issuenumber:String);

varioustypesentity(id:Integer [PK], data:byte);

hibernateunproxytest();

concreteentity(content:String);

abstractentity(id:Integer [PK]);

lazyabstractentityreference(id:Integer [PK], entity:AbstractEntity #FK to(A));

proxyreferenceequalitytest();

multiplecollectionentity(id:Long [PK], text:String);

multiplecollectionrefentity1(id:Long [PK], text:String, GeneratedName:MultipleCollectionEntity #FK to(Entity), multiplecollectionentityid:Long);

alias(id:Integer [PK], alias:String);

character_alias(Alias_ID:Alias [PK] #FK to Alias,A_ID:A [PK] #FK to A);

character(id:Integer [PK], name:String);

multiplecollectionrefentity2(id:Long [PK], text:String, GeneratedName:MultipleCollectionEntity #FK to(Entity), multiplecollectionentityid:Long);

mergelistpreandpostpersistwithidentitytest();

mergelistpreandpostpersisttest();

product(id:String [PK], name:String, description:String, msrp:BigDecimal, version:int);

store(id:int [PK], name:String, version:int);

inventory(id:int [PK], GeneratedName:Store, GeneratedName:Product, quantity:Long, storeprice:BigDecimal);

cachelazyloadnotranstest();

sorttest();

abstractskipautocommittest(connectionprovider:PreparedStatementSpyConnectionProvider);

connectionsreleaseautocommittest(connectionprovider:ConnectionProviderDecorator, GeneratedName:Connection);

replicatetest();

defaultgeneratedvaluetest();

subselectfetchcollectionfrombatchtest();

hilooptimizerconcurrencytest(createschema:boolean, executor:ExecutorService);

saveentitytest();

sub();

super(id:Long [PK], value:Long);

identitygeneratorextendstest();

idgeneratornamesglobalscopetest();

idgeneratornameslocalscopetest();

naturalidcachingtest();

house(id:Long [PK], streetaddress:String);

phone(id:Integer [PK], brandname:String, price:float);

user(id:long [PK], //theseexistsolelyforhhh-8464toensurethatthevariousformsofquotingarenormalizedinternally//(usingbackticks),includingthejoincolumn.withoutnormalization,themappingwillthrowa//duplicatemappingexception.:House #FK to(E), house1:Long, house2:Long, //testukonfkw/globalquoting--seehhh-8638//thismustbeinitialized.severaldbsdonotallowmultiplenullvaluesinauniquecolumn.3:House #FK to(E));

user_E(userID:user [PK] #FK to user,EID:E [PK] #FK to E);

columndefinitionquotingtest();

role(id:long [PK]);

person(id:long [PK], name:String);

quotetest();

tablegeneratorquotingtest(serviceregistry:StandardServiceRegistry);

entitya(id:int [PK], name:String);

foreignkeyconstrainttest();

constrainttest(max_name_length:int, explicit_fk_name_native:String, explicit_fk_name_jpa:String, explicit_uk_name:String);

numericvalidationtest(jdbcmetadataextractorstrategy:String, ssr:StandardServiceRegistry);

synonymvalidationtest(ssr:StandardServiceRegistry);

jointablewithdefaultschematest();

tablenameswithunderscoretest();

longvarcharvalidationtest(jdbcmetadataextractorstrategy:String, ssr:StandardServiceRegistry);

viewvalidationtest(ssr:StandardServiceRegistry);

limitexpressiontest();

user(serialversionuid:long, id:Long [PK], name:String, GeneratedName:Contact);

contact(serialversionuid:long, id:Long [PK], name:String, emailaddresses:Set<EmailAddress>, emailaddresses2:Set<EmailAddress>);

email(id:Long [PK], address:String);

user(username:String [PK]);

idbagelementnullbasictest();

persistentbagcontainstest();

bagduplicatestest();

multiplebagfetchhqltest();

multiplebagfetchtest();

bagelementnullbasictest();

setelementnullbasictest();

listelementnullbasictest();

listindexreferencefromlistelementtest();

versionedcascadeone(id:long [PK], version:long);

many(id:long [PK]);

versionednocascadeone(id:long [PK], version:long);

unversionedcascadeone(id:long [PK]);

unversionednocascadeone(id:long [PK]);

lion();

animal(id:Long [PK], weight:long);

zoo(id:Long [PK], name:String, city:String, animals:Set<Animal>);

tiger(numberofstripes:int);

multiplesessioncollectionwarningtest(log:CoreMessageLogger, loginspection:LoggerInspectionRule);

multiplesessioncollectiontest();

setdelayedoperationtest(parentid:Long, childid1:Long, childid2:Long);

listaddtest();

bagdelayedoperationtest(parentid:Long);

listdelayedoperationtest(parentid:Long, childid1:Long, childid2:Long);

persistentmaptest();

multilingualstring(id:long [PK], map:Map<String,LocalizedString>);

mapvalue(log:Logger, id:Long [PK], name:String, previoushashcode:int);

mapkey(log:Logger, id:Long [PK], name:String, defaultvalue:MapValue #FK to(A), previoushashcode:int);

mapholder(id:Long [PK]);

map_key_map_value(map_holder_id:MapHolder [PK] #FK to MapHolder,map_value_id:PK [PK] #FK to PK);

multilingualstringparent(id:long [PK], parent:MultilingualStringParent #FK to(A), string:MultilingualString #FK to(A));

mapelementnullbasictest();

lazypersistwithdetachedassociationtest();

proxiedgetloadaccesstest();

basicgetloadaccesstest();

multiloadtest();

removeorderingtest();

mergemanagedandcopiesallowedtest();

aftercompletiontest();

beforecompletionfailuretest();

embeddedpktest();

crossenhancementtest();

basicsessiontest();

inheritedtest();

extendedassociationmanagementtest();

basicenhancementtest();

mappedsuperclasstest();

dirtytrackingtest();

dirtytrackingnonupdateabletest();

dirtytrackingcollectiontest();

initfromcachetest(persister:EntityPersister, documentid:Long);

onetomanyassociationtest();

manytomanyassociationtest();

onetooneassociationtest();

inheritedattributeassociationtest();

otherentityentrycontexttest();

ondemandloadtest();

hhh3949test();

detachedgetidentifiertest();

evictiontest();

cascadedetachedtest();

cascadewithfkconstrainttest(garageid,car1id,car2id:String);

cascadedeletetest();

lazybasicpropertyaccesstest(entity:LazyEntity, entityid:Long);

lazybasicfieldaccesstest(entity:LazyEntity, entityid:Long);

lazyloadingintegrationtest(children_size:int, lastchildid:Long);

lazycollectiondetachtest(children_size:int, parentid:Long);

uninitializedlazybasiccachetest(personid:Long);

uninitializedassociationsincachetest();

lazyincachetest(orderid:Long);

lazybasicfieldnotinitializedtest(entityid:Long);

lazyproxyonenhancedentitytest(parentid:Long);

lazygrouptest();

simplelazygroupupdatetest(really_big_:String);

lgmb_to(id:Long [PK], fromrelation:LGMB_From #FK to(G), name:String);

lgmb_from(name:String, //lazy-attributewithoutlazygroup-annotation(thereforedefault-lazygroup)bigtext:String, //lazy-associationwithmappdedbyinownlazygrouptorelation:LGMB_To #FK to(G), id:Long [PK]);

lazybasicfieldmergetest();

lazycollectionloadingtest(children_size:int, parentid:Long, GeneratedName:Parent);

unexpecteddeletetest3();

unexpecteddeletetest2(my:Bar);

unexpecteddeletetest1(fooid:long);

lazycollectiondeletedtest(postid:Long);

lazyloadingbyenhancersettertest(,merged:Item);

lazynotfoundonetoonetest(id:int);

lazyloadingtest(children_size:int, parentid:Long, lastchildid:Long);

compositemergetest(entityid:long);

mergeenhancedentitytest();

mixedaccesstest(param_:Pattern, mapping_function:Function<Map.Entry,String>, id:String);

theentity(id:Integer [PK], name:String);

validnocdisupporttest();

item(id:Long [PK], price:BigDecimal, description:String, quantity:Integer);

conversionautoapplytest();

querytest(salary:float);

theentity(id:Integer [PK], name:String, stock:Integer);

theentity(id:Integer [PK], name:String);

manytomanytarget(id:Integer [PK], name:String);

inheritancemanytomanyforeignkeytest();

manytomanyowner(id:Integer [PK], name:String);

none(none:ManyToManyOwner [PK] #FK to ManyToManyOwner,none:A [PK] #FK to A);

sessioncreatequeryfromcriteriatest();

mapsidonetooneselecttest();

bid(amount:float [PK], GeneratedName:Item [PK] #FK to(Item));

role(GeneratedName:Code [PK]);

seller(id:Integer [PK], name:String);

seller_customer(seller_id:Seller [PK] #FK to Seller,customer_id:Customer [PK] #FK to Customer);

customer(id:Integer [PK], name:String);

item(name:String [PK]);

criteriaaliasfetchtest();

listactionrole(role:Code [PK], GeneratedName:Role #FK to(E));

nationalizedscalarquerytest();

entitywithcompositekey(pk:CompositeKey);

structuredquerycachetest();

querycachejoinfetchtest();

entitywithstringcompositekey(pk:StringCompositeKey);

table1(id:long [PK]);

confentity(serialversionuid:long, confkey:String [PK], confvalue:String [PK]);

persistonlazycollectiontest(receipt_a:String, invoice_a:String, invoiceline_a:String, invoiceline_b:String);

table2(id:long [PK]);

userentity(serialversionuid:long, id:Long [PK], name:String);

userconfentity(serialversionuid:long, user:UserEntity [PK] #FK to(Entity), confkey:ConfEntity [PK] #FK to(Entity));

insertorderingwithcascadeonpersist();

insertorderingduplicatetest();

insertorderingwithunidirectionalonetoone(connectionprovider:PreparedStatementSpyConnectionProvider);

insertorderingwithbidirectionalmapsidonetoone(connectionprovider:PreparedStatementSpyConnectionProvider);

elementcollectiontest(connectionprovider:PreparedStatementSpyConnectionProvider);

insertorderingwithsingletableinheritance(connectionprovider:PreparedStatementSpyConnectionProvider);

insertorderinghasparenttest();

insertorderingwithbidirectionalonetooneflushproblem();

insertorderingwithmanytoone(connectionprovider:PreparedStatementSpyConnectionProvider);

insertorderingwithbidirectionalonetoone(connectionprovider:PreparedStatementSpyConnectionProvider);

insertorderingwithbaseclassreferencingsubclass();

insertorderingwithmultiplemanytoone(connectionprovider:PreparedStatementSpyConnectionProvider);

insertorderingwithbidirectionalmanytomany(connectionprovider:PreparedStatementSpyConnectionProvider);

insertorderingwithjoinedtableinheritance(connectionprovider:PreparedStatementSpyConnectionProvider);

insertorderingwithtableperclassinheritance(connectionprovider:PreparedStatementSpyConnectionProvider);

insertorderingwithbidirectionalonetomany(connectionprovider:PreparedStatementSpyConnectionProvider);

insertorderingwithbidirectionalonetomanyflushproblem();

insertorderingwithcompositetypeassociation();

insertorderingwithjoinedtablemultilevelinheritance(connectionprovider:PreparedStatementSpyConnectionProvider);

insertorderingwithsecondarytable();

identifiergeneratorwithnaturalidcachetest();

building(id:Integer [PK], name:String, address:String, city:String, state:String);

principal(id:Long [PK], uid:String);

user(username:String);

mappedsuperclassoverridetest();

user();

principal(id:Long [PK], uid:String);

extendedentity(extendedvalue:String);

myentity(id:Long [PK], uid:String);

c(oid:long [PK], name:String);

b(oid:long [PK], ss:A #FK to(A), naturalid:int);

d(oid:long [PK], name:String, assoiated:C #FK to(C));

a(oid:long [PK], ass:C #FK to(C), myname:String);

postalcarrier(id:Long [PK], GeneratedName:PostalCode);

another(id:Integer [PK], name:String, surname:String);

a(oid:long [PK], myname:String);

allcached(id:Integer [PK], name:String);

b(oid:long [PK], ss:A #FK to(A), naturalid:int);

hanaoptimisticlockingtest();

a(id:Long [PK], value:String);

locknonewarmingtest(GeneratedName:Triggerable, loginspection:LoggerInspectionRule);

abstractskiplockedtest();

door(id:Integer [PK], name:String);

qualifiedtablenamingtest();

sessionjdbcbatchtest(connectionprovider:PreparedStatementSpyConnectionProvider, id:long);

school(id:int [PK]);

student(id:Long [PK], GeneratedName:School #FK to(C), firstname:String, gpa:int);

championship(id:int [PK]);

schemafiltertest(serviceregistry:StandardServiceRegistryImpl, GeneratedName:Metadata);

sequencefiltertest(serviceregistry:StandardServiceRegistryImpl, GeneratedName:Metadata);

catalogfiltertest(GeneratedName:ServiceRegistry, GeneratedName:Metadata);

abstractbulkcompositeidtest();

abstractbulkidtest();

basicstreamtest();

jpastreamtest();

componentemptyembeddedowner(id:Integer [PK], embedded:ComponentEmptyEmbedded);

emptycompositecollectionkeyeagertest();

emptycompositemanytoonekeycachedtest();

emptycompositeequivalenttonulltest();

emptycompositemanytoonekeytest();

emptycompositecollectionkeylazytest();

selectbeforeupdateembeddedtest(i:OnFlushDirtyInterceptor);

person(id:int [PK], GeneratedName:Name);

component(id:Long [PK], emb:Component.Emb);

mapkeyattributeconvertertest();

mapkeyconversiontest();

mapelementconversiontest();

explicitlynamedconverterclassestest();

nullhandlingtests();

longtodateconversiontest();

simpleoverriddenconvertertest();

xmlwithexplicitconvertannotationstest(//note:essentiallythesameexacttestasexplicitdateconverterstest,butherewewillmixannotationsandxmlconverttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

simpleconvertannotationtest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

andlobtest(ssr:StandardServiceRegistry);

explicitenumconverterstest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

querytest(salary:float);

basicjodatimeconversiontest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

myentity(id:Integer [PK], customtype:MyCustomJavaType);

simplexmloverriddentest(ssr:StandardServiceRegistry);

explicitdateconverterstest(//note:initiallyunabletoreproducethereportedproblemconverttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

queryliteraltest();

address(id:Integer [PK], streetline1:String, streetline2:String, GeneratedName:PostalArea);

andnationalizedtests();

attributeconvertertest();

simpleconvertsannotationtest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

address(id:Integer [PK], streetline1:String, streetline2:String, GeneratedName:PostalArea);

simpleembeddableoverriddenconvertertest();

collectionelementconversiontest();

collectioncompositeelementexplicitconversiontest(ssr:StandardServiceRegistry, simplevalueattributeconverterdescriptor:Field);

collectioncompositeelementconversiontest();

collectionelementexplicitconversiontest();

elementcollectiontests();

parameterizedattributeconverterparametertypetest(ssr:StandardServiceRegistry);

dirtycheckingtest();

explicitjavatypedescriptortest(mutabletodatabasecallcount:int, mutabletodomaincallcount:int, immutabletodatabasecallcount:int, immutabletodomaincallcount:int, immutablemutabletodatabasecallcount:int, immutablemutabletodomaincallcount:int);

batchfetchnotfoundignoredefaultstyletest(statementinspector:AStatementInspector, number_of_employees:int, tasks:List<Task>);

b(idpart1:Integer [PK], idpart2:Integer [PK], otherproperty:String);

batchloadableentity(id:Integer [PK], name:String);

a(id:Integer [PK], otherproperty:String, GeneratedName:B #FK to(B));

joinedsubclassbatchingtest();

identityjoinedsubclassbatchingtest();

farm(id:long [PK], name:String, accreditations:Set<Accreditation>);

farm_C(farmID:farm [PK] #FK to farm,CID:C [PK] #FK to C);

castnullselectexpressiontest();

entityjointest();

department(deptno:Integer [PK], deptname:String);

collectionmapwithcomponentvaluetest(GeneratedName:KeyValue, GeneratedName:EmbeddableValue);

joinonclausetest();

casestatementtest();

employee(id:Integer [PK], firstname:String, lastname:String, GeneratedName:Title #FK to(E), GeneratedName:Department #FK to(A));

subquerytest();

insertwithsubselecttest();

parent(id:long [PK], value:String);

entity3(id:long [PK], value:String);

entity2(id:long [PK], GeneratedName:Entity3 #FK to(Entity), value:String);

child(id:long [PK], value:String);

grandchild(id:long [PK], value:String);

entity1(id:long [PK], GeneratedName:Entity2 #FK to(Entity), value:String);

querysplittertest();

entitywithunusualtablenamejointest();

coalescetest(GeneratedName:Person);

employee(employeenumber:String);

joinedsubclasssubquerytest();

person(id:Integer [PK], name:String);

crop(id:long [PK], name:String);

db297substringfunctionstest(GeneratedName:MostRecentStatementInspector);

queryparametersvalidationtest();

aggregatefunctionswithsubselecttest();

castfunctiontest();

trtpanel(id:Long [PK], GeneratedName:Panel #FK to(A), clientid:Long, deltastamp:String);

scrollabletest();

queryparametersvalidationarraytest();

tuplesupporttest(GeneratedName:SessionFactory);

parametercollectiontest();

title(id:Integer [PK], description:String);

sizeattributereferencetest();

panel(id:Long [PK], clientid:Long, deltastamp:String);

mapfunctionexpressionstest(querytranslatorfactory:ASTQueryTranslatorFactory);

withclausejoinrewritetest();

selectnewembeddedidtest();

collectioncacheevictionwithoutmappedbytest();

cacheditem1();

abstractcacheditem(id:Long [PK], name:String);

cacheditem2();

manytomanycollectioncacheevictiontest();

user(id:int [PK], version:int, name:String, GeneratedName:Company #FK to(A));

sharedregiontest();

nonrootentitywithcacheannotationtest(loginspection:LoggerInspectionRule);

refreshupdateddatatest();

referencecachetest();

nonrootentitywithcacheableannotationtest(loginspection:LoggerInspectionRule);

company(id:int [PK], name:String);

bytecodeenhancedimmutablereferencecachetest();

regionnametest(cacheprefix:String, localname:String, prefixedname:String, personrole:NavigableRole, personnamerole:NavigableRole, personnicknamesrole:NavigableRole);

it(key1:Integer [PK], key2:Integer [PK], name:String);

itwithpkclass(key1:Integer [PK], key2:Integer [PK], name:String);

entityupdatecachemodeignoretest();

cacheableitem(id:Long [PK], name:String);

iamafoo(id:long [PK], foo:String);

onetomanywithdynamicfiltertest();

filterdotnametest();

manytomanywithdynamicfiltertest();

criteriaquerywithappliedfiltertest(student_id:Identifier);

filterwitsubselectfetchmodetest();

lineentity(id:long [PK], GeneratedName:Line);

jdbctimedefaulttimezonetest(connectionprovider:PreparedStatementSpyConnectionProvider);

jdbctimestampcustomsessionleveltimezonetest(connectionprovider:PreparedStatementSpyConnectionProvider, time_zone:TimeZone);

jdbctimestampcustomtimezonetest(connectionprovider:PreparedStatementSpyConnectionProvider, time_zone:TimeZone);

jdbctimecustomtimezonetest(connectionprovider:PreparedStatementSpyConnectionProvider, time_zone:TimeZone);

jdbctimestampwithoututctimezonetest(connectionprovider:TimeZoneConnectionProvider);

localdatecustomsessionleveltimezonetest(time_zone:TimeZone, connectionprovider:ConnectionProviderDelegate);

jdbctimestampdefaulttimezonetest(connectionprovider:PreparedStatementSpyConnectionProvider);

wildflyddlentity(id:Integer [PK], name:String);

isolatedevictableentity(id:Integer [PK], name:String);

employee(fetch_profile_tree:String, id:Long [PK], manager:Employee #FK to(Employee));

entityloadedintwophaseloadtest(fetch_profile_name:String);

collectionloadedintwophaseloadtest(//note//therearetwofetchprofilesbecausewheniuseonlyonetherelationorgunit.people//ismissinginthefetchprofile.//itismissingbecauseoflogicinfetchprofile.addfetch().donotunderstandtheimplementation//ofthemethodnow,sotheworkaroundistousetwofetchprofiles.fetch_profile_name:String, fetch_profile_name_2:String, ou_1:String, ou_2:String, p_1:String, p_2:String);

classwithidentitycolumn(id:long [PK], name:String);

group(id:Integer [PK], name:String);

onetooneeagernonoptionalorphanremovaltest();

onetooneeagerorphanremovaltest();

onetoonelazynonoptionalorphanremovaltest();

onetoonelazyorphanremovaltest();

treatkeywordtest();

destinationentity(id:Integer [PK], from:FromEntity #FK to(Entity), fullnamefrom:String);

identificationvariablestest();

fromentity(id:Integer [PK], name:String, lastname:String);

subclassonlycachingtests();

inheritedcacheabletest();

cachingwithsecondarytablestests(sessionfactory:SessionFactoryImplementor);

orderbyannotationtests(element_token:String, table_alias:String, column_name:String);

tablegeneratorvisibilitytest();

storedprocedureapitests();

location(id:Integer [PK], code:String, GeneratedName:Company);

company(id:Integer [PK], name:String, locations:Set<Location>);

generatedvaluetests();

mapkeycolumnelementcollectiontest();

mapkeycolumnonetomanyfktest();

mapkeycolumnonetomanyjointabletest();

mapkeycolumnmanytomanytest();

mapkeycolumnbidionetomanyfktest();

getterandismethodchecks();

tablegeneratormultipledefinitiontest();

queryapitest();

queryexecutiontest();

irrelevantentity(id:Integer [PK], name:String);

annotationentity(_id:Long [PK]);

associateentitywithtwosessionstest(loginspection:LoggerInspectionRule);

informixfunctiontest(GeneratedName:Event);

extrastatetest(/***storingitasafieldsoitcanbeaccessedfromtheentitysetter.*/:Session);

embeddablecallbacktest();

mergecontexttest(session:EventSource);

preinserteventlistenervetobidirectionaltest();

preinserteventlistenervetounidirectionaltest();

idclassmanytoonecascadetest();

quotedidentifiertest();

generatedvaluetest();

customsqlschemaresolvingidentitytest();

customsqlschemaresolvingtest();

abstractschemasubstitutionformulatest(schema_placeholder:String);

in(id:long [PK], prop:String);

any(id:long [PK], prop:String);

defaultenhancementcontext();

resultsetmappingsecondpass(log:CoreMessageLogger, ann:SqlResultSetMapping, context:MetadataBuildingContext, isdefault:boolean);

entitybinder(log:CoreMessageLogger, natural_id_cache_suffix:String, context:MetadataBuildingContext, name:String, annotatedclass:XClass, GeneratedName:PersistentClass, discriminatorvalue:String, forcediscriminator:Boolean, insertablediscriminator:Boolean, dynamicinsert:boolean, dynamicupdate:boolean, explicithibernateentityannotation:boolean, GeneratedName:OptimisticLockType, GeneratedName:PolymorphismType, selectbeforeupdate:boolean, batchsize:int, lazy:boolean, proxyclass:XClass, where:String, secondarytables:java.util.Map<String,Join>, secondarytablejoins:java.util.Map<String,Object>, filters:List<Filter>, GeneratedName:InheritanceState, ignoreidannotations:boolean, property:AccessType, wrapidsinembeddedcomponents:boolean, subselect:String, iscached:boolean, cacheconcurrentstrategy:String, cacheregion:String, cachelazyproperty:boolean, naturalidcacheregion:String, sec_tbl_ns_helper:SecondaryTableNamingStrategyHelper);

annotationbinder(log:CoreMessageLogger);

classpropertyholder(GeneratedName:PersistentClass, joins:Map<String,Join>, joinsperrealtablename:Map<String,Join>, GeneratedName:EntityBinder, inheritancestateperclass:Map<XClass,InheritanceState>, attributeconversioninfomap:Map<String,AttributeConversionInfo>);

product(id:ProductId [PK], number:String, GeneratedName:Facility, PRODUCT_TYPE: String);

employee(id:Long [PK], name:String, salary:double, Employee: String);

parententity(id:Long [PK], CLASS_ID: String);

person(id:Long [PK], person_type: String);

step(, type: String);

file(name:String [PK], parent:Folder #FK to(D));

drill(id:int [PK], DRILL_TYPE: String);

hardware(parent:Hardware #FK to(A), DeviceType: String);

b(id:Integer [PK], GeneratedName:A);

plane(id:Long [PK], nbrofseats:int, planetype: String);

comment(id:Long [PK], GeneratedName:Post, name:String, GeneratedName:Forum, DTYPE: String);

animal(id:Long [PK], mother:Animal #FK to(A), father:Animal #FK to(A), name:String, born:Date);



** PROGRAM TYPE: JPA+Hibernate(Hybrid)