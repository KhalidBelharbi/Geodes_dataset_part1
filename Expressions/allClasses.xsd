<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
   <xs:complexType name="logback-test" >
      <xs:sequence>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="evaluatorstest" >
      <xs:sequence>
        <xs:element name="GeneratedName" type="xs:anyType" />
        <xs:element name="xb" type="expressionbuilder" nillable="true" minOccurs="0" />
        <xs:element name="pb" type="predicatebuilder" nillable="true" minOccurs="0" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="expressionstestsuite" >
      <xs:sequence>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="querytest" >
      <xs:sequence>
        <xs:element name="GeneratedName" type="xs:anyType" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="simpleparameterevaluatortest" >
      <xs:complexContent>
       <xs:extension base="number>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="xb" type="expressionbuilder" nillable="true" minOccurs="0" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatetest" >
      <xs:sequence>
        <xs:element name="GeneratedName" type="xs:anyType" />
        <xs:element name="xb" type="expressionbuilder" nillable="true" minOccurs="0" />
        <xs:element name="pb" type="predicatebuilder" nillable="true" minOccurs="0" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="getterevaluator" >
      <xs:complexContent>
       <xs:extension base="evaluator{">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="fieldsingularattribute" >
      <xs:complexContent>
       <xs:extension base="fieldattribute<x,t>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="type" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="entitytypeimpl" >
      <xs:complexContent>
       <xs:extension base="managedtypeimpl<x>">
         <xs:sequence>
          <xs:element name="hassingleidattribute" type="xs:anyType" />
          <xs:element name="hasversionattribute" type="xs:anyType" />
          <xs:element name="declaredid" type="xs:anyType" />
          <xs:element name="declaredversion" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="methodsetattribute" >
      <xs:complexContent>
       <xs:extension base="methodattribute<x,">
         <xs:sequence>
          <xs:element name="elementtype" type="xs:anyType" />
          <xs:element name="elementclass" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="methodsingularattribute" >
      <xs:complexContent>
       <xs:extension base="methodattribute<x,t>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="type" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="fieldsetattribute" >
      <xs:complexContent>
       <xs:extension base="fieldattribute<x,set<t>>">
         <xs:sequence>
          <xs:element name="elementtype" type="xs:anyType" />
          <xs:element name="elementclass" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="metamodelimpl" >
      <xs:sequence>
        <xs:element name="managedtypes" type="xs:anyType" />
        <xs:element name="entitytypes" type="xs:anyType" />
        <xs:element name="embeddabletypes" type="xs:anyType" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="managedtypeimpl" >
      <xs:sequence>
        <xs:element name="managedtype" type="xs:anyType" />
        <xs:element name="metamodel" type="metamodelimpl" nillable="true" minOccurs="0" />
        <xs:element name="GeneratedName" type="xs:anyType" />
        <xs:element name="attributemap" type="xs:anyType" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="attributeproformaadapter" >
      <xs:sequence>
        <xs:element name="attr" type="xs:anyType" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="generatorframe" >
      <xs:complexContent>
       <xs:extension base="jframe">
         <xs:sequence>
          <xs:element name="/***http://zetcode.com/tutorials/javaswingtutorial/menusandtoolbars/*/serialversionuid" type="xs:long" />
          <xs:element name="" type="xs:anyType" />
          <xs:element name="" type="xs:anyType" />
          <xs:element name="" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="staticmetamodelclassadapter" >
      <xs:sequence>
        <xs:element name="GeneratedName" type="xs:anyType" />
        <xs:element name="managedtype" type="xs:anyType" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="staticmetamodelgenarator" >
      <xs:complexContent>
       <xs:extension base="",">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="embeddabletypeimpl" >
      <xs:complexContent>
       <xs:extension base="managedtypeimpl<x>">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="typeimpl" >
      <xs:sequence>
        <xs:element name="javatype" type="xs:anyType" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="fieldattribute" >
      <xs:sequence>
        <xs:element name="GeneratedName" type="xs:anyType" />
        <xs:element name="managedtype" type="xs:anyType" />
        <xs:element name="GeneratedName" type="xs:anyType" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="methodattribute" >
      <xs:sequence>
        <xs:element name="GeneratedName" type="xs:anyType" />
        <xs:element name="managedtype" type="xs:anyType" />
        <xs:element name="GeneratedName" type="xs:anyType" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="evaluator" >
      <xs:sequence>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="predicatebuilder" >
      <xs:complexContent>
       <xs:extension base="comparable<?">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatege" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="value1" type="xs:anyType" />
          <xs:element name="value2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatelessthan" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="expr1" type="xs:anyType" />
          <xs:element name="expr2" type="xs:anyType" />
          <xs:element name="comp" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicateequals" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="value1" type="xs:anyType" />
          <xs:element name="value2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicateand" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="predicates" type="k2predicate" nillable="true" minOccurs="0" />
          <xs:element name="boolexpr1" type="xs:anyType" />
          <xs:element name="boolexpr2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicategt" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="value1" type="xs:anyType" />
          <xs:element name="value2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicategreaterthan" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="expr1" type="xs:anyType" />
          <xs:element name="expr2" type="xs:anyType" />
          <xs:element name="comp" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicategreaterthanorequalto" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="expr1" type="xs:anyType" />
          <xs:element name="expr2" type="xs:anyType" />
          <xs:element name="comp" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatein" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="expr" type="xs:anyType" />
          <xs:element name="s" type="xs:anyType" />
          <xs:element name="expressions" type="xs:anyType" />
          <xs:element name="collection" type="xs:anyType" />
          <xs:element name="collectionexpr" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatelessthanorequalto" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="expr1" type="xs:anyType" />
          <xs:element name="expr2" type="xs:anyType" />
          <xs:element name="comp" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="k2predicate" >
      <xs:complexContent>
       <xs:extension base="the">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="abstractpredicate" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<boolean>">
         <xs:sequence>
          <xs:element name="negated" type="xs:anyType" />
          <xs:element name="operator" type="xs:anyType" />
          <xs:element name="expressions" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicateistrue" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="bool" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatebetween" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="check" type="xs:anyType" />
          <xs:element name="beginexpr" type="xs:anyType" />
          <xs:element name="endexpr" type="xs:anyType" />
          <xs:element name="begin" type="xs:anyType" />
          <xs:element name="end" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatenot" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="expr" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatelike" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="stringexp" type="xs:anyType" />
          <xs:element name="patternexp" type="xs:anyType" />
          <xs:element name="escapecharexp" type="xs:anyType" />
          <xs:element name="pattern" type="xs:string" />
          <xs:element name="escape" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatefalse" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatenull" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="expr" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatetrue" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatenotnull" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="expr" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicateisfalse" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="bool" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicateor" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="predicates" type="k2predicate" nillable="true" minOccurs="0" />
          <xs:element name="boolexpr1" type="xs:anyType" />
          <xs:element name="boolexpr2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatelt" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="value1" type="xs:anyType" />
          <xs:element name="value2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="predicatele" >
      <xs:complexContent>
       <xs:extension base="abstractpredicate">
         <xs:sequence>
          <xs:element name="value1" type="xs:anyType" />
          <xs:element name="value2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="queryparameters" >
      <xs:sequence>
        <xs:element name="parameters" type="xs:anyType" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="criteriaqueryimpl" >
      <xs:sequence>
        <xs:element name="cls" type="xs:anyType" />
        <xs:element name="roots" type="xs:anyType" />
        <xs:element name="distinct" type="xs:anyType" />
        <xs:element name="metamodel" type="metamodelimpl" nillable="true" minOccurs="0" />
        <xs:element name="restriction" type="xs:anyType" />
        <xs:element name="GeneratedName" type="queryparameters" nillable="true" minOccurs="0" />
        <xs:element name="selection" type="xs:anyType" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="collectionjoinimpl" >
      <xs:complexContent>
       <xs:extension base="joinimpl<r,t>">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="rootimpl" >
      <xs:complexContent>
       <xs:extension base="fromimpl<t,t>">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="setjoinimpl" >
      <xs:complexContent>
       <xs:extension base="joinimpl<r,t>">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="pathimpl" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<t>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="attr" type="xs:anyType" />
          <xs:element name="parentpath" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="mapjoinimpl" >
      <xs:complexContent>
       <xs:extension base="joinimpl<r,t>">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="pathevaluator" >
      <xs:complexContent>
       <xs:extension base="evaluator{">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="joinimpl" >
      <xs:complexContent>
       <xs:extension base="fromimpl<r,t>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="fromimpl" >
      <xs:complexContent>
       <xs:extension base="pathimpl<t>">
         <xs:sequence>
          <xs:element name="metamodel" type="metamodelimpl" nillable="true" minOccurs="0" />
          <xs:element name="joins" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="listjoinimpl" >
      <xs:complexContent>
       <xs:extension base="joinimpl<r,t>">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="criteriabuilderimpl" >
      <xs:complexContent>
       <xs:extension base="number>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="metamodel" type="metamodelimpl" nillable="true" minOccurs="0" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprliteral" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<t>">
         <xs:sequence>
          <xs:element name="lieral" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprsqrt" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<double>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="num" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprnullliteral" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<t>">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprquot" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<number>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="num1exp" type="xs:anyType" />
          <xs:element name="num2exp" type="xs:anyType" />
          <xs:element name="num1" type="xs:anyType" />
          <xs:element name="num2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprtrim" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<string>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="string" type="xs:anyType" />
          <xs:element name="trimcharexp" type="xs:anyType" />
          <xs:element name="trim" type="xs:anyType" />
          <xs:element name="" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprtobigdecimal" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<bigdecimal>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="num" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprtobiginteger" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<biginteger>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="num" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprcurrentdate" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<date>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="expressionbuilder" >
      <xs:complexContent>
       <xs:extension base="number>">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprabsolute" >
      <xs:complexContent>
       <xs:extension base="number>">
         <xs:sequence>
          <xs:element name="num" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="abstractexpression" >
      <xs:complexContent>
       <xs:extension base="t>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="alias" type="xs:string" />
          <xs:element name="name" type="xs:string" />
          <xs:element name="javatype" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprnullif" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<y>">
         <xs:sequence>
          <xs:element name="expr1" type="xs:anyType" />
          <xs:element name="expr2" type="xs:anyType" />
          <xs:element name="value2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprlength" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<integer>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="string" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="currenttime" >
      <xs:sequence>
        <xs:element name="utildate" type="xs:anyType" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="k2parameterexpression" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<t>">
         <xs:sequence>
          <xs:element name="pos" type="xs:anyType" />
          <xs:element name="" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprneg" >
      <xs:complexContent>
       <xs:extension base="number>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="num" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprdifference" >
      <xs:complexContent>
       <xs:extension base="number>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="numexp1" type="xs:anyType" />
          <xs:element name="numexp2" type="xs:anyType" />
          <xs:element name="num1" type="xs:anyType" />
          <xs:element name="num2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="getterexpression" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<t>">
         <xs:sequence>
          <xs:element name="getter" type="xs:anyType" />
          <xs:element name="" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprtointeger" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<integer>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="expr" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="expras" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<t>">
         <xs:sequence>
          <xs:element name="source" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprtofloat" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<float>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="expr" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="k2expression" >
      <xs:complexContent>
       <xs:extension base="expression<t>">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprtodouble" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<double>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="expr" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprprod" >
      <xs:complexContent>
       <xs:extension base="number>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="num1exp" type="xs:anyType" />
          <xs:element name="num2exp" type="xs:anyType" />
          <xs:element name="um1" type="xs:anyType" />
          <xs:element name="um2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprlocate" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<integer>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="stringexp" type="xs:anyType" />
          <xs:element name="patternexp" type="xs:anyType" />
          <xs:element name="fromexp" type="xs:anyType" />
          <xs:element name="pattern" type="xs:string" />
          <xs:element name="from" type="xs:long" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprtolong" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<long>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="expr" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprtoboolean" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<boolean>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="expr" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprcurrenttimestamp" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<timestamp>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprtostring" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<string>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="expr" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprlower" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<string>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="string" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprtodate" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<date>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="expr" type="xs:anyType" />
          <xs:element name="formatexpr" type="xs:anyType" />
          <xs:element name="format" type="xs:string" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprsubstring" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<string>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="stringexp" type="xs:anyType" />
          <xs:element name="fromexp" type="xs:anyType" />
          <xs:element name="from" type="xs:anyType" />
          <xs:element name="lengthexp" type="xs:anyType" />
          <xs:element name="length" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprconcatenate" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<string>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="stringexp1" type="xs:anyType" />
          <xs:element name="stringexp2" type="xs:anyType" />
          <xs:element name="1" type="xs:string" />
          <xs:element name="2" type="xs:string" />
          <xs:element name="stringsources" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprcurrentsqldate" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<date>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprmod" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<integer>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="num1expr" type="xs:anyType" />
          <xs:element name="num2expr" type="xs:anyType" />
          <xs:element name="num1" type="xs:anyType" />
          <xs:element name="num2" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprcurrenttime" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<time>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="exprupper" >
      <xs:complexContent>
       <xs:extension base="abstractexpression<string>">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
          <xs:element name="string" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="expressionerror" >
      <xs:complexContent>
       <xs:extension base="error">
         <xs:sequence>
          <xs:element name="serialversionuid" type="xs:long" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="queryevaluator" >
      <xs:complexContent>
       <xs:extension base="simpleparameterevaluator">
         <xs:sequence>
          <xs:element name="qry" type="xs:anyType" />
          <xs:element name="machroo" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="paramterorobjectevaluator" >
      <xs:complexContent>
       <xs:extension base="the">
         <xs:sequence>
          <xs:element name="" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="simpleparameterevaluator" >
      <xs:sequence>
        <xs:element name="requiredparameters" type="xs:anyType" />
        <xs:element name="parametervalues" type="xs:anyType" />
        <xs:element name="/***thisfieldholdsareferencetoaninstanceofcurrenttime.*thisfieldispopulatedandreturnedonthefirstcalltoget()forthisinstanceandthenreturnedon*subsequentlycallstogetcurrenttime.**consequentlycallstogetcurrenttimeforaparticularinstanceofsimpleparameterevaluatorwillalwaysreturnthesametime*thisensuresthatcomparisonsbetweentimeswillalwayscomparetothesamevalueofcurrenttimeforthesameevaluator*/" type="currenttime" nillable="true" minOccurs="0" />
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="genericevaluator" >
      <xs:complexContent>
       <xs:extension base="the">
         <xs:sequence>
          <xs:element name="valusourc" type="xs:anyType" />
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="objectorparameterevaluator" >
      <xs:complexContent>
       <xs:extension base="the">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="parameterevaluator" >
      <xs:complexContent>
       <xs:extension base="evaluator{">
         <xs:sequence>
         </xs:sequence>
       </xs:extension>
      </xs:complexContent>
   </xs:complexType>
</xs:schema> 