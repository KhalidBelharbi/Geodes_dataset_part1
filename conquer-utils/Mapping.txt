ClassDiagram.Class>> Aluno =>=>=> RelationalSchema.Table>> aluno;
ClassDiagram.Class>> ProdutoCursos =>=>=> RelationalSchema.Table>> produtocursos;
ClassDiagram.Class>> Produto =>=>=> RelationalSchema.Table>> produto;
ClassDiagram.Class>> Turma =>=>=> RelationalSchema.Table>> turma;
ClassDiagram.Class>> Curso =>=>=> RelationalSchema.Table>> curso;
ClassDiagram.Class>> Venda =>=>=> RelationalSchema.Table>> venda;
ClassDiagram.Class>> Matricula =>=>=> RelationalSchema.Table>> matricula;
ClassDiagram.Attribut>> Aluno.id:Long =>=>=> RelationalSchema.Column>> aluno.id PRIMARY KEY;
ClassDiagram.Attribut>> Aluno.cpf:String =>=>=> RelationalSchema.Column>> aluno.cpf;
ClassDiagram.Attribut>> Aluno.nome:String =>=>=> RelationalSchema.Column>> aluno.nome;
ClassDiagram.Attribut>> Produto.id:Long =>=>=> RelationalSchema.Column>> produto.id PRIMARY KEY;
ClassDiagram.Attribut>> Produto.codigoproduto:String =>=>=> RelationalSchema.Column>> produto.codigoproduto;
ClassDiagram.Attribut>> Produto.nomeproduto:String =>=>=> RelationalSchema.Column>> produto.nomeproduto;
ClassDiagram.Attribut>> Produto.ativo:boolean =>=>=> RelationalSchema.Column>> produto.ativo;
ClassDiagram.Attribut>> Turma.id:Long =>=>=> RelationalSchema.Column>> turma.id PRIMARY KEY;
ClassDiagram.Attribut>> Turma.codigoturma:String =>=>=> RelationalSchema.Column>> turma.codigoturma;
ClassDiagram.Attribut>> Turma.vagasdisponiveis:Long =>=>=> RelationalSchema.Column>> turma.vagasdisponiveis;
ClassDiagram.Attribut>> Turma.datainicio:Date =>=>=> RelationalSchema.Column>> turma.datainicio;
ClassDiagram.Attribut>> Curso.id:Long =>=>=> RelationalSchema.Column>> curso.id PRIMARY KEY;
ClassDiagram.Attribut>> Curso.codigocurso:String =>=>=> RelationalSchema.Column>> curso.codigocurso;
ClassDiagram.Attribut>> Curso.nomecurso:String =>=>=> RelationalSchema.Column>> curso.nomecurso;
ClassDiagram.Attribut>> Curso.descricaocurso:String =>=>=> RelationalSchema.Column>> curso.descricaocurso;
ClassDiagram.Attribut>> Curso.cargahoraria:Long =>=>=> RelationalSchema.Column>> curso.cargahoraria;
ClassDiagram.Attribut>> Curso.precocurso:Double =>=>=> RelationalSchema.Column>> curso.precocurso;
ClassDiagram.Attribut>> Curso.tipocurso:EnumTipoCurso =>=>=> RelationalSchema.Column>> curso.tipocurso;
ClassDiagram.Attribut>> Venda.id:Long =>=>=> RelationalSchema.Column>> venda.id PRIMARY KEY;
ClassDiagram.Attribut>> Venda.codigovenda:String =>=>=> RelationalSchema.Column>> venda.codigovenda;
ClassDiagram.Attribut>> Venda.valorvenda:Double =>=>=> RelationalSchema.Column>> venda.valorvenda;
ClassDiagram.Attribut>> Venda.datavenda:Date =>=>=> RelationalSchema.Column>> venda.datavenda;
ClassDiagram.Attribut>> Venda.situacaopagamento:EnumSituacaoPagamento =>=>=> RelationalSchema.Column>> venda.situacaopagamento;
ClassDiagram.Attribut>> Matricula.id:Long =>=>=> RelationalSchema.Column>> matricula.id PRIMARY KEY;
ClassDiagram.Attribut>> Matricula.datamatricula:Date =>=>=> RelationalSchema.Column>> matricula.datamatricula;
ClassDiagram.Attribut>> Matricula.codigomatricula:String =>=>=> RelationalSchema.Column>> matricula.codigomatricula;
ClassDiagram.Attribut>> Matricula.situacaomatricula:EnumSituacaoMatricula =>=>=> RelationalSchema.Column>> matricula.situacaomatricula;
list<turma>: aluno_list<turma>(alunoID:aluno [PK] #FK to aluno,list<turma>ID:list<turma> [PK] #FK to list<turma>);
list<curso>: produto_list<curso>(produtoID:produto [PK] #FK to produto,list<curso>ID:list<curso> [PK] #FK to list<curso>);
Many-To-One relationship from ClassDiagram.Class>>Turma  to ClassDiagram.Class>>curso represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Venda  to ClassDiagram.Class>>aluno represented by ClassDiagram.Atrribute>>GeneratedName;
list<produto>: venda_list<produto>(vendaID:venda [PK] #FK to venda,list<produto>ID:list<produto> [PK] #FK to list<produto>);
Many-To-One relationship from ClassDiagram.Class>>Matricula  to ClassDiagram.Class>>aluno represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Matricula  to ClassDiagram.Class>>turma represented by ClassDiagram.Atrribute>>//@columndefault(value;
Many-To-One relationship from ClassDiagram.Class>>Matricula  to ClassDiagram.Class>>curso represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Matricula  to ClassDiagram.Class>>venda represented by ClassDiagram.Atrribute>>GeneratedName;
