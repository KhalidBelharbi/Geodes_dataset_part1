ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Task =>=>=> RelationalSchema.Table>> task;
ClassDiagram.Attribut>> Category.id:Long =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.title:String =>=>=> RelationalSchema.Column>> category.title;
ClassDiagram.Attribut>> Category.dateofcreation:LocalDateTime =>=>=> RelationalSchema.Column>> category.dateofcreation;
ClassDiagram.Attribut>> Category.dateofupdate:LocalDateTime =>=>=> RelationalSchema.Column>> category.dateofupdate;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.login:String =>=>=> RelationalSchema.Column>> user.login;
ClassDiagram.Attribut>> User.lastname:String =>=>=> RelationalSchema.Column>> user.lastname;
ClassDiagram.Attribut>> User.firstname:String =>=>=> RelationalSchema.Column>> user.firstname;
ClassDiagram.Attribut>> User.middlename:String =>=>=> RelationalSchema.Column>> user.middlename;
ClassDiagram.Attribut>> User.birthday:LocalDate =>=>=> RelationalSchema.Column>> user.birthday;
ClassDiagram.Attribut>> User.dateofcreation:LocalDateTime =>=>=> RelationalSchema.Column>> user.dateofcreation;
ClassDiagram.Attribut>> User.dateofupdate:LocalDateTime =>=>=> RelationalSchema.Column>> user.dateofupdate;
ClassDiagram.Attribut>> Task.id:Long =>=>=> RelationalSchema.Column>> task.id PRIMARY KEY;
ClassDiagram.Attribut>> Task.title:String =>=>=> RelationalSchema.Column>> task.title;
ClassDiagram.Attribut>> Task.description:String =>=>=> RelationalSchema.Column>> task.description;
ClassDiagram.Attribut>> Task.deadline:LocalDateTime =>=>=> RelationalSchema.Column>> task.deadline;
ClassDiagram.Attribut>> Task.iscompleted:boolean =>=>=> RelationalSchema.Column>> task.iscompleted;
ClassDiagram.Attribut>> Task.dateofcreation:LocalDateTime =>=>=> RelationalSchema.Column>> task.dateofcreation;
ClassDiagram.Attribut>> Task.dateofupdate:LocalDateTime =>=>=> RelationalSchema.Column>> task.dateofupdate;
Many-To-Many relationship between ClassDiagram.Class>>Category  and ClassDiagram.Class>>list<task>: task_category(task_id:Category [PK] #FK to Category,category_id:list<task> [PK] #FK to list<task>);
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Task>;
Many-To-One relationship from ClassDiagram.Class>>Task  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
