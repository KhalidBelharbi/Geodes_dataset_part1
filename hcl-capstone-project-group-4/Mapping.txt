ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> OrderItem =>=>=> RelationalSchema.Table>> orderitem;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Attribut>> Role.id:long =>=>=> RelationalSchema.Column>> role.id PRIMARY KEY;
ClassDiagram.Attribut>> Role.type:String =>=>=> RelationalSchema.Column>> role.type;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Product.brand:String =>=>=> RelationalSchema.Column>> product.brand;
ClassDiagram.Attribut>> Product.inventory:int =>=>=> RelationalSchema.Column>> product.inventory;
ClassDiagram.Attribut>> Product.price:float =>=>=> RelationalSchema.Column>> product.price;
ClassDiagram.Attribut>> Product.image:Blob =>=>=> RelationalSchema.Column>> product.image;
ClassDiagram.Attribut>> Product.description:String =>=>=> RelationalSchema.Column>> product.description;
ClassDiagram.Attribut>> Order.id:long =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.timeoforder:Date =>=>=> RelationalSchema.Column>> order.timeoforder;
ClassDiagram.Attribut>> Order.GeneratedName:OrderStatus =>=>=> RelationalSchema.Column>> order.GeneratedName;
ClassDiagram.Attribut>> Order.total:double =>=>=> RelationalSchema.Column>> order.total;
ClassDiagram.Attribut>> Address.id:long =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.firstname:String =>=>=> RelationalSchema.Column>> address.firstname;
ClassDiagram.Attribut>> Address.lastname:String =>=>=> RelationalSchema.Column>> address.lastname;
ClassDiagram.Attribut>> Address.//addressline1streetaddr:String =>=>=> RelationalSchema.Column>> address.//addressline1streetaddr;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.state:String =>=>=> RelationalSchema.Column>> address.state;
ClassDiagram.Attribut>> Address.zipcode:int =>=>=> RelationalSchema.Column>> address.zipcode;
ClassDiagram.Attribut>> User.id:long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.firstname:String =>=>=> RelationalSchema.Column>> user.firstname;
ClassDiagram.Attribut>> User.lastname:String =>=>=> RelationalSchema.Column>> user.lastname;
ClassDiagram.Attribut>> User.phonenumber:String =>=>=> RelationalSchema.Column>> user.phonenumber;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.enabled:boolean =>=>=> RelationalSchema.Column>> user.enabled;
ClassDiagram.Attribut>> OrderItem.orderid:long =>=>=> RelationalSchema.Column>> orderitem.orderid PRIMARY KEY;
ClassDiagram.Attribut>> OrderItem.quantity:int =>=>=> RelationalSchema.Column>> orderitem.quantity;
ClassDiagram.Attribut>> Category.id:long =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.name:String =>=>=> RelationalSchema.Column>> category.name;
Many-To-Many relationship between ClassDiagram.Class>>Product  and ClassDiagram.Class>>list<category>: product_category(product_id:Product [PK] #FK to Product,category_id:list<category> [PK] #FK to list<category>);
Many-To-One relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>shippingaddrid;
Many-To-One relationship from ClassDiagram.Class>>Address  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>/*thewaythisclassiscurrentlysetup,eachaddressisassociatedwithone,whomayhavemanyaddresses.	thenameintheaddressentityneednotbethesameasthe'sname,incasetheshipssomething	toanotherperson,orifabillingaddresshasadifferentnameassociatedwithit*/;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Address>;
Many-To-Many relationship between ClassDiagram.Class>>User  and ClassDiagram.Class>>list<role>: user_role(user_id:User [PK] #FK to User,role_id:list<role> [PK] #FK to list<role>);
Many-To-One relationship from ClassDiagram.Class>>OrderItem  to ClassDiagram.Class>>product represented by ClassDiagram.Atrribute>>id;
