proxyinterfacetest();

cuisine();

optimisticlocktypedirtytest();

optimisticlocktest();

optimisticlockingtimestamptest();

optimisticlocktypealltest();

versionsourcetest();

optimisticlockinginstanttest();

optimisticlockingtest();

explicitlockingtest();

embeddableimplicitoverridetest();

targettest();

simpleembeddableequivalenttest();

parenttest();

embeddableoverridetest();

nestedembeddabletest();

simpleembeddabletest();

assignedidentifiertest();

embeddedidtest();

sequencegeneratornamedtest();

idclassmanytoonetest();

entitytablecatalogtest();

sequencegeneratorconfiguredtest();

mutablenaturalidtest();

tablegeneratorunnamedtest();

uuidgeneratedvaluetest();

embeddedidmanytoonetest();

idclassgeneratedvaluetest();

rowidtest();

naiveequalshashcodeentitytest();

event(id:EventId [PK], key:String, value:String);

multiplenaturalidtest();

naturalidequalshashcodeentitytest();

cacheablenaturalidtest();

compositenaturalidtest();

tablegeneratorconfiguredtest();

idclasstest();

entitytableschematest();

sequencegeneratorunnamedtest();

pooledoptimizertest();

idmanytoonetest();

simplenaturalidtest();

simpleentitytabletest();

simpleentitytest();

generatedidentifiertest();

book(id:Long [PK], title:String, author:String);

uuidcustomgeneratedvaluetest();

periodstringtest(GeneratedName:Period);

moneyconvertertest();

blobbytearraytest();

quotingtest();

explicittypetest();

explicitcolumnnamingtest();

explicitbasictypetest();

bitsettypetest();

formulatest();

nclobtest();

blobtest();

datewithtemporaltimetest();

calendarwithtemporaltimestamptest();

autoquotingtest();

clobstringtest();

parenttest();

targettest();

columntransformertest();

bitsettypedeftest();

nclobstringtest();

localdatetimewithtemporaltimetest();

bitsetusertypetest();

phonetypeenumeratedstringtest();

instantliteraltest();

typecategorytest();

clobchararraytest();

phonetypeenumeratedordinaltest();

jpaquotingtest();

implicitbasictypetest();

nclobchararraytest();

subselecttest();

nationalizedtest();

enumerationconvertertest();

clobtest();

datewithtemporaltimestamptest();

enumerationcustomtypetest();

datewithtemporaldatetest();

book(id:Long [PK], title:String, author:String);

generatortypetest();

databasevaluegenerationtest();

generatedtest();

updatetimestamptest();

inmemoryvaluegenerationtest();

creationtimestamptest();

propertyaccesstest();

embeddableaccesstest();

elementcollectionaccesstest();

fieldaccesstest();

propertyaccessoverridetest();

nodynamicupdatetest();

filtersqlfragementaliastest();

phone(id:Long [PK], number:String, owner:Person #FK to(Person));

filterjointabletest();

dynamicupdatetest();

multiloadidtest(GeneratedName:SQLStatementInterceptor);

cascadeondeletetest();

wheretest();

persistencecontexttest();

cascadeondeletecollectiontest();

wherejointabletest();

person(id:Long [PK], name:String);

bytecodeenhancementtest();

filtertest();

listenertest();

interceptortest(GeneratedName:Logger);

defaultentitylistenertest();

selectdistincttest();

postgresqlfunctionselectclausetest();

postgresqlfunctionwhereclausetest();

mapkeytypetest();

unidirectionalcomparatorsortedsettest();

basictypeelementcollectiontest();

bidirectionalmaptest();

ordercolumnlistindexbasetest();

basictypeordercolumnelementcollectiontest();

unidirectionalmaptest();

unidirectionalsettest();

elementcollectionmaptest();

unidirectionalordercolumnlisttest();

orderedbysqltest();

bidirectionalsettest();

unidirectionalsortedsettest();

queuetest();

basictypecollectiontest();

bidirectionalbagorphanremovaltest();

bidirectionalorderbylisttest();

bidirectionalordercolumnlisttest();

bidirectionalcomparatorsortedsettest();

embeddabletypeelementcollectiontest();

unidirectionalbagtest();

arraytest();

unidirectionalorderedbylisttest();

bidirectionalbagtest();

mapkeyclasstest();

bidirectionalsortedsettest();

bootstraptest(emf:EntityManagerFactory, //tag::bootstrap-jpa-compliant-persistenceunit-configurable-example:EntityManagerFactory, //tag::bootstrap-jpa-compliant-persistencecontext-exampleem:EntityManager, //tag::bootstrap-jpa-compliant-persistencecontext-configurable-example:EntityManager);

criteriatest();

explicitpolymorphismtest();

mappedsuperclasstest();

jointabletest();

tableperclasstest();

singletabletest();

jointableprimarykeyjoincolumntest();

singletablediscriminatorformulatest();

discriminatoroptionsnotnullsingletabletest();

discriminatornotnullsingletabletest();

onetomanyunidirectionaltest();

manytomanyunidirectionaltest();

onetomanybidirectionaltest();

onetooneprimarykeyjoincolumntest();

onetoonebidirectionallazytest();

joincolumnorformulatest();

compositeidassociationtest();

manytomanybidirectionalwithlinkentitytest();

derivedidentifiertest();

onetoonebidirectionaltest();

integerproperty(id:Long [PK], name:String, value:Integer);

stringproperty(id:Long [PK], name:String, value:String);

propertyrepository(id:Long [PK], properties:List<Property<?>>);

propertyholder(id:Long [PK], GeneratedName:Property);

manytoonetest();

derivedidentifierprimarykeyjoincolumntest();

notfoundtest();

joinformulatest();

bidirectionaltwoonetomanymapsidtest();

onetoonemapsidtest();

unidirectionalmanytomanyremovetest();

manytomanybidirectionaltest();

onetooneunidirectionaltest();

transactionstest();

abstractmultitenancytest(front_end_tenant:String, back_end_tenant:String, connectionprovidermap:Map<String,ConnectionProvider>, GeneratedName:SessionFactory);

databasetimezonemultitenancytest(front_end_tenant:String, back_end_tenant:String, connectionprovidermap:Map<String,ConnectionProvider>, timezonetenantmap:Map<String,TimeZone>, GeneratedName:SessionFactory);

jmxtest();

secondlevelcachetest();

firstlevelcachetest();

nonstrictreadwritecachetest();

modifiedflagsaudittest();

validitystrategyaudittest();

defaultaudittest();

entitytypechangeaudittest();

queryaudittest();

entitytypechangeaudittrackingrevisionlistenertest();

queryauditwithmodifiedflagtest();

queryauditadresscountrytest();

customrevisionentitytest();

entitytypechangeauditdefaulttrackingtest();

columndefaulttest();

schemagenerationtest();

uniqueconstrainttest();

indextest();

checktest();

customsqlsecondarytabletest();

spaceship(name:String [PK], model:String, speed:double, firstname:Captain #FK to(captain), GeneratedName:Dimensions);

oraclecustomsqlwithstoredproceduretest();

collectionloadertest();

customsqltest();

captain(id:Identity);

fetchmodesubselecttest();

profilefetchingtest();

batchfetchingtest();

graphfetchingtest();

fetchingtest();

directvsqueryfetchingtest();

graphparsingtest();

fetchmodejointest();

lazycollectiontest();

fetchmodeselecttest();

spatialtest(GeneratedName:GeometryFactory);

collectionimmutabilitytest();

entityimmutabilitytest();

book(id:Integer [PK], title:String, GeneratedName:Author #FK to(author));

author(id:Integer [PK]);

flushordertest();

manualflushtest();

commitflushtest();

alwaysflushtest();

autoflushtest();

hibernateautoflushtest();

person(id:Long [PK], name:String, nickname:String, address:String, createdon:Date, addresses:Map<AddressType,String>, version:int);

payment(id:Long [PK], amount:BigDecimal, completed:boolean, GeneratedName:Person #FK to(Person));

creditcardpayment();

image(id:Long [PK], content:byte);

phone(id:Long [PK], GeneratedName:Person #FK to(Person), number:String, type:PhoneType, repairtimestamps:List<Date>);

wiretransferpayment();

call(id:Long [PK], GeneratedName:Phone #FK to(Phone), timestamp:Date, duration:int);

partner(id:Long [PK], name:String, version:int);

event(id:Long [PK], title:String, GeneratedName:Date);

datapoint(id:long [PK], name:String);

datapoint(id:long [PK], name:String);

datapoint(id:long [PK], name:String);

event(id:Long [PK], title:String, GeneratedName:Date);

event(id:Long [PK], title:String, GeneratedName:Date);



** PROGRAM TYPE: JPA+Hibernate(Hybrid)