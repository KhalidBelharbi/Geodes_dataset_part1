ClassDiagram.Class>> cidadeModel =>=>=> RelationalSchema.Table>> cidademodel;
ClassDiagram.Class>> pessoaExternaModel =>=>=> RelationalSchema.Table>> pessoaexternamodel;
ClassDiagram.Class>> AlunoModel =>=>=> RelationalSchema.Table>> alunomodel;
ClassDiagram.Class>> PessoaModel =>=>=> RelationalSchema.Table>> pessoamodel;
ClassDiagram.Class>> AreaModel =>=>=> RelationalSchema.Table>> areamodel;
ClassDiagram.Class>> pessoaInternaModel =>=>=> RelationalSchema.Table>> pessoainternamodel;
ClassDiagram.Class>> servidorModel =>=>=> RelationalSchema.Table>> servidormodel;
ClassDiagram.Class>> campusModel =>=>=> RelationalSchema.Table>> campusmodel;
ClassDiagram.Class>> PalestranteModel =>=>=> RelationalSchema.Table>> palestrantemodel;
ClassDiagram.Class>> estadoModel =>=>=> RelationalSchema.Table>> estadomodel;
ClassDiagram.Class>> cursoModel =>=>=> RelationalSchema.Table>> cursomodel;
ClassDiagram.Attribut>> AlunoModel.idaluno:int =>=>=> RelationalSchema.Column>> alunomodel.idaluno;
ClassDiagram.Attribut>> PessoaModel.idpessoa:long =>=>=> RelationalSchema.Column>> pessoamodel.idpessoa PRIMARY KEY;
ClassDiagram.Attribut>> PessoaModel.nome:String =>=>=> RelationalSchema.Column>> pessoamodel.nome;
ClassDiagram.Attribut>> PessoaModel.email:String =>=>=> RelationalSchema.Column>> pessoamodel.email;
ClassDiagram.Attribut>> PessoaModel.idade:int =>=>=> RelationalSchema.Column>> pessoamodel.idade;
ClassDiagram.Attribut>> PessoaModel.cpf:long =>=>=> RelationalSchema.Column>> pessoamodel.cpf;
ClassDiagram.Attribut>> PessoaModel.rg:String =>=>=> RelationalSchema.Column>> pessoamodel.rg;
ClassDiagram.Attribut>> AreaModel.idarea:int =>=>=> RelationalSchema.Column>> areamodel.idarea PRIMARY KEY;
ClassDiagram.Attribut>> AreaModel.nome:String =>=>=> RelationalSchema.Column>> areamodel.nome;
ClassDiagram.Attribut>> pessoaInternaModel.dataingresso:Date =>=>=> RelationalSchema.Column>> pessoainternamodel.dataingresso;
ClassDiagram.Attribut>> servidorModel.siape:long =>=>=> RelationalSchema.Column>> servidormodel.siape;
ClassDiagram.Attribut>> servidorModel.cargo:String =>=>=> RelationalSchema.Column>> servidormodel.cargo;
ClassDiagram.Attribut>> PalestranteModel.siape:long =>=>=> RelationalSchema.Column>> palestrantemodel.siape;
ClassDiagram.Attribut>> cursoModel.idcurso:int =>=>=> RelationalSchema.Column>> cursomodel.idcurso PRIMARY KEY;
ClassDiagram.Attribut>> cursoModel.nome:String =>=>=> RelationalSchema.Column>> cursomodel.nome;
ClassDiagram.Attribut>> cursoModel.cargahoraria:String =>=>=> RelationalSchema.Column>> cursomodel.cargahoraria;
Many-To-One relationship from ClassDiagram.Class>>pessoaExternaModel  to ClassDiagram.Class>>cidadeModel represented by ClassDiagram.Atrribute>>cidade;
Many-To-One relationship from ClassDiagram.Class>>pessoaExternaModel  to ClassDiagram.Class>>estadomodel represented by ClassDiagram.Atrribute>>estado;
One-To-Many relationship from ClassDiagram.Class>>AreaModel  to ClassDiagram.Class>>List<PalestranteModel>;
Many-To-One relationship from ClassDiagram.Class>>servidorModel  to ClassDiagram.Class>>areamodel represented by ClassDiagram.Atrribute>>area;
Many-To-One relationship from ClassDiagram.Class>>PalestranteModel  to ClassDiagram.Class>>areamodel represented by ClassDiagram.Atrribute>>area;
Many-To-Many relationship between ClassDiagram.Class>>cursoModel  and ClassDiagram.Class>>AlunoModel: curso(idcurso:cursoModel [PK] #FK to cursoModel,idaluno:AlunoModel [PK] #FK to AlunoModel);
Many-To-One relationship from ClassDiagram.Class>>cursoModel  to ClassDiagram.Class>>servidormodel represented by ClassDiagram.Atrribute>>servidor;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>PessoaModel  ;
