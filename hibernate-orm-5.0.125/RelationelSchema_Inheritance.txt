customer(id:Long [PK], version:long);

order(id:Long [PK], GeneratedName:Customer #FK to(Customer), version:long);

subject(id:long [PK], name:String);

getandisvariantgettertest(ssr:StandardServiceRegistry);

item(itemnumber:int [PK]);

order(ordernumber:int [PK]);

mergecontexttest(session:EventSource);

group(id:Integer [PK], name:String);

classwithidentitycolumn(id:long [PK], name:String);

item(id:Long [PK], price:BigDecimal, description:String, quantity:Integer);

fromentity(id:Integer [PK], name:String, lastname:String);

destinationentity(id:Integer [PK], from:FromEntity #FK to(FromEntity), fullnamefrom:String);

treatkeywordtest();

identificationvariablestest();

nationalizedignorecasetest();

farm(id:long [PK], name:String, accreditations:Set<Accreditation>);

farm_Crop(farmID:farm [PK] #FK to farm,CropID:Crop [PK] #FK to Crop);

child(id:long [PK], value:String);

parent(id:long [PK], value:String);

entity1(id:long [PK], GeneratedName:Entity2 #FK to(Entity), value:String);

grandchild(id:long [PK], value:String);

entity3(id:long [PK], value:String);

entity2(id:long [PK], GeneratedName:Entity3 #FK to(Entity), value:String);

department(deptno:Integer [PK], deptname:String);

trtpanel(id:Long [PK], GeneratedName:Panel #FK to(Panel), clientid:Long, deltastamp:String);

castnullselectexpressiontest();

subquerytest();

castfunctiontest();

person(id:Integer [PK], name:String);

joinedsubclasssubquerytest();

employee(employeenumber:String);

crop(id:long [PK], name:String);

employee(id:Integer [PK], firstname:String, lastname:String, GeneratedName:Title #FK to(Title), GeneratedName:Department #FK to(Part));

casestatementtest();

panel(id:Long [PK], clientid:Long, deltastamp:String);

sizeattributereferencetest();

tuplesupporttest(GeneratedName:SessionFactory);

title(id:Integer [PK], description:String);

mapfunctionexpressionstest(querytranslatorfactory:ASTQueryTranslatorFactory);

querysplittertest();

proxyinterfaceclassloadertest();

parent1(id:Long [PK]);

child2(id:Long [PK]);

child1(id:Long [PK]);

queryhintsqlserver2012test();

queryhinttest();

child(id:Long [PK], GeneratedName:Parent);

parent(id:Long [PK]);

invalidenumeratedjavatypetest();

joinedsubclasswithimplicitdiscriminatortest();

joinedsubclasswithexplicitdiscriminatortest();

joinedsubclasswithignoredexplicitdiscriminatortest();

parent(id:Long [PK], GeneratedName:Child #FK to(Child));

child(GeneratedName:Parent [PK] #FK to(Parent));

atable(firstid:Integer [PK]);

tablea(id:int [PK], test:String, test2:String);

nonbatchingbatchfailuretest();

batchingbatchfailuretest();

employeegroup(id:EmployeeGroupId [PK]);

employee(id:Long [PK], name:String);

oraclelonglobtypetest();

sqlserver2008nvarchartypetest(ssr:StandardServiceRegistry, metadata:MetadataImplementor, GeneratedName:SchemaExport);

annotatedmaster(id:Integer [PK], name:String, detail_domain:AnnotatedDetail #FK to(Detail));

annotateddetail(id:Integer [PK], name:String, //becauseotherwiseschemaexportwouldnotknowaboutit...domain:String);

customer(id:Long [PK], name:String);

invoice(id:Long [PK]);

customer(salesperson:Employee #FK to(Employee), comments:String);

person(id:long [PK], name:String, address:String, zip:String, country:String, heightinches:double, sex:char);

employee(title:String, salary:BigDecimal, manager:Employee #FK to(Employee));

user(login:String, passwordexpirydays:Double, silly:String);

usenationalizedchardatasettingtest();

nationalizedlobfieldtest();

simplenationalizedtest();

stringnationalizedtest();

voice(id:Integer [PK]);

gsm(frequency:int);

classc();

c();

b(id:int [PK]);

classb();

d(id:D_PK);

classd();

classa(id:int [PK]);

a(id:A_PK);

passport(id:Long [PK], number:String, owner:Customer #FK to(Customer));

language(serialversionuid:long, name:String, code:String [PK]);

manufacturer(id:ManufacturerId [PK], name:String);

product(serialversionuid:long, id:Integer [PK], productidnf:String, description:String, product_idnf:Product #FK to(C));

menu(serialversionuid:long, id:Integer [PK], ordernbr:String, isdefault:String);

productsqlserver(serialversionuid:long, id:Integer [PK], productidnf:String, description:String, product_idnf:ProductSqlServer #FK to(C));

fooditem(id:Integer [PK], item:String, order_nbr:Menu #FK to(Menu));

company(serialversionuid:long, id:int [PK], GeneratedName:Person);

model(id:ModelId [PK], name:String);

person(serialversionuid:long, id:int [PK], companyid:int, defaultflag:String);

message(serialversionuid:long, id:int [PK], languagecode:String, languagename:String, GeneratedName:Language);

contract(contractnumber:String, //integercompanycodeid:ContractId, GeneratedName:Manufacturer, GeneratedName:Model);

a(id:String [PK], name:String, value:int, address:Set<AddressEntry>);

address(id:long [PK], GeneratedName:Person #FK to(Person));

person(id:long [PK]);

parent(id:ParentPk [PK], age:int);

foresttype(id:Integer [PK], name:String, biggestrepresentative:BiggestForest #FK to(B));

order(id:Integer [PK], ordernbr:String);

child(id:Integer [PK], ismale:Parent #FK to(Parent));

districtuser(id:Long [PK], createdby:Long, createdon:Date, ctvusers_key:User #FK to(User), ldtmd:Long, pmtmp:Long);

biggestforest(id:Integer [PK], type:ForestType #FK to(ForestType));

lotz(lotpk:LotzPK, name:String, location:String);

deal(id:Integer [PK], userid:Customer #FK to(Customer), userid:Customer #FK to(Customer));

vendor();

zitemcost(GeneratedName:Item, GeneratedName:Vendor, cost:BigDecimal);

item();

warehouseitem(GeneratedName:Item, GeneratedName:Vendor, vendor_id:ZItemCost #FK to(Item), qtyinstock:BigDecimal);

color(id:Integer [PK], name:String);

car(id:Integer [PK], body:Color, owner:Parent #FK to(Parent));

treetype(id:Integer [PK], name:String, GeneratedName:ForestType, alternative:ForestType);

orderline(id:Integer [PK], item:String, GeneratedName:Order, replacement:Order);

frame(id:Long [PK], name:String, lowername:String);

customer(id:Integer [PK], userid:String);

lens(id:Long [PK], focal:float, length:float, name:Frame #FK to(A));

user(userkey:Long [PK], start:Date [PK], end:Date [PK], createdby:Long, createdon:Date, userid:String, prefix:Integer, firstname:String, lastname1:String, lastname2:String, middlename1:String, middlename2:String, suffix:Integer, birth:Date, birthstate:Integer, birthcountry:Integer, username:String, password:String, usertype:Integer, privilege:Integer, state:Integer, country:Integer, preferredname:String, birthplace:String, school:Long, cluster:Long, ldtmm:Long, ldtmd:Long, pmtmp:Long);

carz(id:Integer [PK], make:String, model:String, manufactured:Date, loc_code:Lotz #FK to(Lotz));

node(id:NodePk [PK], description:String, parent:Node #FK to(Node));

leaf(id:Integer [PK], GeneratedName:Branch #FK to(C));

branch(id:Integer [PK]);

stay(//memberdeclarationid:int, GeneratedName:Person, old:Person, veryold:Person, start:Date, end:Date, vessel:String, authoriser:String, comments:String);

person(//memberdeclarationid:int, firstname:String, lastname:String, companyname:String);

myentity(id:Long [PK], name:String);

clothes(id:Integer [PK], type:String, flavor:String);

item(id:int [PK]);

rambler(id:Integer [PK], name:String);

house(id:Integer [PK], address:String, GeneratedName:Postman);

address(address:House [PK] #FK to House,name:B [PK] #FK to B);

vendor(id:int [PK]);

luggage(id:Integer [PK], owner:String, type:String);

inhabitant(id:Integer [PK], name:String);

warehouseitem(id:int [PK], GeneratedName:Item, GeneratedName:Vendor, vendor_id:ItemCost #FK to(Item), qtyinstock:BigDecimal);

itemcost(id:int [PK], GeneratedName:Item, GeneratedName:Vendor, cost:BigDecimal);

place(id:int [PK], name:String, owner:String);

houseplaces(id:int [PK], GeneratedName:Places, neighbour:Places);

bag(id:Integer [PK], serial:String, fld_name:Rambler #FK to(B));

postman(name:String, id:String [PK]);

car(id:long [PK], model:String, region_code:MarketRegion #FK to(A));

sportcar();

marketregion(id:long [PK], regioncode:String);

parenthierarchy22();

childhierarchy22();

childhierarchy1();

parenthierarchy1();

father(id:Integer [PK]);

mother(id:Integer [PK]);

son(id:Integer [PK], GeneratedName:Father, GeneratedName:Mother);

sky(id:Integer [PK], maincloud:CloudType #FK to(C));

sky_C(skyID:sky [PK] #FK to sky,CID:C [PK] #FK to C);

aimpl(serialversionuid:long, aid:Integer [PK]);

primeminister(id:Integer [PK], name:String, current:Government);

bimpl(serialversionuid:long, bid:Integer);

zimpl(serialversionuid:long, zid:Integer [PK], GeneratedName:B);

manufacturer(id:Integer [PK]);

formallastname(id:Integer [PK], GeneratedName:LastName, designation:String);

forest2(id:Integer [PK], name:String, longdescription:String);

ransom(id:Integer [PK], kidnappername:String, amount:MonetaryAmount, GeneratedName:Date);

drill(id:int [PK]);

narrative(id:int [PK], state:String, GeneratedName:Topic);

car(id:int [PK], name:String);

communitybid(communitynote:Starred);

address(id:Integer [PK], city:String, GeneratedName:Country);

powerdrill();

washingmachine(id:Integer [PK], transientisactive:boolean);

zipcode(code:String [PK]);

name(id:Integer [PK], GeneratedName:LastName);

tree(id:Integer [PK], name:String);

flight(id:Long [PK], maxaltitudeinmilimeter:long, maxaltitude:long);

month(id:int [PK], year:int, month:int);

player(id:int [PK], name:String, team:SoccerTeam #FK to(C), //fortheworldcupofoneversusonematches,wehave//teamswithoneplayer(1v1team).onevoneteam:SoccerTeam);

forest(id:Integer [PK], name:String, length:long, longdescription:String, smalltext:String, bigtext:String, GeneratedName:Country, near:Set);

localcontactdetails(id:int [PK], local:PhoneNumber, GeneratedName:OverseasPhoneNumber);

peugot();

race(length:Long, id:Integer [PK]);

topic(id:int [PK]);

bid(id:Integer [PK], description:String, note:Starred, editorsnote:Starred, approved:Boolean);

soccerteam(id:int [PK], name:String, onevone:Player #FK to(A));

contactdetails(id:int [PK], local:PhoneNumber, GeneratedName:OverseasPhoneNumber);

apple();

tomato(size:int);

vegetable(id:VegetablePk [PK], priceincent:long);

document(size:int);

folder();

symboliclink(target:File #FK to(File));

pool(id:Integer [PK], address:PoolAddress);

financialasset(price:double);

client(serialversionuid:long, street:String, code:String, city:String, id:Account #FK to(C));

person(id:int [PK], name:String, firtsname:String);

clothing(id:long [PK], size:int, color:String);

symboliclink(target:File #FK to(File));

propertyasset(price:double);

document(size:int);

customer(customername:String, customercode:String);

programexecution(id:Integer [PK], action:String, applieson:File #FK to(File));

folder();

asset(id:Integer [PK], GeneratedName:Parent);

file(name:String [PK], parent:Folder #FK to(D));

sweater(issweat:boolean);

parent(id:Integer [PK], propertyass:Set, financialass:Set);

eventinformation(notificationid:String [PK]);

company(companyname:String, companyaddress:String);

account(serialversionuid:long, id:int [PK], number:String, balance:double);

alarm(eventinfo:EventInformation #FK to(A));

swimmingpool();

document(size:int);

folder();

symboliclink(target:File #FK to(File));

file(name:String [PK], parent:Folder #FK to(D));

carrot(length:int);

baseclass(id:long [PK]);

subclass2();

baseclass2(id:long [PK]);

subclass();

music(id:Integer [PK], avgbeat:int, type:Integer);

papertrash();

rock();

funk(starred:int);

building(id:Integer [PK], street:String);

duplicateddiscriminatorvaluetest(discriminator_value:String);

house();

noise();

trash(id:Integer [PK]);

fruit(id:Integer [PK]);

collectionasbasictest();

country(id:Integer [PK], name:String);

customer3(id:long [PK], name:String, customernumber:long);

order(id:long [PK], ordernumber:long, delivery:Date, GeneratedName:Country #FK to(Country));

customer2(id:long [PK], name:String, customernumber:long);

customer4(id:long [PK], name:String, customernumber:long);

supporttickets(id:long [PK], description:String, resolution:String);

customer5(id:long [PK], name:String, customernumber:long);

customer(id:long [PK], name:String, customernumber:long, last:Order #FK to(Order));

state(id:Integer [PK], name:String);

foobar(id:Integer [PK], name:String);

country(id:Integer [PK], name:String);

importer(id:long [PK], name:String);

car_importer(Importer_ID:Importer [PK] #FK to Importer,Car_ID:Car [PK] #FK to Car);

car(id:long [PK], brand:String, producer:String, since:long, GeneratedName:Dealer, otherdealers:Set<Dealer>);

component(manufacturerpartnumber:String, manufacturerid:Long, id:Long [PK]);

robot(name:String);

product();

t800(targetname:String);

machine(id:Integer [PK], weight:Double);

cardfield(GeneratedName:PrimaryKey [PK], tmp:Card #FK to(Car));

project(id:int [PK]);

customers(serialversionuid:long, customerid:int [PK]);

cardkey(id:int [PK]);

coursestudent(GeneratedName:Course [PK] #FK to(C), GeneratedName:Student [PK] #FK to(D), value:String);

b(parent:C [PK], sequencenumber:int [PK]);

c(prent:A [PK], sequencenumber:int [PK]);

a(id:int [PK]);

droitacces(idpk:BigInteger [PK], idpkbenef:Benefserv #FK to(B));

benefserv(idpk:BigInteger [PK], idpkser:Service #FK to(C));

acces(idpk:BigInteger [PK], idpkdracc:Droitacces #FK to(C));

service(idpk:BigInteger [PK]);

shoppingbaskets(serialversionuid:long, customerid:Customers [PK] #FK to(Customer), basketdatetime:java.util.Date [PK]);

customer(id:Integer [PK], serialversionuid:long);

card(primarykey:CardPrimaryKey [PK], main:CardField #FK to(Car));

storecustomer(GeneratedName:Store [PK] #FK to(Store), GeneratedName:Customer [PK] #FK to(Customer), serialversionuid:long);

course(id:int [PK], name:String);

basketitems(serialversionuid:long, basketdatetime:ShoppingBaskets [PK] #FK to(B), cost:Double [PK]);

student(id:int [PK], name:String);

store(id:Integer [PK], serialversionuid:long);

discount(id:Long [PK], discount:double, owner:Customer #FK to(Customer));

entitywithnestedembeddables(id:Integer [PK], embeda:EmbeddableA);

vanillaswap(/***identifieroftheinterestrateswap*/instrumentid:String, /***oftheswap(andofbothlegs).*/:Currency, /***fixedleg(cashflowswiththefixedrate).*/:FixedLeg, /***floatingleg(cashflowsboundtoafinancialindex).*/:FloatLeg);

wealthyperson(vacationhomes:Set<Address>, legacyvacationhomes:Set<Address>, explicitvacationhomes:Set<Address>);

favoritethings(id:int [PK], web:InternetFavorites);

person(id:Integer [PK], name:String, GeneratedName:Address, bornin:Country);

book(isbn:String [PK], name:String, GeneratedName:Summary);

addresstype(id:Integer [PK], name:String);

spreaddeal(/***withthetenor.*/long:Swap, /***withthelongertenor.*/short:Swap);

nationality(id:Integer [PK], name:String);

regionalarticle(pk:RegionalArticlePk [PK], name:String);

corptype(id:Integer [PK], type:String);

internetprovider(id:Integer [PK], brandname:String, owner:LegalStructure);

person(id:Long [PK], name:String, GeneratedName:Address);

country(iso2:String [PK], name:String);

manager(id:Integer [PK], name:String, employer:InternetProvider #FK to(D));

person(id:Long [PK], name:PersonName);

alias(id:Long [PK], GeneratedName:Name, source:String);

wildentity(serialversionuid:long, id:int [PK], property:String);

gene(id:Integer [PK], state:STE);

dna(id:Integer [PK]);

someguy(id:Integer [PK]);

price(id:Integer [PK], amount:Double, currency:String);

dummy(id:Long [PK]);

papertype(id:Integer [PK], name:String);

paper();

classes();

tennismatch();

administration(id:Integer [PK], firstname:String, lastname:String, address:String, version:Integer, transientfield:String, default:BusTrip #FK to(B));

jpaoverriddenannotationreadertest();

match(competitor1point:String, version:Integer, playerassn:SocialSecurityNumber);

socialsecurityphysicalaccount(number:String, countrycode:String);

bustrip(id:BusTripPk, status:Availability, serial:byte, terminustime:Date, players:Map<String,SocialSecurityPhysicalAccount>, roads:List);

socialsecuritymoralaccount(number:String, countrycode:String);

stamp(id:Long [PK], country:String);

passport(id:Long [PK], name:String);

passport_stamp(Passport_ID:Passport [PK] #FK to Passport,C_ID:C [PK] #FK to C);passport_visastamp(Passport_ID:Passport [PK] #FK to Passport,C_ID:C [PK] #FK to C);

painter(id:Integer [PK]);

news(id:Integer [PK], title:String, detail:String);

version(id:Integer [PK], codename:String, number:String, GeneratedName:Software);

generationgroup(id:int [PK], GeneratedName:Generation);

addressentry(person:AddressEntryPk, street:String, city:String, book:AddressBook #FK to(Address), directory:AlphabeticalDirectory #FK to(C));

atmosphere(id:Integer [PK], colorperdate:Map<Date,String>, colorperlevel:Map<Level,String>, composition:Map<Gas,Double>);

atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);

newspaper(id:Integer [PK], name:String);

newspaper_A(newspaperID:newspaper [PK] #FK to newspaper,AID:A [PK] #FK to A);

gas(id:Integer [PK], name:String);

pressreleaseagency(id:Integer [PK], name:String);

pressreleaseagency_id(pressreleaseagency_id:PressReleaseAgency [PK] #FK to PressReleaseAgency,news_id:A [PK] #FK to A);

training(id:Long [PK]);

training_D(trainingID:training [PK] #FK to training,DID:D [PK] #FK to D);

trainee(id:Long [PK], name:String);

wardrobe(id:Long [PK]);

gaskey(name:String [PK]);

addressbook(id:Integer [PK], owner:String);

currency(id:Integer [PK], currency:String);

alphabeticaldirectory(id:Integer [PK], name:String);

software(name:String [PK]);

exchangeoffice(id:Integer [PK], exchangerates:Map<ExchangeRateKey,ExchangeRate>, exchangeratefees:Map<ExchangeRateKey,BigDecimal>);

drawer(id:Long [PK]);

atmosphere(id:Integer [PK], colorperdate:Map<Date,String>, colorperlevel:Map<Level,String>, composition:Map<Gas,Double>);

atmosphere_A(atmosphereID:atmosphere [PK] #FK to atmosphere,AID:A [PK] #FK to A);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,A_ID:A [PK] #FK to A);

dress(id:Integer [PK]);

exchangerate(id:Integer [PK], rate:double, key:ExchangeRateKey, parent:ExchangeOffice);

generationuser(id:int [PK]);

painting(sizex:int, sizey:int, name:String [PK], painter:String [PK]);

dbtimestamped(id:int [PK], lastup:Date);

professionalagreement(id:Integer [PK], expiration:Date);

antenna(id:Integer [PK], longitude:String, latitude:String, power:Double);

staff(id:Integer [PK], sizeininches:double, radiuss:double, diameter:double);

vehicule(id:String [PK], registrationnumber:String, current:Conductor #FK to(C), year:Integer, previous:Conductor #FK to(C));

conductor(id:Integer [PK], name:String, version:Long);

truck(weight:int, agreement:ProfessionalAgreement #FK to(A));

vmtimestamped(id:int [PK], lastup:Date);

highestbid(name:String [PK], amount:double);

item(id:long [PK], name:String);

bid(id:int [PK], itemid:long, amount:double);

customer(id:Long [PK], name:String, GeneratedName:Passport);

savingsaccount();

account();

joincolumnorformulatest(ssr:StandardServiceRegistry);

manageddevice(name:String, GeneratedName:Device, GeneratedName:DeviceGroupConfig);

owner(deleted:boolean, id:Long [PK], name:String, version:Integer);

devicegroupconfig(name:String);

device(GeneratedName:ManagedDevice, tag:String);

party(partyid:String [PK], GeneratedName:PartyAffiliate #FK to(Part));

computer(id:ComputerPk, cpu:String, serial:SerialNumber #FK to(B));

body(id:Integer [PK], GeneratedName:Heart);

address(id:Integer [PK], city:String);

person(id:Integer [PK], GeneratedName:PersonAddress #FK to(Person));

client(id:Integer [PK], name:String, GeneratedName:Address, secondary:Address);

partyaffiliate(partyid:String [PK], GeneratedName:Party #FK to(Part), affiliatename:String);

trousers(id:Integer [PK], zip:TrousersZip #FK to(User));

serialnumber(id:SerialNumberPk [PK], value:String);

trouserszip(id:Integer [PK], GeneratedName:Trousers #FK to(User));

person(id:long [PK], GeneratedName:Address #FK to(Address));

address(id:long [PK], GeneratedName:Person #FK to(Person));

heart(id:Integer [PK]);

item(id:Long [PK], name:String);

shipment(id:Long [PK], createdon:Date, GeneratedName:ShipmentState, auction:Item #FK to(Item));

showdescription(id:Integer [PK], GeneratedName:Show #FK to(Show));

personaddress(id:Integer [PK], GeneratedName:Person #FK to(Person));

owner(id:Integer [PK], address:OwnerAddress #FK to(Address));

show(id:Integer [PK], description:ShowDescription #FK to(C));

owneraddress(id:Integer [PK], GeneratedName:Owner #FK to(Owner));

foobar(foo:String);

furniture(id:Integer [PK], weight:long);

gardenshed(id:Integer [PK], floors:long);

bed();

chair();

bigbed(size:int);

course6(id:long [PK], title:String);

course2(id:long [PK], title:String);

shape(id:long [PK]);

horse(name:String);

bed();

furniture(id:Integer [PK], weight:long);

person(firstname:String, lastname:String);

course7(id:long [PK], title:String);

course3(id:long [PK], title:String);

circle(GeneratedName:Color);

course5(id:long [PK], title:String);

course5_D(course5ID:course5 [PK] #FK to course5,DID:D [PK] #FK to D);

chair();

course1(id:long [PK], title:String);

square(id:long [PK], GeneratedName:Position);

course4(id:long [PK], title:String);

bigbed(size:int);

being(id:long [PK]);

student(id:long [PK], name:String);

user();

course8(id:long [PK], title:String);

gardenshed(id:Integer [PK], floors:long);

tourist(id:long [PK], name:String, destination:String);

rentalcar(id:int [PK], GeneratedName:Driver);

cook(id:int [PK], favouriteknife:Knive);

boy(id:long [PK], nicknames:Set<String>);

driver(id:int [PK], name:String);

waiter();

transaction(id:long [PK], code:String, account:BankAccount #FK to(C));

politician(name:String [PK], party:PoliticalParty #FK to(Part));

item(id:int [PK], code:String, sortfield:int, GeneratedName:Box #FK to(B));

orderitem(schoolid:String [PK], academicyear:Integer [PK], dayno:Integer [PK], dayname:String, GeneratedName:Order);

organisation(idorganisation:Long [PK], name:String);

politicalparty(name:String [PK]);

trainer(id:Integer [PK], name:String);

order(schoolid:String [PK], schoolidsort:Integer, academicyear:Integer [PK]);

child(id:Integer [PK], ismale:Parent #FK to(Parent), favoritesuperhero:String, favoritesinger:String);

model(id:Integer [PK], GeneratedName:Manufacturer #FK to(C));

organisationuser(sometext:String, GeneratedName:Organisation);

parent(id:ParentPk [PK], age:int);

zoo(id:Long [PK], name:String);

a(id:Long [PK], name:String);

street(id:Integer [PK], streetname:String, streetnamecopy:String, GeneratedName:City);

user(id:Long [PK], name:String, GeneratedName:Forum);

visitor(id:Long [PK], firstname:String, lastname:String);

bankaccount(id:long [PK]);

city(id:Integer [PK], name:String);

soldier(id:Integer [PK], name:String, GeneratedName:Troop);

forum(id:Long [PK], name:String);

c(id:Long [PK], name:String);

box(id:int [PK]);

monkey(id:Integer [PK], name:String);

computer(computername:String);

troop(id:Integer [PK], name:String);

b(id:Long [PK], name:String);

person(idperson:Long [PK], firstname,lastname:String);

asset(idasset:Integer [PK], test:Integer [PK], GeneratedName:Employee #FK to(Employee));

post();

tiger(id:Integer [PK], name:String);

employee(id:Integer [PK]);

player(id:Long [PK], GeneratedName:Team, name:String);

team(id:Long [PK]);

a320b();

someentity(id:java.util.Date [PK], timedata:java.sql.Time, tsdata:java.sql.Timestamp, data:Byte, chardata:Character);

someotherentity(id:int [PK], data:boolean, data:byte, //settingaarbitraryacterheretomakethistestalsopassagainstpostgresql//postgresqlthrowsotherwiseanexceptionwhenpersistingthenullvalue//org.postgresql.util.psqlexception:error:invalidbytesequenceforencoding"utf8":0x00acterdata:char, data:short, egerdata:int, data:long, data:double, data:float, GeneratedName:Grade);

country(id:Integer [PK], name:String);

listmappingtest(ssr:StandardServiceRegistry);

card(id:Integer [PK], GeneratedName:Deck #FK to(C));

deck(id:Integer [PK]);

parent(/***/id:Long [PK], /***/default:Child #FK to(Child));

mouth(id:Integer [PK], size:int);

tooth(id:Integer [PK], type:String, leftneighbour:Tooth #FK to(tooth), rightneighbour:Tooth #FK to(tooth), GeneratedName:Mouth #FK to(mouth));

codedpairsetholder(serialversionuid:long, id:Long [PK], code:String, pairs:Set<PersonPair>);

person(serialversionuid:long, id:Long [PK], name:String);

codedpairholder(id:Long [PK], code:String, pair:PersonPair);

child(/***/id:Long [PK], /***/:Parent #FK to(Parent));

sky(id:Long [PK], color:String, day:String, month:String);

flight(id:String [PK]);

company(id:Integer [PK], name:String);

user(id:int [PK], emailaddress:String, age:int, username:String, password:String, lockedout:boolean);

human(iq:int);

mammal(ispregnant:boolean);

animal(id:Integer [PK], name:String);

human(iq:int);

animal(id:Integer [PK], name:String);

mammal(ispregnant:boolean);

human(iq:int);

mammal(ispregnant:boolean);

mammal(ispregnant:boolean);

human(iq:int, GeneratedName:Club #FK to(C));

animal(id:Integer [PK], name:String);

club(id:int [PK], name:String);

storm(id:Integer [PK], start:Location, end:Location, stormname:String);

incorrectentity(name:String);

death(id:Integer [PK], GeneratedName:Date, howdoesithappen:String);

simplecat(id:Integer [PK], name:String);

life(id:Integer [PK], duration:int, fulldescription:String, owner:SimpleCat #FK to(Cat));

sysuserorm(userid:long [PK]);

sys_groups_users(userid:SysUserOrm [PK] #FK to SysUserOrm,groupid:Group [PK] #FK to Group);

cat(id:Integer [PK], name:String, secondname:String, storypart1:String, storypart2:String);

dog(id:DogPk [PK], weight:int, thoroughbredname:String);

sysgroupsorm(groupid:long [PK]);

b(id:Integer [PK], name:String);

c(age:int);

life(id:Integer [PK], duration:int, fulldescription:String, owner:Cat #FK to(Cat));

employeegroup(id:Long [PK], GeneratedName:Attrset #FK to(A));

casimirparticle(id:Long [PK]);

area(id:Integer [PK], name:String);

attrvalue(id:Long [PK], value:String);

spaceship(name:String [PK], model:String, speed:double, GeneratedName:Captain, GeneratedName:Dimensions);

alltables(tablename:String [PK], daysold:String);

captain(firstname:String [PK], lastname:String [PK]);

synonymousdictionary();

chaos(id:Long [PK], size:Long, name:String, nickname:String);

attrset(id:Long [PK]);

twilight(id:int [PK]);

night(id:Integer [PK], duration:long, GeneratedName:Date, GeneratedName:Area);

dictionary(id:Integer [PK], name:String, editor:String);

employee(id:Long [PK], GeneratedName:Employeegroup #FK to(Group), GeneratedName:Attrset #FK to(A));

mark(id:int [PK], value:int);

a(id:int [PK], listofb:List<B>);

c(id:int [PK], comment:String);

owner(id:Integer [PK], elements:Set<String>);

person(id:Long [PK], name:String, nicknamesascendingnaturalsort:Set<String>, nicknamesdescendingnaturalsort:Set<String>, addressesascendingnaturalsort:Set<Address>, addressesdescendingnaturalsort:Set<Address>, addressescityascendingsort:Set<Address>, addressescitydescendingsort:Set<Address>);

entitywithanelementcollection(id:Long [PK], somestrings:Set<String>);

matrix(id:Integer [PK], mvalues:SortedMap<Integer,Float>);

sale(id:Integer [PK], contacts:List<Contact>);

widgets(name:String, id:int [PK]);

boy(id:Integer [PK], firstname:String, lastname:String, nicknames:Set<String>, hatednames:Set<String>, preferrednames:Set<String>, scorepernickname:Map<String,Integer>, scoreperpreferredname:Map<String,Integer>, favoritenumbers:int, favoritetoys:Set<Toy>, characters:Set<Character>, foods:Map<String,FavoriteFood>, countryattitudes:Set<CountryAttitude>);

bugsystem(id:Integer [PK], bugs:Set<Bug>);

query(id:Long [PK], includedlocations:Set<Location>);

testcourse(testcourseid:Long [PK], title:LocalizedString);

products(id:Integer [PK], widgets:Set<Widgets>);

poi(id:Integer [PK], name:String);

raceexecution(id:Integer [PK], poiarrival:Map<Poi,PoiArrival>);

customer(id:Long [PK], investments:List<Investment>);

customer(id:Long [PK], investments:List<Investment>);

investor(id:Long [PK], investments:List<Investment>);

dvd(id:MyOid [PK], title:String);

entity1(entity1_prop1:String, entity1_prop2:String, entity1_prop3:String, entity1_prop4:String, entity1_prop5:String, entity1_prop6:String);

entity2(entity2_prop1:String, entity2_prop2:String, entity2_prop3:String, entity2_prop4:String, entity2_prop5:String, entity2_prop6:String);

flight(id:Long [PK], name:String, transientduration:Long, version:Integer, GeneratedName:Company, triggereddata:String, factor:long, departure:Date, buydate:java.sql.Timestamp, alternativedeparturedate:Calendar);

coin(id:Integer [PK], name:String, GeneratedName:Currency);

currency(id:Integer [PK], name:String);

domainadmin(domainname:String [PK], adminuser:String [PK], nickname:String);

printercable(id:Long [PK], GeneratedName:Printer);

printer(id:Long [PK]);

category(id:int [PK], title:String);

bug(id:int [PK], title:String);

`bug_category`(Bug_ID:Bug [PK] #FK to Bug,Cat_ID:Cat [PK] #FK to Cat);

medicalhistory(patient:Person [PK] #FK to(Person));

person(firstname:String [PK], lastname:String [PK]);

medicalhistory(//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId, patient:Person #FK to(Person));

person(firstname:String [PK], lastname:String [PK]);

person(id:Integer [PK]);

medicalhistory(id:Integer [PK], patient:Person #FK to(Person));

dependent(name:String [PK], firstname:Employee [PK] #FK to(Employee));

employee(firstname:String [PK], lastname:String [PK]);

dependent(id:DependentId, emp:Employee #FK to(Employee));

employee(firstname:String [PK], lastname:String [PK]);

medicalhistory(patient:Person [PK] #FK to(Person));

person(id:PersonId);

medicalhistory(//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId, patient:Person #FK to(Person));

person(id:PersonId);

medicalhistory(patient:Person [PK] #FK to(Person), xraydata:byte);

employee(empid:long [PK], empname:String);

dependent(name:String [PK], emp:Employee [PK] #FK to(Employee));

customerinventory(id:Integer [PK], GeneratedName:Customer [PK] #FK to(Customer), vehicle:Item #FK to(Item), totalcost:BigDecimal, quantity:int, version:int);

item(query_by_category:String, id:String [PK], name:String, price:BigDecimal, description:String, discount:BigDecimal, category:int, version:int);

customer(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

exclusivedependent(id:DependentId, emp:Employee #FK to(Employee));

employee(empid:long [PK], empname:String);

customerinventorytwo(id:Integer [PK], custid:int [PK], customer:CustomerTwo #FK to(Customer), vehicle:Item #FK to(Item), totalcost:BigDecimal, quantity:int, version:int);

customertwo(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

customerinventory(id:Integer [PK], custid:int [PK], GeneratedName:Customer #FK to(Customer), vehicle:Item #FK to(Item), totalcost:BigDecimal, quantity:int, version:int);

customer(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

item(query_by_category:String, id:String [PK], name:String, price:BigDecimal, description:String, discount:BigDecimal, category:int, version:int);

dependent(id:DependentId, //@joincolumn(name:Employee #FK to(Employee));

dependent(name:String [PK], //idattributemappedbyjoincolumndefaultemp:Employee);

employee(empid:long [PK], empname:String, nickname:String);

employer(name:String [PK], GeneratedName:Employee [PK] #FK to(Employee));

employee(id:long [PK], name:String);

dependent(//defaultcolumnnamefor"name"attributeisoverriddenid:DependentId, firstname:Employee #FK to(Employee));

employee(empid:EmployeeId);

employee(empid:EmployeeId);

policy(id:PolicyId, dep:Dependent #FK to(D));

dependent(id:DependentId, emp:Employee #FK to(Employee));

dependent(//defaultcolumnnameisoverriddenname:String [PK], firstname:Employee [PK] #FK to(Employee));

employee(empid:EmployeeId);

dependent(id:DependentId, firstname:Employee #FK to(Employee));

policy(id:PolicyId, firstname:Dependent #FK to(D));

employee(empid:EmployeeId);

person(ssn:String [PK]);

simple(ssn:String [PK], name:String [PK]);

financialhistory(patient:Person [PK] #FK to(Person), lastup:Date);

medicalhistory(patient:Person [PK] #FK to(Person), lastup:Date);

financialhistory(//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String [PK], lastup:Date, patient:Person #FK to(Person));

medicalhistory(//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String [PK], patient:Person #FK to(Person), lastup:Date);

person(ssn:String [PK]);

person(ssn:String [PK]);

foo(id:Long [PK], name:String, GeneratedName:Bar #FK to(B));

person(serialversionuid:long, id:Integer [PK], name:String, GeneratedName:PersonInfo #FK to(Person));

bar(GeneratedName:Foo [PK] #FK to(F), details:String);

product(id:Long [PK], name:String);

order(id:Long [PK], name:String);

personinfo(serialversionuid:long, id:Person [PK] #FK to(Person), info:String);

employee(empid:long [PK], empname:String);

orderline(GeneratedName:Order [PK] #FK to(Order), GeneratedName:Product [PK] #FK to(C), amount:Integer);

dependent(emp:Employee [PK] #FK to(Employee), name:String);

dependent(//idattributemappedbyjoincolumndefaultid:DependentId, GeneratedName:Employee #FK to(Employee));

userimpl(id:Integer [PK]);

contactimpl(id:Integer [PK], name:String);

port(id:Long [PK]);

range(id:Long [PK], value:Integer);

display(id:Integer [PK], brand:String);

tv(serial:String [PK], model:String, size:int, name:String, exp:Date, description:String, lifetime:BigInteger, GeneratedName:Tuner, GeneratedName:Recorder);

music(name:String [PK]);

powersupply(id:Integer [PK], power:BigDecimal, position:String);

cupholder(id:Integer [PK], radius:BigDecimal);

tvowner(id:Integer [PK], GeneratedName:Tv #FK to(tv));

color(id:Integer [PK], name:String);

address(blacklistedzipcode:String, line1:String, line2:String, zip:String, state:String, country:String, id:long [PK], internalvalid:boolean, floor:int);

screen(id:Integer [PK], stop:Button, GeneratedName:PowerSupply, connectors:Set<DisplayConnector>);

screen_C(screenID:screen [PK] #FK to screen,CID:C [PK] #FK to C);

minmax(id:Long [PK], value:Integer);

rock(bit:Integer);

a320(javaembeddedversion:String);

blogentry(text:String);

socialsite(id:int [PK], website:String);

employee(id:int [PK], GeneratedName:ContactInfo);

trip();

propertyrecord(id:Long [PK], parcels:Map<Address,PropertyInfo>, legacyparcels:Map<Address,PropertyInfo>, unsortedparcels:Set<PropertyInfo>, legacyunsortedparcels:Set<PropertyInfo>);

inheritedattributeoverridingtest(GeneratedName:StandardServiceRegistry);

phonenumber(id:int [PK], number:int);

location(name:String [PK]);

addr(id:int [PK], street:String, city:String, state:String, country:String, zipcode:String);

entityserialize(id:long [PK], explicitlob:ExplicitSerializable, explicit:ExplicitSerializable, implicit:ImplicitSerializable, explicitoverridingimplicit:ImplicitSerializable);

versionedbook(id:Integer [PK], version:Integer);

imageholder(id:Long [PK], longarray:byte, GeneratedName:Dog, picarray:Byte);

lobtestentity(id:Long [PK], lobvalue:Blob, qwerty:String);

document(id:Long [PK], revision:Integer, fulltext:String, shortdescription:String);

book(id:Integer [PK]);

materializedblobentity(id:Long [PK], name:String, thes:byte);

lobholder(id:Long [PK], locator:Clob, locator:Blob, counter:Integer);

compiledcode(id:Integer [PK]);

longstringholder(id:Long [PK], name:char, whatever:Character, long:String);

versionedcompiledcode(id:Integer [PK], version:Integer);

ferry(sea:String);

contest(id:int [PK], heldin:Month);

competitor(id:int [PK], name:String);

entitymapenum(id:int [PK], ordinalmap:Map<Common,String>, stringmap:Map<Common,String>, firstlettermap:Map<FirstLetter,String>, lastnumbermap:Map<LastNumber,String>, explicitoverridingimplicitmap:Map<LastNumber,String>);

user(id:java.lang.String);

socialnetworkprofile(id:java.lang.String, GeneratedName:User #FK to(User), type:SocialNetwork, networkid:String);

entityenum(id:long [PK], ordinal:Common, string:Common, GeneratedName:FirstLetter, GeneratedName:LastNumber, explicitoverridingimplicit:LastNumber, GeneratedName:Trimmed, formula:Trimmed, set:Set<Common>);

house(id:Long [PK], cost:Integer);

uniqueconstraintunittests();

uniqueconstraintvalidationtest();

room(id:Long [PK], name:String);

naturalidonmanytoone(id:int [PK], GeneratedName:Citizen #FK to(C));

a(oid:long [PK], version:int, name:String, ds:Set<D>, single:D);

citizen(id:Integer [PK], firstname:String, lastname:String, GeneratedName:State #FK to(State), ssn:String);

state(id:Integer [PK], name:String);

a(accountid:AId, shortcode:String);

d(oid:long [PK], version:int, GeneratedName:A, single:A);

hotel(id:Long [PK], name:String);

twinkletoes(id:BigDecimal [PK], GeneratedName:Bunny #FK to(B));

monkey(id:String [PK]);

furniture(id:Integer [PK]);

firtree();

planetcheatsheet(GeneratedName:Planet [PK], mass:double, radius:double, numberofinhabitants:long);

footballer(firstname:String [PK], lastname:String [PK], club:String);

bunny(id:BigDecimal [PK]);

shoe(id:Long [PK]);

ball(id:Integer [PK]);

dog(id:Integer [PK], name:String);

department(id:Long [PK]);

phone(id:Integer [PK]);

home(id:Long [PK]);

store(id:Long [PK]);

soundsystem(id:String [PK], brand:String, model:String);

goalkeeper();

breakdance(id:Integer [PK], name:String);

tower();

computer(id:Long [PK], serialnumber:String);

pointytooth(id:BigDecimal [PK], GeneratedName:Bunny #FK to(B));

completesequenceentity(seq_name:String, id:Long [PK]);

dedicatedsequenceentity2(entity_name:String, id:Long [PK]);

minimaltableentity(tbl_name:String, id:Long [PK]);

dedicatedsequenceentity1(sequence_suffix:String, id:Long [PK]);

minimalsequenceentity(seq_name:String, id:Long [PK]);

autoentity(id:Long [PK]);

breakdance(id:Integer [PK], name:String);

pointytooth(id:BigDecimal [PK], GeneratedName:Bunny #FK to(B));

goalkeeper();

shoe(id:Long [PK]);

ball(id:Integer [PK]);

planetcheatsheet(GeneratedName:Planet [PK], mass:double, radius:double, numberofinhabitants:long);

dog(id:Integer [PK], name:String);

soundsystem(id:String [PK], brand:String, model:String);

department(id:Long [PK]);

furniture(id:Integer [PK]);

home(id:Long [PK]);

footballer(firstname:String [PK], lastname:String [PK], club:String);

monkey(id:String [PK]);

tower();

hibernatesequenceentity(id:Long [PK], text:String);

store(id:Long [PK]);

firtree();

phone(id:Integer [PK]);

computer(id:Long [PK], serialnumber:String);

twinkletoes(id:BigDecimal [PK], GeneratedName:Bunny #FK to(B));

bunny(id:BigDecimal [PK]);

boat(id:Integer [PK], size:int, weight:int);

americacupclass(GeneratedName:Country);

tvmagazin(id:TvMagazinPk, time:Date);

child(id:ChildPk);

littlegenius(particularskill:String);

order(id:Integer [PK]);

a(GeneratedName:AId);

orderline(GeneratedName:Order [PK], GeneratedName:Product [PK]);

someentity(id:SomeEntityId [PK], prop:String);

product(name:String [PK]);

presenter(name:String [PK]);

parent(id:ParentPk);

c(id:Long [PK]);

tvprogram(id:TvMagazinPk, time:Date, text:String);

tvprogramidclass(GeneratedName:Channel [PK], GeneratedName:Presenter [PK], time:Date, text:String);

card(id:String [PK]);

key(id:String [PK]);

cardfield(GeneratedName:PrimaryKey);

b(id:Long [PK]);

channel(id:Integer [PK], name:String);

propertymap(id:Integer [PK], name:String, properties:Map<String,Property>);

propertylist(id:Integer [PK], name:String, somepropery:T, generalproperties:List<T>);

longproperty(id:Integer [PK], name:String, value:Long);

charproperty(id:Integer [PK], name:String, value:Character);

stringproperty(id:Integer [PK], name:String, value:String);

propertyset(id:Integer [PK], name:String, some:Property, generalproperties:List<Property>);

integerproperty(id:Integer [PK], name:String, value:Integer);

friend(id:Integer [PK], name:String);

friend2friend(from_fr:Friend [PK] #FK to Friend,to_fr:D [PK] #FK to D);

knownclient(id:Integer [PK], name:String);

inspector(_id:Long [PK], name:String);

group(id:Integer [PK]);

group_C(groupID:group [PK] #FK to group,CID:C [PK] #FK to C);

programmanager(id:int [PK]);

building(id:Long [PK], name:BuildingCompany #FK to(Company));

employee(id:Integer [PK], name:String, GeneratedName:ContactInfo, GeneratedName:JobInfo);

buildingcompany(id:Long [PK], foundedin:Date);

inspectorprefixes(prefixes:String);

deserted_area(inspector_name:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:Z [PK] #FK to Z);inspector_prefixes_areas(inspector_id:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:Z [PK] #FK to Z);

city(id:Integer [PK], name:String);

employer(id:Integer [PK]);

employer_employee(emper_id:Employer [PK] #FK to Employer,empee_id:C [PK] #FK to C);employer_contractor(employer_id:Employer [PK] #FK to Employer,contractor_id:list [PK] #FK to list);

cat(id:CatPk, age:int);

tt(Cat_ID:Cat [PK] #FK to Cat,A_ID:A [PK] #FK to A);

zone(id:Integer [PK]);

groupwithset(id:Integer [PK]);

groupwithset_E(groupwithsetID:groupwithset [PK] #FK to groupwithset,EID:E [PK] #FK to E);

phonenumber(phnumber:int [PK]);

contractor(hourlyrate:float);

supplier(id:Integer [PK], name:String);

phonenumber(phnumber:int [PK]);

item(id:Integer [PK]);

item_C(itemID:item [PK] #FK to item,CID:C [PK] #FK to C);

store(id:Integer [PK], name:String);

store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);store_Item(storeID:store [PK] #FK to store,ItemID:Item [PK] #FK to Item);store_Cat(storeID:store [PK] #FK to store,CatID:Cat [PK] #FK to Cat);store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);

category(id:Integer [PK]);

category_C(categoryID:category [PK] #FK to category,CID:C [PK] #FK to C);

city(id:Integer [PK], name:String);

city_Item(cityID:city [PK] #FK to city,ItemID:Item [PK] #FK to Item);

knownclient(id:Integer [PK], name:String);

employee(id:Integer [PK], name:String, GeneratedName:ContactInfo);

man(id:ManPk [PK], carname:String);

store(id:Integer [PK], name:String);

store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);storesupplier(store:Store [PK] #FK to Store,supplier:E [PK] #FK to E);store_C(storeID:store [PK] #FK to store,CID:C [PK] #FK to C);

permission(permission:String [PK], expiration:Date);

woman(id:WomanPk [PK], carname:String);

man_woman(womanlastname:Woman [PK] #FK to Woman,maniselder:A [PK] #FK to A);

simple(id1:Long [PK], id2:Long [PK], quantity:int);

simple2(id1:Long [PK], id2:Long [PK], quantity:int);

multiple(id1:Long [PK], id2:Long [PK], id3:Long [PK], quantity:int);

cuisine();

ticket(id:Long [PK], number:String);

loadplanbuildertest();

encapsulatedcompositeattributeresultsetprocessortest();

entityassociationresultsetprocessortest();

entitywithnonlazycollectionresultsetprocessortest();

entitywithnonlazyonetomanysetresultsetprocessortest();

encapsulatedcompositeidresultsetprocessortest();

employee(//illustratestheproblematicsituationdescribedinhhh-8980belongsto:Department #FK to(Part));

user(id:Integer [PK]);

department(id:Integer [PK]);

contractor(//illustratestheproblematicsituationdescribedinhhh-8330reportsto:Department #FK to(Part));

simpleresultsetprocessortest();

entitywithnonlazyonetomanylistresultsetprocessortest();

basicwalkingtest();

thing(id:Long [PK], name:String, mutableproperty:Date);

removeorderingtest();

proxiedgetloadaccesstest();

basicgetloadaccesstest();

usertypenoncomparableidtest();

usertypecomparableidtest();

sequenceexporttest(ssr:StandardServiceRegistry);

legacysequenceexporttest(ssr:StandardServiceRegistry);

optimizertest();

pooledhilosequenceidentifiertest(log:Logger);

characterarrayidtest();

bytearrayidtest();

primitivebytearrayidtest();

primitivecharacterarrayidtest();

employee(fetch_profile_tree:String, id:Long [PK], manager:Employee #FK to(Employee));

publisher(id:Long [PK], name:String);

author(id:Long [PK], name:String, GeneratedName:Publisher);

unrelatedentity(id:Long [PK], name:String);

bookstore(id:Long [PK], name:String);

bookstore_Book(bookstoreID:bookstore [PK] #FK to bookstore,BookID:Book [PK] #FK to Book);

book(id:Long [PK], title:String, GeneratedName:Author);

container(id:Integer [PK], items:List<Item>);

collectionjointablenamingtest();

category(id:Long [PK]);

category_Item(categoryID:category [PK] #FK to category,ItemID:Item [PK] #FK to Item);

language(id:Long [PK], //@column(unique:String, fallback:Language #FK to(A));

customer(id:Integer [PK], version:Integer, name:String, registeredtrademarks:Set<String>, hq:Address, addresses:Set<Address>);

customer_D(customerID:customer [PK] #FK to customer,DID:D [PK] #FK to D);

order(id:Integer [PK], referencecode:String, placed:Date, fulfilled:Date, GeneratedName:Customer);

industry(id:Integer [PK], name:String);

zipcode(id:Integer [PK], code:String, city:String, GeneratedName:State);

workflow(serialversionuid:long, id:Long [PK], defaultlanguage:Locale, supportedlocales:Set<Locale>, localized:Map<Locale,LocalizedEmbeddable>);

item(id:Long [PK], price:Double, specialprice:Double);

door(id:Integer [PK], name:String);

a(id:Long [PK], value:String);

userconfentity(serialversionuid:long, user:UserEntity [PK] #FK to(User), confkey:ConfEntity [PK] #FK to(Entity));

table2(id:long [PK]);

confentity(serialversionuid:long, confkey:String [PK], confvalue:String [PK]);

table1(id:long [PK]);

userentity(serialversionuid:long, id:Long [PK], name:String);

tablecommenttest(output:File);

sequencereadingtest();

connectionsreleasetest(ssr:StandardServiceRegistry, metadata:MetadataImplementor, connectionprovider:ConnectionProviderDecorator);

schemaupdatedelimitertest(expected_delimiter:String);

element(id:Long [PK], code:String);

category();

groupstep();

mixedfieldpropertyannotationtest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaupdategeneratingonlyscriptfiletest();

migrationtest(GeneratedName:ServiceRegistry);

schemaexportwithglobalquotingenabledtest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

implicitcompositekeyjointest(GeneratedName:Logger);

foreignkeymigrationtest();

testfkupdating(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaexportwithindexanddefaultschema(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaupdatewithfunctionindextest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaupdatewithviewstest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaoneentity(id:String [PK]);

schematwoentity(id:String [PK]);

project(id:Long [PK]);

employee(id:Long [PK]);

employee_project(employee_id:Employee [PK] #FK to Employee,project_id:C [PK] #FK to C);

joinedinheritanceforeignkeytest(output:File, ssr:StandardServiceRegistry, metadata:MetadataImplementor);

person(id:Long [PK]);

group(id:Long [PK]);

usersetting(id:long [PK], GeneratedName:User #FK to(User));

phone(id:Long [PK], number:String);

user(id:long [PK], GeneratedName:UserSetting #FK to(User));

schemaupdateformattertest(after_format:String, delimiter:String);

product(id:Long [PK], name:String);

feature(id:Long [PK], GeneratedName:Product #FK to(C), name:String);

tranche(id:Long [PK], GeneratedName:Tranchenmodell #FK to(C));

tranchenmodell(id:Long [PK], GeneratedName:Preisregelung #FK to(E));

preisregelung(id:Long [PK], GeneratedName:Tranchenmodell #FK to(C));

x(id:Long [PK], GeneratedName:Tranchenmodell #FK to(C));

preisregelung(id:Long [PK], GeneratedName:Tranchenmodell #FK to(C));

tranchenmodell(id:Long [PK], GeneratedName:Preisregelung #FK to(E), GeneratedName:X #FK to(x));

tranche(id:Long [PK], GeneratedName:Tranchenmodell #FK to(C), GeneratedName:Y #FK to(y));

y(id:Long [PK], GeneratedName:Tranche #FK to(C));

compositemergetesttask(entityid:long);

parent(id:Long [PK]);

lazyproxyonenhancedentitytesttask(parentid:Long);

footwo(id:int [PK]);

barone(foo:String, id:int [PK], foo:FooOne #FK to(E));

bartwo(id:int [PK]);

bartwo_E(bartwoID:bartwo [PK] #FK to bartwo,EID:E [PK] #FK to E);

fooone(id:int [PK]);

parent(id:Long [PK], names:Set<String>);

parent_Child(parentID:parent [PK] #FK to parent,ChildID:Child [PK] #FK to Child);

child(id:Long [PK]);

child(id:Long [PK], name:String, GeneratedName:Parent #FK to(Parent));

workorder(id:int [PK], location:int [PK], originalquantity:int, completedquantity:int, duedate:Calendar, startdate:Calendar, assemblyid:String, version:int);

person(id:Integer [PK], name:String, GeneratedName:Vehicle #FK to(Vehicle));

vehicle(id:Integer [PK], name:String, driver:Person #FK to(Person));

extendedenhancementtesttask();

extendedassociationmanagementtesttask();

parent(id:Long [PK], name:String, lazy:String);

child(id:Long [PK], GeneratedName:Parent #FK to(Parent));

parent(id:Integer [PK], name:String);

product(id:String [PK], name:String, description:String, msrp:BigDecimal, version:int);

store(id:int [PK], name:String, version:int);

inventory(id:int [PK], GeneratedName:Store, GeneratedName:Product, quantity:Long, storeprice:BigDecimal);

mixedaccesstesttask(engine:ScriptEngine, cleanup:boolean);

mappedsuperclasstesttask();

customerinventory(id:Long [PK], custid:int [PK], GeneratedName:Customer #FK to(Customer), vehicle:String #FK to(G), version:int);

customer(id:int [PK], GeneratedName:User #FK to(User), firstname:String, lastname:String, version:int);

user(id:int [PK], login:String, password:String, GeneratedName:Customer #FK to(Customer));

user_Group(userID:user [PK] #FK to user,GroupID:Group [PK] #FK to Group);

group(id:int [PK], name:String);

simpleentity(id:Long [PK], name:String, active:boolean, somenumber:long, somestrings:List<String>, GeneratedName:Address, 2:Address);

parent(id:Long [PK], name:String);

myentity(id:Long [PK], name:String);

simpleentity(id:Long [PK], name:String, active:boolean, somenumber:long, anunspecified:Object, somestrings:List<String>);

hhh9529testtask();

manytomanytarget(id:Integer [PK], name:String);

manytomanyowner(id:Integer [PK], name:String);

none(none:ManyToManyOwner [PK] #FK to ManyToManyOwner,none:A [PK] #FK to A);

role(GeneratedName:Code [PK]);

bid(amount:float [PK], GeneratedName:Item [PK] #FK to(Item));

listactionrole(role:Code [PK], GeneratedName:Role #FK to(E));

item(name:String [PK]);

a(id:Integer [PK], otherproperty:String, GeneratedName:B #FK to(B));

b(idpart1:Integer [PK], idpart2:Integer [PK], otherproperty:String);

batchloadableentity(id:Integer [PK], name:String);

role(id:long [PK]);

tablegeneratorquotingtest(serviceregistry:StandardServiceRegistry);

phone(id:Integer [PK], brandname:String, price:float);

quotetest();

user(id:long [PK], //theseexistsolelyforhhh-8464toensurethatthevariousformsofquotingarenormalizedinternally//(usingbackticks),includingthejoincolumn.withoutnormalization,themappingwillthrowa//duplicatemappingexception.:House #FK to(House), house1:Long, house2:Long, //testukonfkw/globalquoting--seehhh-8638//thismustbeinitialized.severaldbsdonotallowmultiplenullvaluesinauniquecolumn.3:House #FK to(House));

user_E(userID:user [PK] #FK to user,EID:E [PK] #FK to E);

person(id:long [PK], name:String);

house(id:Long [PK], streetaddress:String);

super(id:Long [PK], value:Long);

sub();

saveentitytest();

mergetest();

iamafoo(id:long [PK], foo:String);

matrix(id:Integer [PK], mvalues:Set<Integer>);

sybasetimestampcomparisonannotationstest();

wrongcircularitydetectiontest();

tree(id:Long [PK]);

palmtree(leavesize:double);

window(id:Long [PK]);

portal(id:Long [PK]);

gate(id:Long [PK]);

issue(id:Long [PK], description:String, issuenumber:String);

varioustypesentity(id:Integer [PK], data:byte);

identifiergeneratorwithnaturalidcachetest();

building(id:Integer [PK], name:String, address:String, city:String, state:String);

b(oid:long [PK], ss:A #FK to(A), naturalid:int);

c(oid:long [PK], name:String);

a(oid:long [PK], ass:C #FK to(C), myname:String);

d(oid:long [PK], name:String, assoiated:C #FK to(C));

principal(id:Long [PK], uid:String);

user();

principal(id:Long [PK], uid:String);

user(username:String);

b(oid:long [PK], ss:A #FK to(A), naturalid:int);

allcached(id:Integer [PK], name:String);

a(oid:long [PK], myname:String);

another(id:Integer [PK], name:String, surname:String);

character(id:Integer [PK], name:String);

alias(id:Integer [PK], alias:String);

character_alias(Alias_ID:Alias [PK] #FK to Alias,C_ID:C [PK] #FK to C);

multiplecollectionrefentity1(id:Long [PK], text:String, GeneratedName:MultipleCollectionEntity #FK to(Entity), multiplecollectionentityid:Long);

multiplecollectionentity(id:Long [PK], text:String);

multiplecollectionrefentity2(id:Long [PK], text:String, GeneratedName:MultipleCollectionEntity #FK to(Entity), multiplecollectionentityid:Long);

lazyabstractentityreference(id:Integer [PK], entity:AbstractEntity #FK to(Entity));

abstractentity(id:Integer [PK]);

concreteentity(content:String);

synonymvalidationtest();

longvarcharvalidationtest(ssr:StandardServiceRegistry);

jointablewithdefaultschematest();

inheritingentity(somevalue:String);

rootentity(id:Long [PK]);

subsubentity();

subentity();

subsubsubentity();

polygon(id:Integer [PK], description:String);

singletablewithembeddabletest(id:Long [PK] #FK to RootEntity, );

joinedsubclasswithembeddabletest();

tableperclasswithembeddabletest();

quadrilateral(anglea:Double, angleb:Double, anglec:Double);

person(id:int [PK], GeneratedName:Name);

component(id:Long [PK], emb:Component.Emb);

elementcollectiontests();

collectioncompositeelementexplicitconversiontest(ssr:StandardServiceRegistry, simplevalueattributeconverterdescriptor:Field);

collectionelementconversiontest();

collectioncompositeelementconversiontest();

collectionelementexplicitconversiontest();

basicjodatimeconversiontest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

simpleconvertannotationtest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

mapkeyconversiontest();

mapelementconversiontest();

mapkeyattributeconvertertest();

simpleconvertsannotationtest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

explicitenumconverterstest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

simpleoverriddenconvertertest();

nullhandlingtests();

querytest(salary:float);

explicitdateconverterstest(//note:initiallyunabletoreproducethereportedproblemconverttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

dirtycheckingtest();

attributeconvertertest();

explicitlynamedconverterclassestest();

simplexmloverriddentest(ssr:StandardServiceRegistry);

xmlwithexplicitconvertannotationstest(//note:essentiallythesameexacttestasexplicitdateconverterstest,butherewewillmixannotationsandxmlconverttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

simpleembeddableoverriddenconvertertest();

andnationalizedtests();

entitywithstringcompositekey(pk:StringCompositeKey);

entitywithcompositekey(pk:CompositeKey);

beforecompletionfailuretest(log:Logger);

doesnotwork(serialversionuid:long, GeneratedName:DoesNotWorkPk, globadditinfotid:Long, globalnotes:List<String>);

product(id:String [PK], name:String, description:String, msrp:BigDecimal, version:int);

inventory(id:int [PK], GeneratedName:Store, GeneratedName:Product, quantity:Long, storeprice:BigDecimal);

cachelazyloadnotranstest();

store(id:int [PK], name:String, version:int);

subselectfetchcollectionfrombatchtest();

qualifiedtablenamingtest();

user(id:int [PK], version:int, name:String, GeneratedName:Company #FK to(Company));

cacheableitem(id:Long [PK], name:String);

itwithpkclass(key1:Integer [PK], key2:Integer [PK], name:String);

it(key1:Integer [PK], key2:Integer [PK], name:String);

company(id:int [PK], name:String);

referencecachetest();

cacheditem2();

abstractcacheditem(id:Long [PK], name:String);

cacheditem1();

bytecodeenhancedimmutablereferencecachetest();

sharedregiontest();

collectioncacheevictionwithoutmappedbytest();

manytomanycollectioncacheevictiontest();

constrainttest(max_name_length:int, explicit_fk_name_native:String, explicit_fk_name_jpa:String, explicit_uk_name:String);

lobentity(blob_length:int, id:Long [PK], GeneratedName:Blob);

isolatedevictableentity(id:Integer [PK], name:String);

defaultgeneratedvaluetest();

insertorderingwithinheritance();

bagdelayedoperationtest(parentid:Long);

listaddtest();

setdelayedoperationtest(parentid:Long, childid1:Long, childid2:Long);

listdelayedoperationtest(parentid:Long, childid1:Long, childid2:Long);

multiplesessioncollectiontest(log:Logger);

multiplesessioncollectionwarningtest(log:CoreMessageLogger, loginspection:LoggerInspectionRule);

multiplebagfetchtest();

bagduplicatestest();

multiplebagfetchhqltest();

user(username:String [PK]);

email(id:Long [PK], address:String);

zoo(id:Long [PK], name:String, city:String, animals:Set<Animal>);

lion();

tiger(numberofstripes:int);

animal(id:Long [PK], weight:long);

versionedcascadeone(id:long [PK], version:long);

unversionednocascadeone(id:long [PK]);

versionednocascadeone(id:long [PK], version:long);

unversionedcascadeone(id:long [PK]);

many(id:long [PK]);

mapkey(log:Logger, id:Long [PK], name:String, defaultvalue:MapValue #FK to(A), previoushashcode:int);

mapholder(id:Long [PK]);

map_key_map_value(map_holder_id:MapHolder [PK] #FK to MapHolder,map_value_id:A [PK] #FK to A);

mapvalue(log:Logger, id:Long [PK], name:String, previoushashcode:int);

multilingualstring(id:long [PK], map:Map<String,LocalizedString>);

persistentmaptest();

listindexreferencefromlistelementtest();

contact(serialversionuid:long, id:Long [PK], name:String, emailaddresses:Set<EmailAddress>, emailaddresses2:Set<EmailAddress>);

user(serialversionuid:long, id:Long [PK], name:String, GeneratedName:Contact);

sorttest();

nativequerysyncspacecachingtest();

numvalue(num:long [PK], value:String);

user(id:Long [PK], name:String);

membership(id:Long [PK], member:User #FK to(User), GeneratedName:Group, join:Date, dues:Float);

group(id:Long [PK], name:String);

postgresrefcursorsupporttest(sf:SessionFactory);

storedprocedureglobalparamsnullpassingtest();

storedprocedureresultsetmappingtest();

storedproceduretest();

category(id:Integer [PK], name:String);

product2(id:Integer [PK], description:String, GeneratedName:Category #FK to(Cat));

folder(id:Long [PK], name:String, owner:String);

contact(id:Long [PK], type:String, firstname:String, lastname:String, GeneratedName:Folder #FK to(D));

irrelevantentity(id:Integer [PK], name:String);

extrastatetest(/***storingitasafieldsoitcanbeaccessedfromtheentitysetter.*/:Session);

generatedvaluetest();

defaultenhancementcontext();

entitybinder(log:CoreMessageLogger, natural_id_cache_suffix:String, context:MetadataBuildingContext, name:String, annotatedclass:XClass, GeneratedName:PersistentClass, discriminatorvalue:String, forcediscriminator:Boolean, insertablediscriminator:Boolean, dynamicinsert:boolean, dynamicupdate:boolean, explicithibernateentityannotation:boolean, GeneratedName:OptimisticLockType, GeneratedName:PolymorphismType, selectbeforeupdate:boolean, batchsize:int, lazy:boolean, proxyclass:XClass, where:String, secondarytables:java.util.Map<String,Join>, secondarytablejoins:java.util.Map<String,Object>, cacheconcurrentstrategy:String, cacheregion:String, naturalidcacheregion:String, filters:List<Filter>, GeneratedName:InheritanceState, ignoreidannotations:boolean, cachelazyproperty:boolean, property:AccessType, wrapidsinembeddedcomponents:boolean, subselect:String, sec_tbl_ns_helper:SecondaryTableNamingStrategyHelper);

resultsetmappingsecondpass(log:CoreMessageLogger, ann:SqlResultSetMapping, context:MetadataBuildingContext, isdefault:boolean);

annotationbinder(log:CoreMessageLogger, default_cache_concurrency_strategy:CacheConcurrencyStrategy);

classpropertyholder(GeneratedName:PersistentClass, joins:Map<String,Join>, joinsperrealtablename:Map<String,Join>, GeneratedName:EntityBinder, inheritancestateperclass:Map<XClass,InheritanceState>, attributeconversioninfomap:Map<String,AttributeConversionInfo>);

person(id:long [PK], GeneratedName:Subject #FK to(Subject), person_type: String);

plane(id:Long [PK], nbrofseats:int, planetype: String);

file(name:String [PK], parent:Folder #FK to(D));

hardware(parent:Hardware #FK to(D), DeviceType: String);

comment(id:Long [PK], GeneratedName:Post, name:String, GeneratedName:Forum, DTYPE: String);

animal(id:long [PK]);

b(id:TableBId, idcolumn:ATable #FK to(ATable));

step(id:Integer [PK], parent:Step #FK to(E), type: String);

parententity(id:Long [PK], CLASS_ID: String);



** PROGRAM TYPE: JPA+Hibernate(Hybrid)