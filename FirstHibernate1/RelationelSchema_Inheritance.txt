image(id:Long [PK], content:byte);

phone(id:Long [PK], GeneratedName:Person #FK to(Person), number:String, type:PhoneType, repairtimestamps:List<Date>);

payment(id:Long [PK], amount:BigDecimal, completed:boolean, GeneratedName:Person #FK to(Person));

call(id:Long [PK], GeneratedName:Phone #FK to(Phone), timestamp:Date, duration:int);

partner(id:Long [PK], name:String, version:int);

person(id:Long [PK], name:String, nickname:String, address:String, createdon:Date, addresses:Map<AddressType,String>, version:int);

creditcardpayment();

wiretransferpayment();

event(id:Long [PK], title:String, GeneratedName:Date);

event(id:Long [PK], title:String, GeneratedName:Date);

datapoint(id:long [PK], name:String);

datapoint(id:long [PK], name:String);

datapoint(id:long [PK], name:String);

event(id:Long [PK], title:String, GeneratedName:Date);

optimisticlockingtest(log:Logger);

optimisticlocktypealltest(log:Logger);

explicitlockingtest(log:Logger);

optimisticlocktypedirtytest(log:Logger);

spaceship(name:String [PK], model:String, speed:double, firstname:Captain #FK to(captain), GeneratedName:Dimensions);

collectionloadertest(log:Logger);

oraclecustomsqlwithstoredproceduretest(log:Logger);

customsqlsecondarytabletest(log:Logger);

customsqltest(log:Logger);

captain(id:Identity);

criteriatest();

inmemoryvaluegenerationtest();

creationtimestamptest();

generatedtest();

databasevaluegenerationtest();

generatortypetest();

moneyconvertertest();

periodstringtest(GeneratedName:Period);

bitsettypetest();

integerproperty(id:Long [PK], name:String, value:Integer);

propertyholder(id:Long [PK], GeneratedName:Property);

propertyrepository(id:Long [PK], properties:List<Property<?>>);

stringproperty(id:Long [PK], name:String, value:String);

filtertest(log:Logger);

calendarwithtemporaltimestamptest();

formulatest();

joincolumnorformulatest(log:Logger);

enumerationcustomtypetest();

phonetypeenumeratedstringtest();

wheretest();

quotingtest();

datewithtemporaldatetest();

blobbytearraytest();

clobstringtest();

phonetypeenumeratedordinaltest();

nclobstringtest();

blobtest();

explicittypetest();

columntransformertest();

filterjointabletest(log:Logger);

enumerationconvertertest();

implicitbasictypetest();

datewithtemporaltimestamptest();

nclobtest();

clobtest();

nationalizedtest();

jpaquotingtest();

bitsetusertypetest();

explicitcolumnnamingtest();

instantliteraltest();

autoquotingtest();

nclobchararraytest();

joinformulatest(log:Logger);

typecategorytest();

localdatetimewithtemporaltimetest();

clobchararraytest();

datewithtemporaltimetest();

explicitbasictypetest();

pooledoptimizertest();

mappedsuperclasstest();

tableperclasstest();

discriminatoroptionsnotnullsingletabletest();

discriminatornotnullsingletabletest();

singletablediscriminatorformulatest();

singletabletest();

jointableprimarykeyjoincolumntest();

jointabletest();

autoflushtest(log:Logger);

commitflushtest(log:Logger);

manualflushtest(log:Logger);

alwaysflushtest(log:Logger);

flushordertest(log:Logger);

persistencecontexttest(log:Logger);

bytecodeenhancementtest();

phone(id:Long [PK], number:String, owner:Person #FK to(Person));

person(id:Long [PK], name:String);

onetomanyunidirectionaltest();

unidirectionalmanytomanyremovetest(log:Logger);

derivedidentifierprimarykeyjoincolumntest();

onetomanybidirectionaltest();

manytomanybidirectionalwithlinkentitytest(log:Logger);

manytoonetest();

compositeidassociationtest();

manytomanybidirectionaltest();

onetoonebidirectionaltest(log:Logger);

bidirectionaltwoonetomanymapsidtest();

derivedidentifiertest();

onetooneunidirectionaltest();

manytomanyunidirectionaltest(log:Logger);

notfoundtest();

bootstraptest(emf:EntityManagerFactory);

elementcollectionmaptest();

arraytest();

bidirectionalmaptest();

basictypeordercolumnelementcollectiontest(log:Logger);

bidirectionalorderbylisttest();

bidirectionalsortedsettest(log:Logger);

unidirectionalsettest();

unidirectionalsortedsettest(log:Logger);

unidirectionalmaptest();

basictypecollectiontest(log:Logger);

bidirectionalsettest();

bidirectionalbagorphanremovaltest();

unidirectionalcomparatorsortedsettest(log:Logger);

unidirectionalordercolumnlisttest();

bidirectionalordercolumnlisttest();

bidirectionalcomparatorsortedsettest(log:Logger);

unidirectionalbagtest();

queuetest(log:Logger);

unidirectionalorderedbylisttest();

bidirectionalbagtest();

basictypeelementcollectiontest(log:Logger);

embeddabletypeelementcollectiontest();

checktest();

schemagenerationtest();

columndefaulttest();

jmxtest(log:Logger);

fetchingtest(log:Logger);

graphfetchingtest(log:Logger);

directvsqueryfetchingtest(log:Logger);

fetchmodeselecttest(log:Logger);

lazycollectiontest(log:Logger);

batchfetchingtest(log:Logger);

fetchmodejointest(log:Logger);

profilefetchingtest(log:Logger);

fetchmodesubselecttest(log:Logger);

listenertest();

interceptortest(GeneratedName:Logger);

entityimmutabilitytest(log:Logger);

collectionimmutabilitytest(log:Logger);

firstlevelcachetest(log:Logger);

nonstrictreadwritecachetest(log:Logger);

secondlevelcachetest(log:Logger);

transactionstest();

abstractmultitenancytest(front_end_tenant:String, back_end_tenant:String, connectionprovidermap:Map<String,ConnectionProvider>, GeneratedName:SessionFactory);

spatialtest(GeneratedName:GeometryFactory);

selectdistincttest(log:Logger);



** PROGRAM TYPE: JPA+Hibernate(Hybrid)