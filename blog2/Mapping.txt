ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Authority =>=>=> RelationalSchema.Table>> authority;
ClassDiagram.Class>> Comment =>=>=> RelationalSchema.Table>> comment;
ClassDiagram.Class>> Blog =>=>=> RelationalSchema.Table>> blog;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.//用户的唯一标识id:Long =>=>=> RelationalSchema.Column>> user.//用户的唯一标识id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.//用户账号，用户登录时的唯一标识username:String =>=>=> RelationalSchema.Column>> user.//用户账号，用户登录时的唯一标识username;
ClassDiagram.Attribut>> User.//登录时密码password:String =>=>=> RelationalSchema.Column>> user.//登录时密码password;
ClassDiagram.Attribut>> User.//头像图片地址avatar:String =>=>=> RelationalSchema.Column>> user.//头像图片地址avatar;
ClassDiagram.Attribut>> Authority.serialversionuid:long =>=>=> RelationalSchema.Column>> authority.serialversionuid;
ClassDiagram.Attribut>> Authority.//用户的唯一标识id:Long =>=>=> RelationalSchema.Column>> authority.//用户的唯一标识id PRIMARY KEY;
ClassDiagram.Attribut>> Authority.name:String =>=>=> RelationalSchema.Column>> authority.name;
ClassDiagram.Attribut>> Comment.serialversionuid:long =>=>=> RelationalSchema.Column>> comment.serialversionuid;
ClassDiagram.Attribut>> Comment.//用户的唯一标识id:Long =>=>=> RelationalSchema.Column>> comment.//用户的唯一标识id PRIMARY KEY;
ClassDiagram.Attribut>> Comment.content:String =>=>=> RelationalSchema.Column>> comment.content;
ClassDiagram.Attribut>> Comment.createtime:Timestamp =>=>=> RelationalSchema.Column>> comment.createtime;
ClassDiagram.Attribut>> Blog.serialversionuid:long =>=>=> RelationalSchema.Column>> blog.serialversionuid;
ClassDiagram.Attribut>> Blog.//用户的唯一标识id:Long =>=>=> RelationalSchema.Column>> blog.//用户的唯一标识id PRIMARY KEY;
ClassDiagram.Attribut>> Blog.title:String =>=>=> RelationalSchema.Column>> blog.title;
ClassDiagram.Attribut>> Blog.summary:String =>=>=> RelationalSchema.Column>> blog.summary;
ClassDiagram.Attribut>> Blog.content:String =>=>=> RelationalSchema.Column>> blog.content;
ClassDiagram.Attribut>> Blog.//将md转为htmlhtmlcontent:String =>=>=> RelationalSchema.Column>> blog.//将md转为htmlhtmlcontent;
ClassDiagram.Attribut>> Blog.createtime:Timestamp =>=>=> RelationalSchema.Column>> blog.createtime;
ClassDiagram.Attribut>> Blog.//访问量、阅读量readsize:Integer =>=>=> RelationalSchema.Column>> blog.//访问量、阅读量readsize;
ClassDiagram.Attribut>> Blog.//评论量commentsize:Integer =>=>=> RelationalSchema.Column>> blog.//评论量commentsize;
ClassDiagram.Attribut>> Blog.//点赞量likesize:Integer =>=>=> RelationalSchema.Column>> blog.//点赞量likesize;
Many-To-Many relationship between ClassDiagram.Class>>User  and ClassDiagram.Class>>list<authority>: user_authority(user_id:User [PK] #FK to User,authority_id:list<authority> [PK] #FK to list<authority>);
One-To-One relationship between ClassDiagram.Class>>Comment  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Blog  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Blog  to ClassDiagram.Class>>List<Comment>;
