ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> ComputerBook =>=>=> RelationalSchema.Table>> computerbook;
ClassDiagram.Class>> Sample =>=>=> RelationalSchema.Table>> sample;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Author =>=>=> RelationalSchema.Table>> author;
ClassDiagram.Class>> Publisher =>=>=> RelationalSchema.Table>> publisher;
ClassDiagram.Class>> Email =>=>=> RelationalSchema.Table>> email;
ClassDiagram.Class>> Message =>=>=> RelationalSchema.Table>> message;
ClassDiagram.Attribut>> Customer.id:int =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Customer.address:String =>=>=> RelationalSchema.Column>> customer.address;
ClassDiagram.Attribut>> ComputerBook.softwarename:String =>=>=> RelationalSchema.Column>> computerbook.softwarename;
ClassDiagram.Attribut>> Sample.id:Integer =>=>=> RelationalSchema.Column>> sample.id PRIMARY KEY;
ClassDiagram.Attribut>> Sample.name:String =>=>=> RelationalSchema.Column>> sample.name;
ClassDiagram.Attribut>> Address.id:int =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.country:String =>=>=> RelationalSchema.Column>> address.country;
ClassDiagram.Attribut>> Book.title:String =>=>=> RelationalSchema.Column>> book.title;
ClassDiagram.Attribut>> Book.GeneratedName:Publisher =>=>=> RelationalSchema.Column>> book.GeneratedName;
ClassDiagram.Attribut>> Book.pages:int =>=>=> RelationalSchema.Column>> book.pages;
ClassDiagram.Attribut>> Book.id:int =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.publication:Date =>=>=> RelationalSchema.Column>> book.publication;
ClassDiagram.Attribut>> Author.id:int =>=>=> RelationalSchema.Column>> author.id PRIMARY KEY;
ClassDiagram.Attribut>> Author.name:String =>=>=> RelationalSchema.Column>> author.name;
ClassDiagram.Attribut>> Author.address:AuthorAddress =>=>=> RelationalSchema.Column>> author.address;
ClassDiagram.Attribut>> Publisher.id:int =>=>=> RelationalSchema.Column>> publisher.id PRIMARY KEY;
ClassDiagram.Attribut>> Publisher.name:String =>=>=> RelationalSchema.Column>> publisher.name;
ClassDiagram.Attribut>> Publisher.GeneratedName:Address =>=>=> RelationalSchema.Column>> publisher.GeneratedName;
ClassDiagram.Attribut>> Email.id:Integer =>=>=> RelationalSchema.Column>> email.id PRIMARY KEY;
ClassDiagram.Attribut>> Email.GeneratedName:Message =>=>=> RelationalSchema.Column>> email.GeneratedName;
ClassDiagram.Attribut>> Email.title:String =>=>=> RelationalSchema.Column>> email.title;
ClassDiagram.Attribut>> Message.id:Integer =>=>=> RelationalSchema.Column>> message.id PRIMARY KEY;
ClassDiagram.Attribut>> Message.content:String =>=>=> RelationalSchema.Column>> message.content;
ClassDiagram.Attribut>> Message.GeneratedName:Email =>=>=> RelationalSchema.Column>> message.GeneratedName;
Author: book_Author(bookID:book [PK] #FK to book,AuthorID:Author [PK] #FK to Author);
One-To-Many relationship from ClassDiagram.Class>>Publisher  to ClassDiagram.Class>>Set<Book>;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Book  ;
