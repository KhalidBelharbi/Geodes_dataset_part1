ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Subjects =>=>=> RelationalSchema.Table>> subjects;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Customer.age:int =>=>=> RelationalSchema.Column>> customer.age;
ClassDiagram.Attribut>> Customer.email:String =>=>=> RelationalSchema.Column>> customer.email;
ClassDiagram.Attribut>> Customer.address:String =>=>=> RelationalSchema.Column>> customer.address;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.age:int =>=>=> RelationalSchema.Column>> employee.age;
ClassDiagram.Attribut>> Employee.phone:String =>=>=> RelationalSchema.Column>> employee.phone;
ClassDiagram.Attribut>> Employee.address:String =>=>=> RelationalSchema.Column>> employee.address;
ClassDiagram.Attribut>> Employee.gender:String =>=>=> RelationalSchema.Column>> employee.gender;
ClassDiagram.Attribut>> Employee.salary:Long =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Employee.job:String =>=>=> RelationalSchema.Column>> employee.job;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Product.price:int =>=>=> RelationalSchema.Column>> product.price;
ClassDiagram.Attribut>> Department.id:Long =>=>=> RelationalSchema.Column>> department.id PRIMARY KEY;
ClassDiagram.Attribut>> Department.name:String =>=>=> RelationalSchema.Column>> department.name;
ClassDiagram.Attribut>> Category.id:Long =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.name:String =>=>=> RelationalSchema.Column>> category.name;
ClassDiagram.Attribut>> Category.description:String =>=>=> RelationalSchema.Column>> category.description;
ClassDiagram.Attribut>> Student.id:Long =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.name:String =>=>=> RelationalSchema.Column>> student.name;
ClassDiagram.Attribut>> Student.age:int =>=>=> RelationalSchema.Column>> student.age;
ClassDiagram.Attribut>> Student.phone:String =>=>=> RelationalSchema.Column>> student.phone;
ClassDiagram.Attribut>> Student.address:String =>=>=> RelationalSchema.Column>> student.address;
ClassDiagram.Attribut>> Student.gender:String =>=>=> RelationalSchema.Column>> student.gender;
ClassDiagram.Attribut>> Subjects.id:Long =>=>=> RelationalSchema.Column>> subjects.id PRIMARY KEY;
ClassDiagram.Attribut>> Subjects.name:String =>=>=> RelationalSchema.Column>> subjects.name;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>> represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Product  to ClassDiagram.Class>> represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>Set<Employee>;
One-To-Many relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>Set<Product>;
Many-To-One relationship from ClassDiagram.Class>>Student  to ClassDiagram.Class>> represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Subjects  to ClassDiagram.Class>>Set<Subjects>;
