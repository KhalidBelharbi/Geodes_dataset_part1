ClassDiagram.Class>> ListenLog =>=>=> RelationalSchema.Table>> listenlog;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Artist =>=>=> RelationalSchema.Table>> artist;
ClassDiagram.Class>> Song =>=>=> RelationalSchema.Table>> song;
ClassDiagram.Class>> Album =>=>=> RelationalSchema.Table>> album;
ClassDiagram.Class>> Playlist =>=>=> RelationalSchema.Table>> playlist;
ClassDiagram.Class>> Puntuacion =>=>=> RelationalSchema.Table>> puntuacion;
ClassDiagram.Class>> Usuario =>=>=> RelationalSchema.Table>> usuario;
ClassDiagram.Attribut>> ListenLog.id:Long =>=>=> RelationalSchema.Column>> listenlog.id PRIMARY KEY;
ClassDiagram.Attribut>> ListenLog.GeneratedName:Timestamp =>=>=> RelationalSchema.Column>> listenlog.GeneratedName;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname;
ClassDiagram.Attribut>> Artist.id:Long =>=>=> RelationalSchema.Column>> artist.id PRIMARY KEY;
ClassDiagram.Attribut>> Artist.nombre:String =>=>=> RelationalSchema.Column>> artist.nombre;
ClassDiagram.Attribut>> Song.id:Long =>=>=> RelationalSchema.Column>> song.id PRIMARY KEY;
ClassDiagram.Attribut>> Song.nombre:String =>=>=> RelationalSchema.Column>> song.nombre;
ClassDiagram.Attribut>> Song.letra:String =>=>=> RelationalSchema.Column>> song.letra;
ClassDiagram.Attribut>> Song.fecha:Date =>=>=> RelationalSchema.Column>> song.fecha;
ClassDiagram.Attribut>> Album.id:Long =>=>=> RelationalSchema.Column>> album.id PRIMARY KEY;
ClassDiagram.Attribut>> Album.title:String =>=>=> RelationalSchema.Column>> album.title;
ClassDiagram.Attribut>> Album.created:Date =>=>=> RelationalSchema.Column>> album.created;
ClassDiagram.Attribut>> Playlist.id:Long =>=>=> RelationalSchema.Column>> playlist.id PRIMARY KEY;
ClassDiagram.Attribut>> Playlist.titulo:String =>=>=> RelationalSchema.Column>> playlist.titulo;
ClassDiagram.Attribut>> Playlist.fecha_creacion:Date =>=>=> RelationalSchema.Column>> playlist.fecha_creacion;
ClassDiagram.Attribut>> Puntuacion.id:Long =>=>=> RelationalSchema.Column>> puntuacion.id PRIMARY KEY;
ClassDiagram.Attribut>> Puntuacion.score:Integer =>=>=> RelationalSchema.Column>> puntuacion.score;
ClassDiagram.Attribut>> Usuario.id:Long =>=>=> RelationalSchema.Column>> usuario.id PRIMARY KEY;
ClassDiagram.Attribut>> Usuario.email:String =>=>=> RelationalSchema.Column>> usuario.email;
ClassDiagram.Attribut>> Usuario.password:String =>=>=> RelationalSchema.Column>> usuario.password;
ClassDiagram.Attribut>> Usuario.lastplayed:List<Song> =>=>=> RelationalSchema.Column>> usuario.lastplayed;
ClassDiagram.Attribut>> Usuario.//'activo','inactivo'status:String =>=>=> RelationalSchema.Column>> usuario.//'activo','inactivo'status;
Many-To-One relationship from ClassDiagram.Class>>ListenLog  to ClassDiagram.Class>>song represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>ListenLog  to ClassDiagram.Class>>usuario represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Artist  and ClassDiagram.Class>>collection<person>: person_artist(Artist_ID:Artist [PK] #FK to Artist,collection<person>_ID:collection<person> [PK] #FK to collection<person>);
Many-To-Many relationship between ClassDiagram.Class>>Artist  and ClassDiagram.Class>>collection<album>: person_artist(Artist_ID:Artist [PK] #FK to Artist,collection<person>_ID:collection<person> [PK] #FK to collection<person>);artist_album(Artist_ID:Artist [PK] #FK to Artist,collection<album>_ID:collection<album> [PK] #FK to collection<album>);
Many-To-One relationship from ClassDiagram.Class>>Song  to ClassDiagram.Class>>album represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Album  and ClassDiagram.Class>>collection<song>: album_songs(Album_ID:Album [PK] #FK to Album,collection<song>_ID:collection<song> [PK] #FK to collection<song>);
Many-To-One relationship from ClassDiagram.Class>>Album  to ClassDiagram.Class>>artist represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Playlist  and ClassDiagram.Class>>list<song>: playlist_songs(Playlist_ID:Playlist [PK] #FK to Playlist,list<song>_ID:list<song> [PK] #FK to list<song>);
Many-To-One relationship from ClassDiagram.Class>>Playlist  to ClassDiagram.Class>>usuario represented by ClassDiagram.Atrribute>>creador;
Many-To-One relationship from ClassDiagram.Class>>Puntuacion  to ClassDiagram.Class>>song represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Puntuacion  to ClassDiagram.Class>>usuario represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Usuario  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>user;
Many-To-Many relationship between ClassDiagram.Class>>Usuario  and ClassDiagram.Class>>collection<playlist>: user_playlist(Usuario_ID:Usuario [PK] #FK to Usuario,collection<playlist>_ID:collection<playlist> [PK] #FK to collection<playlist>);
Many-To-Many relationship between ClassDiagram.Class>>Usuario  and ClassDiagram.Class>>collection<usuario>: user_playlist(Usuario_ID:Usuario [PK] #FK to Usuario,collection<playlist>_ID:collection<playlist> [PK] #FK to collection<playlist>);user_followers(Usuario_ID:Usuario [PK] #FK to Usuario,collection<usuario>_ID:collection<usuario> [PK] #FK to collection<usuario>);
