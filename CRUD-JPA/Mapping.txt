ClassDiagram.Class>> Professor =>=>=> RelationalSchema.Table>> professor;
ClassDiagram.Class>> ResearchProject =>=>=> RelationalSchema.Table>> researchproject;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Citizen =>=>=> RelationalSchema.Table>> citizen;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> Vehicle =>=>=> RelationalSchema.Table>> vehicle;
ClassDiagram.Class>> Bus =>=>=> RelationalSchema.Table>> bus;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> University =>=>=> RelationalSchema.Table>> university;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Article =>=>=> RelationalSchema.Table>> article;
ClassDiagram.Attribut>> Professor.id:int =>=>=> RelationalSchema.Column>> professor.id PRIMARY KEY;
ClassDiagram.Attribut>> Professor.professorname:String =>=>=> RelationalSchema.Column>> professor.professorname;
ClassDiagram.Attribut>> ResearchProject.id:int =>=>=> RelationalSchema.Column>> researchproject.id PRIMARY KEY;
ClassDiagram.Attribut>> ResearchProject.projectname:String =>=>=> RelationalSchema.Column>> researchproject.projectname;
ClassDiagram.Attribut>> Address.addressid:int =>=>=> RelationalSchema.Column>> address.addressid PRIMARY KEY;
ClassDiagram.Attribut>> Address.addressname:String =>=>=> RelationalSchema.Column>> address.addressname;
ClassDiagram.Attribut>> Address.zipcode:int =>=>=> RelationalSchema.Column>> address.zipcode;
ClassDiagram.Attribut>> Employee.employeeid:int =>=>=> RelationalSchema.Column>> employee.employeeid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Citizen.id:int =>=>=> RelationalSchema.Column>> citizen.id PRIMARY KEY;
ClassDiagram.Attribut>> Citizen.name:String =>=>=> RelationalSchema.Column>> citizen.name;
ClassDiagram.Attribut>> Citizen.age:int =>=>=> RelationalSchema.Column>> citizen.age;
ClassDiagram.Attribut>> Car.speed:int =>=>=> RelationalSchema.Column>> car.speed;
ClassDiagram.Attribut>> Vehicle.id:int =>=>=> RelationalSchema.Column>> vehicle.id PRIMARY KEY;
ClassDiagram.Attribut>> Vehicle.name:String =>=>=> RelationalSchema.Column>> vehicle.name;
ClassDiagram.Attribut>> Bus.numberofpassengers:int =>=>=> RelationalSchema.Column>> bus.numberofpassengers;
ClassDiagram.Attribut>> Person.id:int =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.age:int =>=>=> RelationalSchema.Column>> person.age;
ClassDiagram.Attribut>> University.universityid:int =>=>=> RelationalSchema.Column>> university.universityid PRIMARY KEY;
ClassDiagram.Attribut>> University.universityname:String =>=>=> RelationalSchema.Column>> university.universityname;
ClassDiagram.Attribut>> Student.studentid:int =>=>=> RelationalSchema.Column>> student.studentid PRIMARY KEY;
ClassDiagram.Attribut>> Student.studentname:String =>=>=> RelationalSchema.Column>> student.studentname;
ClassDiagram.Attribut>> Article.id:int =>=>=> RelationalSchema.Column>> article.id PRIMARY KEY;
ClassDiagram.Attribut>> Article.articlename:String =>=>=> RelationalSchema.Column>> article.articlename;
ClassDiagram.Attribut>> Article.GeneratedName:Date =>=>=> RelationalSchema.Column>> article.GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>ResearchProject  and ClassDiagram.Class>>Professor: professor_project(projectid:ResearchProject [PK] #FK to ResearchProject,professorid:Professor [PK] #FK to Professor);
One-To-One relationship between ClassDiagram.Class>>Address  to ClassDiagram.Class>>Employee represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Address represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>University  to ClassDiagram.Class>>List<Student>;
Many-To-One relationship from ClassDiagram.Class>>Student  to ClassDiagram.Class>>university represented by ClassDiagram.Atrribute>>GeneratedName;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Vehicle  SubClass>>Citizen ;
