ClassDiagram.Class>> RoomRequest =>=>=> RelationalSchema.Table>> roomrequest;
ClassDiagram.Class>> Message =>=>=> RelationalSchema.Table>> message;
ClassDiagram.Class>> Tag =>=>=> RelationalSchema.Table>> tag;
ClassDiagram.Class>> Room =>=>=> RelationalSchema.Table>> room;
ClassDiagram.Class>> Topic =>=>=> RelationalSchema.Table>> topic;
ClassDiagram.Class>> Reaction =>=>=> RelationalSchema.Table>> reaction;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Reply =>=>=> RelationalSchema.Table>> reply;
ClassDiagram.Class>> Badge =>=>=> RelationalSchema.Table>> badge;
ClassDiagram.Class>> Choix =>=>=> RelationalSchema.Table>> choix;
ClassDiagram.Attribut>> RoomRequest.id:long =>=>=> RelationalSchema.Column>> roomrequest.id PRIMARY KEY;
ClassDiagram.Attribut>> RoomRequest.status:requestType =>=>=> RelationalSchema.Column>> roomrequest.status;
ClassDiagram.Attribut>> Message.id:long =>=>=> RelationalSchema.Column>> message.id PRIMARY KEY;
ClassDiagram.Attribut>> Message.metadata:File =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Message.body:String =>=>=> RelationalSchema.Column>> message.body;
ClassDiagram.Attribut>> Message.file:String =>=>=> RelationalSchema.Column>> message.file;
ClassDiagram.Attribut>> Message.GeneratedName:type =>=>=> RelationalSchema.Column>> message.GeneratedName;
ClassDiagram.Attribut>> Message.//todotimestampghalettimestamp:long =>=>=> RelationalSchema.Column>> message.//todotimestampghalettimestamp;
ClassDiagram.Attribut>> Tag.id:long =>=>=> RelationalSchema.Column>> tag.id PRIMARY KEY;
ClassDiagram.Attribut>> Tag.name:String =>=>=> RelationalSchema.Column>> tag.name;
ClassDiagram.Attribut>> Tag.counttopics:int =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Room.id:long =>=>=> RelationalSchema.Column>> room.id PRIMARY KEY;
ClassDiagram.Attribut>> Room.name:String =>=>=> RelationalSchema.Column>> room.name;
ClassDiagram.Attribut>> Room.image:String =>=>=> RelationalSchema.Column>> room.image;
ClassDiagram.Attribut>> Room.subject:String =>=>=> RelationalSchema.Column>> room.subject;
ClassDiagram.Attribut>> Room.isprivate:boolean =>=>=> RelationalSchema.Column>> room.isprivate;
ClassDiagram.Attribut>> Room.requeststatus:RoomRequest.requestType =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Topic.id:long =>=>=> RelationalSchema.Column>> topic.id PRIMARY KEY;
ClassDiagram.Attribut>> Topic.title:String =>=>=> RelationalSchema.Column>> topic.title;
ClassDiagram.Attribut>> Topic.description:String =>=>=> RelationalSchema.Column>> topic.description;
ClassDiagram.Attribut>> Topic.timestamp:long =>=>=> RelationalSchema.Column>> topic.timestamp;
ClassDiagram.Attribut>> Topic.seen:long =>=>=> RelationalSchema.Column>> topic.seen;
ClassDiagram.Attribut>> Topic.GeneratedName:Status =>=>=> RelationalSchema.Column>> topic.GeneratedName;
ClassDiagram.Attribut>> Topic.countreplies:int =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Reaction.id:long =>=>=> RelationalSchema.Column>> reaction.id PRIMARY KEY;
ClassDiagram.Attribut>> Reaction.type:reactionType =>=>=> RelationalSchema.Column>> reaction.type;
ClassDiagram.Attribut>> User.id:String =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.firstname:String =>=>=> RelationalSchema.Column>> user.firstname;
ClassDiagram.Attribut>> User.lastname:String =>=>=> RelationalSchema.Column>> user.lastname;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.image:String =>=>=> RelationalSchema.Column>> user.image;
ClassDiagram.Attribut>> Reply.id:long =>=>=> RelationalSchema.Column>> reply.id PRIMARY KEY;
ClassDiagram.Attribut>> Reply.reply:String =>=>=> RelationalSchema.Column>> reply.reply;
ClassDiagram.Attribut>> Reply.useful:boolean =>=>=> RelationalSchema.Column>> reply.useful;
ClassDiagram.Attribut>> Reply.timestamp:long =>=>=> RelationalSchema.Column>> reply.timestamp;
ClassDiagram.Attribut>> Badge.id:long =>=>=> RelationalSchema.Column>> badge.id PRIMARY KEY;
ClassDiagram.Attribut>> Badge.name:String =>=>=> RelationalSchema.Column>> badge.name;
ClassDiagram.Attribut>> Badge.icon_s:String =>=>=> RelationalSchema.Column>> badge.icon_s;
ClassDiagram.Attribut>> Badge.icon_b:String =>=>=> RelationalSchema.Column>> badge.icon_b;
ClassDiagram.Attribut>> Badge.description:String =>=>=> RelationalSchema.Column>> badge.description;
ClassDiagram.Attribut>> Choix.id:long =>=>=> RelationalSchema.Column>> choix.id PRIMARY KEY;
ClassDiagram.Attribut>> Choix.body:String =>=>=> RelationalSchema.Column>> choix.body;
Many-To-One relationship from ClassDiagram.Class>>RoomRequest  to ClassDiagram.Class>>room represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>RoomRequest  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Message  to ClassDiagram.Class>>room represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Message  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Message  to ClassDiagram.Class>>Set<Reaction>;
One-To-Many relationship from ClassDiagram.Class>>Message  to ClassDiagram.Class>>Set<Choix>;
Many-To-One relationship from ClassDiagram.Class>>Room  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Room  and ClassDiagram.Class>>set<user>: room_user(room_id:Room [PK] #FK to Room,user_id:set<user> [PK] #FK to set<user>);
Many-To-One relationship from ClassDiagram.Class>>Topic  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Topic  and ClassDiagram.Class>>set<tag>: topic_tags(topic_id:Topic [PK] #FK to Topic,tag_id:set<tag> [PK] #FK to set<tag>);
One-To-Many relationship from ClassDiagram.Class>>Topic  to ClassDiagram.Class>>Set<Reply>;
Many-To-One relationship from ClassDiagram.Class>>Reaction  to ClassDiagram.Class>>message represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Reaction  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>badge represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<Message>;
Many-To-One relationship from ClassDiagram.Class>>Reply  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Reply  to ClassDiagram.Class>>topic represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Reply  and ClassDiagram.Class>>set<user>: reply_user(reply_id:Reply [PK] #FK to Reply,user_id:set<user> [PK] #FK to set<user>);
Many-To-One relationship from ClassDiagram.Class>>Choix  to ClassDiagram.Class>>message represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Choix  and ClassDiagram.Class>>set<user>: choix_user(choix_id:Choix [PK] #FK to Choix,user_id:set<user> [PK] #FK to set<user>);
