ClassDiagram.Class>> Comment =>=>=> RelationalSchema.Table>> comment;
ClassDiagram.Class>> Vote =>=>=> RelationalSchema.Table>> vote;
ClassDiagram.Class>> Blog =>=>=> RelationalSchema.Table>> blog;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Authority =>=>=> RelationalSchema.Table>> authority;
ClassDiagram.Class>> Catalog =>=>=> RelationalSchema.Table>> catalog;
ClassDiagram.Attribut>> Comment.serialversionuid:long =>=>=> RelationalSchema.Column>> comment.serialversionuid;
ClassDiagram.Attribut>> Comment.content:String =>=>=> RelationalSchema.Column>> comment.content;
ClassDiagram.Attribut>> Comment.createtime:Timestamp =>=>=> RelationalSchema.Column>> comment.createtime;
ClassDiagram.Attribut>> Vote.serialversionuid:long =>=>=> RelationalSchema.Column>> vote.serialversionuid;
ClassDiagram.Attribut>> Vote.createtime:Timestamp =>=>=> RelationalSchema.Column>> vote.createtime;
ClassDiagram.Attribut>> Blog.serialversionuid:long =>=>=> RelationalSchema.Column>> blog.serialversionuid;
ClassDiagram.Attribut>> Blog.//文章标题title:String =>=>=> RelationalSchema.Column>> blog.//文章标题title;
ClassDiagram.Attribut>> Blog.//文章摘要summary:String =>=>=> RelationalSchema.Column>> blog.//文章摘要summary;
ClassDiagram.Attribut>> Blog.//文章markdown内容content:String =>=>=> RelationalSchema.Column>> blog.//文章markdown内容content;
ClassDiagram.Attribut>> Blog.//生成的htmlhtmlcontent:String =>=>=> RelationalSchema.Column>> blog.//生成的htmlhtmlcontent;
ClassDiagram.Attribut>> Blog.//文章发表时间createtime:Date =>=>=> RelationalSchema.Column>> blog.//文章发表时间createtime;
ClassDiagram.Attribut>> Blog.//阅读量readsize:Integer =>=>=> RelationalSchema.Column>> blog.//阅读量readsize;
ClassDiagram.Attribut>> Blog.//评论数commentsize:Integer =>=>=> RelationalSchema.Column>> blog.//评论数commentsize;
ClassDiagram.Attribut>> Blog.//点赞数votesize:Integer =>=>=> RelationalSchema.Column>> blog.//点赞数votesize;
ClassDiagram.Attribut>> Blog.//评论comments:List<Comment> =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Blog.//点赞votes:List<Vote> =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Blog.//标签tags:String =>=>=> RelationalSchema.Column>> blog.//标签tags;
ClassDiagram.Attribut>> Blog.uptime:Date =>=>=> RelationalSchema.Column>> blog.uptime;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.//用户帐号username:String =>=>=> RelationalSchema.Column>> user.//用户帐号username;
ClassDiagram.Attribut>> User.//密码password:String =>=>=> RelationalSchema.Column>> user.//密码password;
ClassDiagram.Attribut>> User.//别名name:String =>=>=> RelationalSchema.Column>> user.//别名name;
ClassDiagram.Attribut>> User.//邮箱email:String =>=>=> RelationalSchema.Column>> user.//邮箱email;
ClassDiagram.Attribut>> User.//头像地址avatar:String =>=>=> RelationalSchema.Column>> user.//头像地址avatar;
ClassDiagram.Attribut>> User.accountexpired:Boolean =>=>=> RelationalSchema.Column>> user.accountexpired;
ClassDiagram.Attribut>> User.accountlocked:Boolean =>=>=> RelationalSchema.Column>> user.accountlocked;
ClassDiagram.Attribut>> User.credentialexpired:Boolean =>=>=> RelationalSchema.Column>> user.credentialexpired;
ClassDiagram.Attribut>> User.enabled:Boolean =>=>=> RelationalSchema.Column>> user.enabled;
ClassDiagram.Attribut>> Authority.serialversionuid:long =>=>=> RelationalSchema.Column>> authority.serialversionuid;
ClassDiagram.Attribut>> Authority.name:String =>=>=> RelationalSchema.Column>> authority.name;
ClassDiagram.Attribut>> Catalog.serialversionuid:long =>=>=> RelationalSchema.Column>> catalog.serialversionuid;
ClassDiagram.Attribut>> Catalog.//编号id:Long =>=>=> RelationalSchema.Column>> catalog.//编号id PRIMARY KEY;
ClassDiagram.Attribut>> Catalog.//分类名称name:String =>=>=> RelationalSchema.Column>> catalog.//分类名称name;
Many-To-One relationship from ClassDiagram.Class>>Comment  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Vote  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Blog  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>//发表文章的用户;
Many-To-One relationship from ClassDiagram.Class>>Blog  to ClassDiagram.Class>>catalog represented by ClassDiagram.Atrribute>>//分类;
Many-To-Many relationship between ClassDiagram.Class>>User  and ClassDiagram.Class>>list<authority>: user_authority(user_id:User [PK] #FK to User,authority_id:list<authority> [PK] #FK to list<authority>);
One-To-One relationship between ClassDiagram.Class>>Catalog  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>//用户;
