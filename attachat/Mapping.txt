ClassDiagram.Class>> SubFollower =>=>=> RelationalSchema.Table>> subfollower;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Sub =>=>=> RelationalSchema.Table>> sub;
ClassDiagram.Class>> Authoritie =>=>=> RelationalSchema.Table>> authoritie;
ClassDiagram.Class>> Comment =>=>=> RelationalSchema.Table>> comment;
ClassDiagram.Class>> Thread =>=>=> RelationalSchema.Table>> thread;
ClassDiagram.Attribut>> SubFollower.GeneratedName:User =>=>=> RelationalSchema.Column>> subfollower.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> SubFollower.GeneratedName:Sub =>=>=> RelationalSchema.Column>> subfollower.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username PRIMARY KEY;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.enabled:boolean =>=>=> RelationalSchema.Column>> user.enabled;
ClassDiagram.Attribut>> Sub.subname:String =>=>=> RelationalSchema.Column>> sub.subname PRIMARY KEY;
ClassDiagram.Attribut>> Sub.creator:String =>=>=> RelationalSchema.Column>> sub.creator;
ClassDiagram.Attribut>> Sub.numberoffollowers:int =>=>=> RelationalSchema.Column>> sub.numberoffollowers;
ClassDiagram.Attribut>> Authoritie./***springwillautomagicallylookattheclass,generateabeanandmap*ittoauthoriteclass.*/:User =>=>=> RelationalSchema.Column>> authoritie./***springwillautomagicallylookattheclass,generateabeanandmap*ittoauthoriteclass.*/ PRIMARY KEY;
ClassDiagram.Attribut>> Authoritie.authority:String =>=>=> RelationalSchema.Column>> authoritie.authority PRIMARY KEY;
ClassDiagram.Attribut>> Comment.commentid:int =>=>=> RelationalSchema.Column>> comment.commentid PRIMARY KEY;
ClassDiagram.Attribut>> Comment.GeneratedName:LocalDateTime =>=>=> RelationalSchema.Column>> comment.GeneratedName;
ClassDiagram.Attribut>> Comment.threadid:int =>=>=> RelationalSchema.Column>> comment.threadid;
ClassDiagram.Attribut>> Comment.username:String =>=>=> RelationalSchema.Column>> comment.username;
ClassDiagram.Attribut>> Comment.content:String =>=>=> RelationalSchema.Column>> comment.content;
ClassDiagram.Attribut>> Comment.parentid:Integer =>=>=> RelationalSchema.Column>> comment.parentid;
ClassDiagram.Attribut>> Comment.deleted:Boolean =>=>=> RelationalSchema.Column>> comment.deleted;
ClassDiagram.Attribut>> Comment.indent:int =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Thread.threadid:int =>=>=> RelationalSchema.Column>> thread.threadid PRIMARY KEY;
ClassDiagram.Attribut>> Thread.GeneratedName:LocalDateTime =>=>=> RelationalSchema.Column>> thread.GeneratedName;
ClassDiagram.Attribut>> Thread.username:String =>=>=> RelationalSchema.Column>> thread.username;
ClassDiagram.Attribut>> Thread.subname:String =>=>=> RelationalSchema.Column>> thread.subname;
ClassDiagram.Attribut>> Thread.threadtitle:String =>=>=> RelationalSchema.Column>> thread.threadtitle;
ClassDiagram.Attribut>> Thread.threadcontent:String =>=>=> RelationalSchema.Column>> thread.threadcontent;
ClassDiagram.Attribut>> Thread.numberofcomments:int =>=>=> RelationalSchema.Column>> thread.numberofcomments;
Many-To-One relationship from ClassDiagram.Class>>SubFollower  to ClassDiagram.Class>> represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>SubFollower  to ClassDiagram.Class>> represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Authoritie>;
Many-To-One relationship from ClassDiagram.Class>>Authoritie  to ClassDiagram.Class>> represented by ClassDiagram.Atrribute>>/***springwillautomagicallylookattheclass,generateabeanandmap*ittoauthoriteclass.*/;
One-To-Many relationship from ClassDiagram.Class>>Comment  to ClassDiagram.Class>>List<Comment>;
