ClassDiagram.Class>> UserRole =>=>=> RelationalSchema.Table>> userrole;
ClassDiagram.Class>> Contact =>=>=> RelationalSchema.Table>> contact;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Log =>=>=> RelationalSchema.Table>> log;
ClassDiagram.Attribut>> UserRole.userroleid:Integer =>=>=> RelationalSchema.Column>> userrole.userroleid PRIMARY KEY;
ClassDiagram.Attribut>> UserRole.role:String =>=>=> RelationalSchema.Column>> userrole.role;
ClassDiagram.Attribut>> Contact.id:int =>=>=> RelationalSchema.Column>> contact.id PRIMARY KEY;
ClassDiagram.Attribut>> Contact.firstname:String =>=>=> RelationalSchema.Column>> contact.firstname;
ClassDiagram.Attribut>> Contact.lastname:String =>=>=> RelationalSchema.Column>> contact.lastname;
ClassDiagram.Attribut>> Contact.telephone:String =>=>=> RelationalSchema.Column>> contact.telephone;
ClassDiagram.Attribut>> Contact.city:String =>=>=> RelationalSchema.Column>> contact.city;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username PRIMARY KEY;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.enable:boolean =>=>=> RelationalSchema.Column>> user.enable;
ClassDiagram.Attribut>> Log.id:int =>=>=> RelationalSchema.Column>> log.id PRIMARY KEY;
ClassDiagram.Attribut>> Log.GeneratedName:Date =>=>=> RelationalSchema.Column>> log.GeneratedName;
ClassDiagram.Attribut>> Log.details:String =>=>=> RelationalSchema.Column>> log.details;
ClassDiagram.Attribut>> Log.username:String =>=>=> RelationalSchema.Column>> log.username;
ClassDiagram.Attribut>> Log.url:String =>=>=> RelationalSchema.Column>> log.url;
Many-To-One relationship from ClassDiagram.Class>>UserRole  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<UserRole>;
